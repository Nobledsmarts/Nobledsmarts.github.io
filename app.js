// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.4.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      H.assertSubtype(source, "$isIterable", [$S], "$asIterable");
      if (H.checkSubtype(source, "$isEfficientLengthIterable", [$S], "$asEfficientLengthIterable"))
        return new H._EfficientLengthCastIterable(source, [$S, $T]);
      return new H.CastIterable(source, [$S, $T]);
    },
    hexDigitValue: function(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable) {
        P.RangeError_checkNotNegative(count, "count");
        return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
      }
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(iterable, count, [$E]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t2, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeWhileIterable: function TakeWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeWhileIterator: function TakeWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._isFinished = false;
      _.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    instantiate1: function(f, T1) {
      var t1;
      H.interceptedTypeCheck(f, "$isClosure");
      t1 = new H.Instantiation1(f, [T1]);
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_currentUri: function() {
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      H.listTypeCheck(array);
      end = J.get$length$asx(array);
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(codePoints, "$isIterable")); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (H.listSuperNativeTypeCheck(charCodes, "$isIterable"), t1 = J.get$iterator$ax(charCodes); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(H.listTypeCheck(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0;
      return t1;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            t2 = H.stringTypeCheck(keys[_i]);
            if (namedArguments.containsKey$1(t2)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[t2]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var _s13_ = "Invalid value";
      if (start < 0 || start > $length)
        return new P.RangeError(0, $length, true, start, "start", _s13_);
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", _s13_);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function(rti) {
      return new H.TypeImpl(rti);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ",
        t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return new H.TypeImpl(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, parameters) {
      if (genericFunctionRti == null)
        return;
      return H.finishBindInstantiatedFunctionType(genericFunctionRti, {func: 1}, parameters, 0);
    },
    finishBindInstantiatedFunctionType: function(rti, result, parameters, depth) {
      var namedParameters, boundNamed, names, t1, _i, $name;
      if ("v" in rti)
        result.v = rti.v;
      else if ("ret" in rti)
        result.ret = H.bindInstantiatedType(rti.ret, parameters, depth);
      if ("args" in rti)
        result.args = H.bindInstantiatedTypes(rti.args, parameters, depth);
      if ("opt" in rti)
        result.opt = H.bindInstantiatedTypes(rti.opt, parameters, depth);
      if ("named" in rti) {
        namedParameters = rti.named;
        boundNamed = {};
        names = Object.keys(namedParameters);
        for (t1 = names.length, _i = 0; _i < t1; ++_i) {
          $name = H.stringTypeCheck(names[_i]);
          boundNamed[$name] = H.bindInstantiatedType(namedParameters[$name], parameters, depth);
        }
        result.named = boundNamed;
      }
      return result;
    },
    bindInstantiatedType: function(rti, parameters, depth) {
      var result, bounds;
      if (rti == null)
        return rti;
      if (rti === -1)
        return rti;
      if (typeof rti == "function")
        return rti;
      if (typeof rti === "number") {
        if (rti < depth)
          return rti;
        return parameters[rti - depth];
      }
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.bindInstantiatedTypes(rti, parameters, depth);
      if ('func' in rti) {
        result = {func: 1};
        if ("bounds" in rti) {
          bounds = rti.bounds;
          depth += bounds.length;
          result.bounds = H.bindInstantiatedTypes(bounds, parameters, depth);
        }
        return H.finishBindInstantiatedFunctionType(rti, result, parameters, depth);
      }
      throw H.wrapException(P.ArgumentError$("Unknown RTI format in bindInstantiatedType."));
    },
    bindInstantiatedTypes: function(rti, parameters, depth) {
      var t1, i,
        array = rti.slice();
      for (t1 = array.length, i = 0; i < t1; ++i)
        C.JSArray_methods.$indexSet(array, i, H.bindInstantiatedType(array[i], parameters, depth));
      return array;
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor$(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(t1);
        } else {
          t1 = t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex));
          return !t1.get$isEmpty(t1);
        }
      }
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    _matchString: function(match) {
      return match.$index(0, 0);
    },
    _stringIdentity: function(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, startIndex, t2, t3, t4, t5;
      if (onMatch == null)
        onMatch = H._js_helper___matchString$closure();
      if (!J.getInterceptor$(pattern).$isPattern)
        throw H.wrapException(P.ArgumentError$value(pattern, "pattern", "is not a Pattern"));
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new H._AllMatchesIterator(t1._re, t1._string, t1._start), startIndex = 0, t2 = ""; t1.moveNext$0(); t2 = t3) {
        t3 = t1.__js_helper$_current;
        t4 = t3._match;
        t5 = t4.index;
        t3 = t2 + H.S(H._js_helper___stringIdentity$closure().call$1(C.JSString_methods.substring$2(receiver, startIndex, t5))) + H.S(onMatch.call$1(t3));
        startIndex = t5 + t4[0].length;
      }
      t1 = t2 + H.S(H._js_helper___stringIdentity$closure().call$1(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this._start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    _ensureNativeList: function(list) {
      var result, i,
        t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      result = new Array(t1.get$length(list));
      result.fixed$length = Array;
      for (i = 0; i < t1.get$length(list); ++i)
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      var t1 = new Uint8Array(buffer, offsetInBytes);
      return t1;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$u: function(receiver) {
      if (receiver == null)
        return J.JSNull.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$message(receiver);
    },
    get$offset$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$offset(receiver);
    },
    get$reversed$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$u: function(receiver) {
      return J.getInterceptor$u(receiver).get$runtimeType(receiver);
    },
    get$setRequestHeader$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$setRequestHeader(receiver);
    },
    get$source$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$source(receiver);
    },
    get$text$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$text(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    _addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    send$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).send$1(receiver, a0);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    splitMapJoin$2$onMatch$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).splitMapJoin$2$onMatch(receiver, a0, a1);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._SyncCompleter(new P._Future($.Zone__current, [$T]), [$T]), [$T]);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      H.interceptedTypeCheck(completer, "$is_AsyncAwaitCompleter");
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._completer.future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _asyncReturn: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future, _null = null;
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(thenCallback, errorCallback, _null);
      else if (!!t1.$isFuture)
        object.then$1$2$onError(thenCallback, errorCallback, _null);
      else {
        future = new P._Future($.Zone__current, [null]);
        H.assertSubtypeOfRuntimeType(object, null);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$1$2(thenCallback, _null, _null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t1._zone;
            t2 = asyncError.error;
            t3 = asyncError.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || t3 === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone;
            t4.toString;
            t4 = t4 == zone;
            if (!t4)
              zone.toString;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            t1 = t1._zone;
            t2 = sourceResult.error;
            t3 = sourceResult.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if (t1 === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, _null = null,
        t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure(H.assertSubtype(elements, "$isIterable", [$T], "$asIterable"), $T), [$T]);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      if (H.assertSubtype(stream, "$isStream", [$T], "$asStream") == null)
        H.throwExpression(P.ArgumentError$notNull("stream"));
      return new P._StreamIterator([$T]);
    },
    _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(t1, t2, [$T]);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [$T]});
      t1.toString;
      t2.set$_async$_onData(H.functionTypeCheck(onData, {func: 1, ret: null, args: [$T]}));
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t2._onError = t1.registerBinaryCallback$3$1(onError, null, P.Object, P.StackTrace);
      else if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object]}))
        t2._onError = H.functionTypeCheck(onError, {func: 1, ret: null, args: [P.Object]});
      else
        H.throwExpression(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      t2.set$_onDone(H.functionTypeCheck(onDone, {func: 1, ret: -1}));
      return t2;
    },
    _cancelAndValue: function(subscription, future, value) {
      var action, t1, t2,
        cancelFuture = subscription.cancel$0();
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture()) {
        action = H.functionTypeCheck(new P._cancelAndValue_closure(future, value), {func: 1});
        t1 = H.getTypeArgumentByIndex(cancelFuture, 0);
        t2 = $.Zone__current;
        if (t2 !== C.C__RootZone) {
          t2.toString;
          H.functionTypeCheck(action, {func: 1, ret: null});
        }
        cancelFuture._addListener$1(new P._FutureListener(new P._Future(t2, [t1]), 8, action, null, [t1, t1]));
      } else
        future._complete$1(value);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._completer = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _AsyncAwaitCompleter_complete_closure: function _AsyncAwaitCompleter_complete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _AsyncAwaitCompleter_completeError_closure: function _AsyncAwaitCompleter_completeError_closure(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.st = t2;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.future = t2;
    },
    Stream_first_closure0: function Stream_first_closure0(t0) {
      this.future = t0;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamView: function StreamView() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t0;
      _._state = t1;
      _._pending = _._cancelFuture = null;
      _.$ti = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, $K, $V) {
      H.functionTypeCheck(equals, {func: 1, ret: P.bool, args: [$K, $K]});
      H.functionTypeCheck(hashCode, {func: 1, ret: P.int, args: [$K]});
      if (hashCode == null) {
        if (equals == null)
          return new H.JsLinkedHashMap([$K, $V]);
        hashCode = P.collection___defaultHashCode$closure();
      } else {
        if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
          return new P._LinkedIdentityHashMap([$K, $V]);
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    _LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      return new P._LinkedCustomHashMap(_equals, _hashCode, new P._LinkedCustomHashMap_closure($K), [$K, $V]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    LinkedHashSet_LinkedHashSet$_empty: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals: function(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode: function(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._collection$_hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    IterableBase: function IterableBase() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(false, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var t1, $length,
        decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && true)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      if (P.Utf8Decoder__unsafe(codeUnits))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var i,
        limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var t1, i, unit;
      H.assertSubtype(units, "$isList", [P.int], "$asList");
      for (t1 = J.getInterceptor$asx(units), i = from; i < endIndex; ++i) {
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit)
          return i - from;
      }
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var bits, expectedChars, t1, i, byteOr, byte, outputIndex0, t2, outputIndex1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      bits = state >>> 2;
      expectedChars = 3 - (state & 3);
      for (t1 = output.length, i = start, byteOr = 0; C.JSInt_methods.$lt(i, end); ++i) {
        byte = bytes.$index(0, i);
        byteOr = C.JSInt_methods.$or(byteOr, byte);
        bits = C.JSInt_methods.$or(bits << 8 >>> 0, byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t2 = C.JSString_methods.codeUnitAt$1(alphabet, bits.$shr(0, 18).$and(0, 63));
          if (outputIndex >= t1)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t2;
          outputIndex = outputIndex0 + 1;
          t2 = C.JSString_methods.codeUnitAt$1(alphabet, bits.$shr(0, 12).$and(0, 63));
          if (outputIndex0 >= t1)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t2;
          outputIndex0 = outputIndex + 1;
          t2 = C.JSString_methods.codeUnitAt$1(alphabet, bits.$shr(0, 6).$and(0, 63));
          if (outputIndex >= t1)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t2;
          outputIndex = outputIndex0 + 1;
          t2 = C.JSString_methods.codeUnitAt$1(alphabet, bits.$and(0, 63));
          if (outputIndex0 >= t1)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t2;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t2;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (outputIndex0 >= t1)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t2;
            outputIndex = outputIndex1 + 1;
            if (outputIndex1 >= t1)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t2;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (outputIndex0 >= t1)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t2;
            outputIndex = outputIndex1 + 1;
            t2 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (outputIndex1 >= t1)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = t2;
            if (outputIndex >= t1)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; C.JSInt_methods.$lt(i, end);) {
        byte = bytes.$index(0, i);
        if (byte.$lt(0, 0) || byte.$gt(0, 255))
          break;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + H.S(bytes.$index(0, i).toRadixString$1(0, 16)), null));
    },
    Encoding_getByName: function($name) {
      if ($name == null)
        return;
      return $.Encoding__nameToEncoding.$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._callback = t0;
      this._convert$_buffer = t1;
      this._bufferIndex = 0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._convert$_value = 0;
    },
    identityHashCode: function(object) {
      return H.objectHashCode(object);
    },
    Function_apply: function($function, positionalArguments) {
      return H.Primitives_applyFunction($function, positionalArguments, null);
    },
    int_parse: function(source, onError, radix) {
      var value;
      H.functionTypeCheck(onError, {func: 1, ret: P.int, args: [P.String]});
      value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, $E) {
      var result, i;
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && true)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t2,
        t1 = [$E],
        list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    List_List$unmodifiable: function(elements, $E) {
      var t1 = [$E];
      return H.assertSubtype(J.JSArray_markUnmodifiableList(H.assertSubtype(P.List_List$from(elements, false, $E), "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len,
        t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, true, false, false, false));
    },
    identical: function(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      H.assertSubtype(canonicalTable, "$isList", [P.int], "$asList");
      if (encoding === C.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      for (t1 = J.getInterceptor$asx(bytes), i = 0, t2 = ""; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128) {
          t3 = C.JSInt_methods._shrOtherPositive$1(byte, 4);
          if (t3 >= 8)
            return H.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += H.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidIndex: function(index, indexable) {
      var $length = indexable._base.length;
      if (typeof index !== "number")
        return H.iae(index);
      if (0 > index || index >= $length)
        throw H.wrapException(P.IndexError$(index, indexable, "index", null, $length));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, i;
      H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    Uri_parse: function(uri) {
      var delta, t1, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, queryStart0, pathStart0, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((C.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, 0, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      t1 = indices[2];
      if (typeof t1 !== "number")
        return t1.$add();
      hostStart = t1 + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      t1 = indices[7];
      if (typeof t1 !== "number")
        return t1.$lt();
      isSimple = t1 < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && C.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && C.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (C.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && C.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && C.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = C.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_decodeComponent: function(encodedComponent) {
      H.stringTypeCheck(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri_splitQueryString: function(query) {
      var t1 = P.String;
      return C.JSArray_methods.fold$1$2(H.setRuntimeTypeInfo(query.split("&"), [t1]), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), new P.Uri_splitQueryString_closure(C.C_Utf8Codec), [P.Map, P.String, P.String]);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0, _null = null,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = result.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t1)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= t1)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var error, parseHex, parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, t2, wildCardLength, index, value, j, t3;
      if (end == null)
        end = host.length;
      error = new P.Uri_parseIPv6Address_error(host);
      parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, t2 = bytes.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          t3 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= t2)
            return H.ioore(bytes, index);
          bytes[index] = t3;
          t3 = index + 1;
          if (t3 >= t2)
            return H.ioore(bytes, t3);
          bytes[t3] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      if (scheme == null)
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(C.JSString_methods.substring$2(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      C.JSArray_methods.forEach$1(H.assertSubtype(segments, "$isList", [P.String], "$asList"), new P._Uri__checkNonWindowsPathReservedCharacters_closure(false));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2;
      H.assertSubtype(segments, "$isList", [P.String], "$asList");
      for (t1 = H.SubListIterable$(segments, firstSegment, null, H.getTypeArgumentByIndex(segments, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        if (J.contains$1$asx(t2, P.RegExp_RegExp('["*/:<>?\\\\|]', false))) {
          t1 = P.UnsupportedError$("Illegal character in path: " + t2);
          throw H.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = P.UnsupportedError$("Illegal drive letter " + P.String_String$fromCharCode(charCode));
      throw H.wrapException(t1);
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, i;
      if (host == null)
        return;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        P.Uri_parseIPv6Address(host, start + 1, t1);
        return C.JSString_methods.substring$2(host, start, end).toLowerCase();
      }
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      for (; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          P.Uri_parseIPv6Address(host, start, end);
          return "[" + host + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk, t1);
              t1 = (C.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              P._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = 65536 | (char & 1023) << 10 | tail & 1023;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
              buffer._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme)._codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority,
        result = P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      if (query != null)
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      return;
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, H.assertSubtype(charTable, "$isList", [P.int], "$asList"), escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, t2, replacement, sourceLength, tail;
      H.assertSubtype(charTable, "$isList", [P.int], "$asList");
      t1 = !escapeDelimiters;
      index = start;
      sectionStart = index;
      buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = C.JSString_methods.codeUnitAt$1(component, index);
          if (char < 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(charTable, t2);
            t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else {
              if (t1)
                if (char <= 93) {
                  t2 = char >>> 4;
                  if (t2 >= 8)
                    return H.ioore(C.List_2Vk, t2);
                  t2 = (C.List_2Vk[t2] & 1 << (char & 15)) !== 0;
                } else
                  t2 = false;
              else
                t2 = false;
              if (t2) {
                P._Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if ((char & 64512) === 55296) {
                  t2 = index + 1;
                  if (t2 < end) {
                    tail = C.JSString_methods.codeUnitAt$1(component, t2);
                    if ((tail & 64512) === 56320) {
                      char = 65536 | (char & 1023) << 10 | tail & 1023;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                replacement = P._Uri__escapeChar(char);
              }
            }
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(component, sectionStart, index);
            buffer._contents += H.S(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return H.ioore(segments, 0);
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (host.length !== 0)
          t2 = t2 + "\\" + H.S(host) + "\\";
      }
      t2 = P.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = J.getInterceptor$s(text),
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (C.C_Utf8Codec !== encoding)
          t2 = false;
        else
          t2 = true;
        if (t2)
          return t1.substring$2(text, start, end);
        else
          bytes = new H.CodeUnits(t1.substring$2(text, start, end));
      } else {
        bytes = H.setRuntimeTypeInfo([], [P.int]);
        for (i = start; i < end; ++i) {
          codeUnit = t1._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            C.JSArray_methods.add$1(bytes, 32);
          else
            C.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse: function(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, i, table, char, transition;
      H.assertSubtype(indices, "$isList", [P.int], "$asList");
      tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = C.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        if (char > 95)
          char = 31;
        if (char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Pattern: function Pattern() {
    },
    Match: function Match() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    Uri_splitQueryString_closure: function Uri_splitQueryString_closure(t0) {
      this.encoding = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._core$_text = _._pathSegments = null;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1) {
      this.uri = t0;
      this.portStart = t1;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0) {
      this.argumentError = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._core$_text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_closure: function _createTables_closure() {
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._core$_text = _._pathSegments = null;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var t1 = new P._Future($.Zone__current, [null]),
        completer = new P._AsyncCompleter(t1, [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    convertNativePromiseToDartFuture_closure: function convertNativePromiseToDartFuture_closure(t0) {
      this.completer = t0;
    },
    convertNativePromiseToDartFuture_closure0: function convertNativePromiseToDartFuture_closure0(t0) {
      this.completer = t0;
    },
    Uint8List: function Uint8List() {
    }
  },
  W = {
    Blob_Blob: function(blobParts) {
      var t1 = new self.Blob(blobParts);
      return t1;
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event),
        t2 = t1 != null;
      if (t2 && true) {
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._addEventListener$3$x(_target, _eventType, t1, false);
      }
      return new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
    },
    _convertNativeToDart_XHR_Response: function(o) {
      var t1;
      if (!!J.getInterceptor$(o).$isDocument)
        return o;
      t1 = new P._AcceptStructuredCloneDart2Js([], []);
      t1.mustCopy = true;
      return t1.walk$1(o);
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    Blob: function Blob() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FileReader: function FileReader() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    Node: function Node() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  M = {
    _isToStringVisiting0: function(o) {
      return C.JSArray_methods.any$1($._toStringVisiting0, new M._isToStringVisiting_closure(o));
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_toString_closure: function CanonicalizedMap_toString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.result = t2;
    },
    _isToStringVisiting_closure: function _isToStringVisiting_closure(t0) {
      this.o = t0;
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingIterable: function DelegatingIterable() {
    },
    DelegatingList: function DelegatingList() {
    },
    _parseUri: function(uri) {
      if (!!J.getInterceptor$(uri).$isUri)
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var numArgs, i, numArgs0, message, t2, t3, t4,
        t1 = P.String;
      H.assertSubtype(args, "$isList", [t1], "$asList");
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new P.StringBuffer("");
        t2 = method + "(";
        message._contents = t2;
        t3 = H.SubListIterable$(args, 0, numArgs, H.getTypeArgumentByIndex(args, 0));
        t4 = H.getTypeArgumentByIndex(t3, 0);
        t1 = t2 + new H.MappedListIterable(t3, H.functionTypeCheck(new M._validateArgList_closure(), {func: 1, ret: t1, args: [t4]}), [t4, t1]).join$1(0, ", ");
        message._contents = t1;
        message._contents = t1 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
      }
    },
    Context0: function Context0(t0) {
      this.style = t0;
    },
    Context_join_closure: function Context_join_closure() {
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    XmlDescendantsIterable: function XmlDescendantsIterable(t0) {
      this.start = t0;
    },
    XmlDescendantsIterator: function XmlDescendantsIterator(t0) {
      this.todo = t0;
      this.current = null;
    },
    Container: function Container(t0) {
      this._container$_name = t0;
    },
    MediaStreamInfo: function MediaStreamInfo() {
    }
  },
  B = {Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.last = t1;
      this.$ti = t2;
    }, InternalStyle: function InternalStyle() {
    }, Failure: function Failure(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.buffer = t1;
      _.position = t2;
      _.$ti = t3;
    }, PredicateParser: function PredicateParser(t0, t1, t2) {
      this.length = t0;
      this.predicate = t1;
      this.message = t2;
    }, XmlGrammarDefinition: function XmlGrammarDefinition() {
    }, XmlGrammarDefinition_attribute_closure: function XmlGrammarDefinition_attribute_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_attributeValueDouble_closure: function XmlGrammarDefinition_attributeValueDouble_closure() {
    }, XmlGrammarDefinition_attributeValueSingle_closure: function XmlGrammarDefinition_attributeValueSingle_closure() {
    }, XmlGrammarDefinition_comment_closure: function XmlGrammarDefinition_comment_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_cdata_closure: function XmlGrammarDefinition_cdata_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_doctype_closure: function XmlGrammarDefinition_doctype_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_document_closure: function XmlGrammarDefinition_document_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_element_closure: function XmlGrammarDefinition_element_closure(t0) {
      this.$this = t0;
    }, XmlGrammarDefinition_processing_closure: function XmlGrammarDefinition_processing_closure(t0) {
      this.$this = t0;
    }, XmlComment: function XmlComment(t0) {
      this._text = null;
      this.XmlOwned__parent = t0;
    },
    encodingForCharset: function(charset) {
      var encoding;
      if (charset == null)
        return C.C_Latin1Codec;
      encoding = P.Encoding_getByName(charset);
      return encoding == null ? C.C_Latin1Codec : encoding;
    },
    toUint8List: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$(input);
      if (!!t1.$isUint8List)
        return input;
      if (!!t1.$isTypedData) {
        t1 = input.buffer;
        t1.toString;
        return H.NativeUint8List_NativeUint8List$view(t1, 0, null);
      }
      return new Uint8Array(H._ensureNativeList(input));
    },
    toByteStream: function(stream) {
      H.assertSubtype(stream, "$isStream", [[P.List, P.int]], "$asStream");
      return stream;
    },
    wrapFormatException: function($name, value, body, $T) {
      var error, error0, t1, exception, t2;
      H.functionTypeCheck(body, {func: 1, ret: $T});
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor$(t1);
        if (!!t2.$isSourceSpanFormatException) {
          error = t1;
          throw H.wrapException(G.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, J.get$source$z(error)));
        } else if (!!t2.$isFormatException) {
          error0 = t1;
          throw H.wrapException(P.FormatException$("Invalid " + $name + ' "' + value + '": ' + H.S(J.get$message$z(error0)), J.get$source$z(error0), J.get$offset$z(error0)));
        } else
          throw exception;
      }
    },
    isAlphabetic: function(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(C.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return C.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    countCodeUnits: function(string, codeUnit) {
      var t1, count;
      for (t1 = new H.CodeUnits(string), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === codeUnit)
          ++count;
      return count;
    },
    findLineStart: function(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = C.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = C.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : C.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return;
    }
  },
  E = {BaseClient: function BaseClient() {
    }, ClientException: function ClientException(t0) {
      this.message = t0;
    }, PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    optimizedRanges: function(ranges) {
      var mergedRanges, _i, thisRange, lastRange, t2, t3, t4,
        t1 = V.RangeCharPredicate,
        sortedRanges = P.List_List$from(H.assertSubtype(ranges, "$isIterable", [t1], "$asIterable"), false, t1);
      C.JSArray_methods.sort$1(sortedRanges, new E.optimizedRanges_closure());
      mergedRanges = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = sortedRanges.length, _i = 0; _i < sortedRanges.length; sortedRanges.length === t1 || (0, H.throwConcurrentModificationError)(sortedRanges), ++_i) {
        thisRange = sortedRanges[_i];
        if (mergedRanges.length === 0)
          C.JSArray_methods.add$1(mergedRanges, thisRange);
        else {
          lastRange = C.JSArray_methods.get$last(mergedRanges);
          if (lastRange.stop + 1 >= thisRange.start) {
            t2 = lastRange.start;
            t3 = thisRange.stop;
            if (t2 > t3)
              H.throwExpression(P.ArgumentError$("Invalid range: " + t2 + "-" + t3));
            C.JSArray_methods.$indexSet(mergedRanges, mergedRanges.length - 1, new V.RangeCharPredicate(t2, t3));
          } else
            C.JSArray_methods.add$1(mergedRanges, thisRange);
        }
      }
      t1 = mergedRanges.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(mergedRanges, 0);
        t1 = mergedRanges[0];
        t2 = t1.start;
        return t2 === t1.stop ? new D.SingleCharPredicate(t2) : t1;
      } else {
        t2 = P.int;
        t3 = H.getTypeArgumentByIndex(mergedRanges, 0);
        t4 = {func: 1, ret: t2, args: [t3]};
        t2 = [t3, t2];
        return new Z.RangesCharPredicate(t1, new H.MappedListIterable(mergedRanges, H.functionTypeCheck(new E.optimizedRanges_closure0(), t4), t2).toList$1$growable(0, false), new H.MappedListIterable(mergedRanges, H.functionTypeCheck(new E.optimizedRanges_closure1(), t4), t2).toList$1$growable(0, false));
      }
    },
    optimizedRanges_closure: function optimizedRanges_closure() {
    },
    optimizedRanges_closure0: function optimizedRanges_closure0() {
    },
    optimizedRanges_closure1: function optimizedRanges_closure1() {
    },
    CharacterPredicate: function CharacterPredicate() {
    },
    Success: function Success(t0, t1, t2, t3) {
      var _ = this;
      _.value = t0;
      _.buffer = t1;
      _.position = t2;
      _.$ti = t3;
    },
    LazyRepeatingParser: function LazyRepeatingParser(t0, t1, t2, t3, t4) {
      var _ = this;
      _.limit = t0;
      _.min = t1;
      _.max = t2;
      _.delegate = t3;
      _.$ti = t4;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this._span_exception$_source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    XmlNodeType: function XmlNodeType(t0) {
      this._node_type$_name = t0;
    }
  },
  G = {BaseRequest: function BaseRequest() {
    }, BaseRequest_closure: function BaseRequest_closure() {
    }, BaseRequest_closure0: function BaseRequest_closure0() {
    }, RepeatingParser: function RepeatingParser() {
    },
    SourceSpanFormatException$: function(message, span, _source) {
      return new G.SourceSpanFormatException(_source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this._span_exception$_source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    XmlCDATA: function XmlCDATA(t0) {
      this._text = null;
      this.XmlOwned__parent = t0;
    },
    XmlAttributeType: function XmlAttributeType(t0) {
      this._attribute_type$_name = t0;
    },
    ParseException$: function(message) {
      return new G.ParseException(message);
    },
    ParseException: function ParseException(t0) {
      this.message = t0;
    },
    AudioEncoding: function AudioEncoding(t0) {
      this._audio_encoding$_name = t0;
    }
  },
  T = {BaseResponse: function BaseResponse() {
    },
    _textReplace: function(match) {
      switch (match.group$1(0)) {
        case "<":
          return "&lt;";
        case "&":
          return "&amp;";
        case "]]>":
          return "]]&gt;";
        default:
          throw H.wrapException(P.AssertionError$(null));
      }
    },
    closure7: function closure7() {
    },
    closure6: function closure6() {
    },
    closure5: function closure5() {
    },
    XmlCharacterDataParser: function XmlCharacterDataParser(t0, t1, t2) {
      this._stopper = t0;
      this._stopperCode = t1;
      this._minLength = t2;
    },
    closure: function closure() {
    },
    closure0: function closure0() {
    }
  },
  O = {BrowserClient: function BrowserClient(t0) {
      this._xhrs = t0;
    }, BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.request = t2;
    }, BrowserClient_send__closure: function BrowserClient_send__closure(t0, t1, t2, t3) {
      var _ = this;
      _.reader = t0;
      _.completer = t1;
      _.xhr = t2;
      _.request = t3;
    }, BrowserClient_send__closure0: function BrowserClient_send__closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    }, BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    }, Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _.headers = t4;
      _._finalized = false;
    },
    Style__getPlatformStyle: function() {
      var t1, scheme, userInfo, host, query, fragment, port, isFile, hasAuthority, path, t2, _null = null;
      if (P.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      t1 = P.Uri_base();
      if (!C.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      scheme = P._Uri__makeScheme(_null, 0, 0);
      userInfo = P._Uri__makeUserInfo(_null, 0, 0);
      host = P._Uri__makeHost(_null, 0, 0, false);
      query = P._Uri__makeQuery(_null, 0, 0, _null);
      fragment = P._Uri__makeFragment(_null, 0, 0);
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath("a/b", 0, 3, _null, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !C.JSString_methods.startsWith$1(path, "/"))
        path = P._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      if (new P._Uri(scheme, userInfo, t1 && C.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    FlattenParser$: function(delegate, message) {
      return new O.FlattenParser(message, delegate);
    },
    FlattenParser: function FlattenParser(t0, t1) {
      this.message = t0;
      this.delegate = t1;
    },
    WordCharPredicate: function WordCharPredicate() {
    },
    PlayerContext: function PlayerContext(t0, t1) {
      this.sourceUrl = t0;
      this.sts = t1;
    }
  },
  Z = {ByteStream: function ByteStream(t0) {
      this._stream = t0;
    }, ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    CaseInsensitiveMap$from: function(other, $V) {
      var t1 = P.String;
      t1 = new Z.CaseInsensitiveMap(new Z.CaseInsensitiveMap$from_closure(), new Z.CaseInsensitiveMap$from_closure0(), new H.JsLinkedHashMap([t1, [B.Pair, t1, $V]]), [$V]);
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2, t3) {
      var _ = this;
      _._canonicalize = t0;
      _._isValidKeyFn = t1;
      _._canonicalized_map$_base = t2;
      _.$ti = t3;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    CaseInsensitiveMap$from_closure0: function CaseInsensitiveMap$from_closure0() {
    },
    RangesCharPredicate: function RangesCharPredicate(t0, t1, t2) {
      this.length = t0;
      this.starts = t1;
      this.stops = t2;
    },
    XmlTransformer: function XmlTransformer() {
    },
    _XmlTransformer_Object_XmlVisitor: function _XmlTransformer_Object_XmlVisitor() {
    }
  },
  U = {
    Response_fromStream: function(response) {
      H.interceptedTypeCheck(response, "$isStreamedResponse");
      return response.stream.toBytes$0().then$1$1(new U.Response_fromStream_closure(response), U.Response);
    },
    _contentTypeForHeaders: function(headers) {
      var t1 = P.String,
        contentType = H.assertSubtype(headers, "$isMap", [t1, t1], "$asMap").$index(0, "content-type");
      if (contentType != null)
        return R.MediaType_MediaType$parse(contentType);
      return R.MediaType$("application", "octet-stream", null);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bodyBytes = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    Response_fromStream_closure: function Response_fromStream_closure(t0) {
      this.response = t0;
    },
    Highlighter__normalizeNewlines: function(span) {
      var t1, endOffset, i, t2, t3, t4,
        text = span.get$text(span);
      if (!C.JSString_methods.contains$1(text, "\r\n"))
        return span;
      t1 = span.get$end();
      endOffset = t1.get$offset(t1);
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(text, i) === 13 && C.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = V.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = H.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return X.SourceSpanWithContext$(t1, t2, t3, H.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    Highlighter__normalizeTrailingNewline: function(span) {
      var context, text, start, end, t1, t2, t3;
      if (!C.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n\n"))
        return span;
      context = C.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text(span);
      start = span.get$start();
      end = span.get$end();
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n")) {
        t1 = B.findLineStart(span.get$context(), span.get$text(span), span.get$start().get$column());
        t2 = span.get$start().get$column();
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + t2 + span.get$length(span) === span.get$context().length;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
        t1 = span.get$end();
        t1 = t1.get$offset(t1);
        t2 = span.get$sourceUrl();
        t3 = span.get$end().get$line();
        if (typeof t3 !== "number")
          return t3.$sub();
        end = V.SourceLocation$(t1 - 1, U.Highlighter__lastLineLength(text), t3 - 1, t2);
        t1 = span.get$start();
        t1 = t1.get$offset(t1);
        t2 = span.get$end();
        start = t1 === t2.get$offset(t2) ? end : span.get$start();
      }
      return X.SourceSpanWithContext$(start, end, text, context);
    },
    Highlighter__normalizeEndOfLine: function(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() == span.get$start().get$line())
        return span;
      text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
      t1 = span.get$start();
      t2 = span.get$end();
      t2 = t2.get$offset(t2);
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      if (typeof t4 !== "number")
        return t4.$sub();
      return X.SourceSpanWithContext$(t1, V.SourceLocation$(t2 - 1, U.Highlighter__lastLineLength(text), t4 - 1, t3), text, span.get$context());
    },
    Highlighter__lastLineLength: function(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      if (C.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - C.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - C.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4) {
      var _ = this;
      _._highlighter$_span = t0;
      _._color = t1;
      _._multiline = t2;
      _._paddingBeforeSidebar = t3;
      _._buffer = t4;
    },
    Highlighter__writeFirstLine_closure: function Highlighter__writeFirstLine_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeFirstLine_closure0: function Highlighter__writeFirstLine_closure0(t0, t1) {
      this.$this = t0;
      this.textInside = t1;
    },
    Highlighter__writeFirstLine_closure1: function Highlighter__writeFirstLine_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeFirstLine_closure2: function Highlighter__writeFirstLine_closure2(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeIntermediateLines_closure: function Highlighter__writeIntermediateLines_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeLastLine_closure: function Highlighter__writeLastLine_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeLastLine_closure0: function Highlighter__writeLastLine_closure0(t0, t1) {
      this.$this = t0;
      this.textInside = t1;
    },
    Highlighter__writeLastLine_closure1: function Highlighter__writeLastLine_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.end = t2;
    },
    XmlElement$: function($name, attributesIterable, children, isSelfClosing) {
      var t2,
        _s52_ = "Node already has a parent, copy or remove it first: ",
        t1 = A.XmlAttribute;
      t1 = new X.XmlNodeList(C.Set_EeIxt, null, H.setRuntimeTypeInfo([], [t1]), [t1]);
      t2 = V.XmlNode;
      t2 = new U.XmlElement($name, t1, isSelfClosing, new X.XmlNodeList(C.Set_q81d9, null, H.setRuntimeTypeInfo([], [t2]), [t2]), null);
      t2.XmlParent$2(C.Set_q81d9, children);
      if ($name.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$(_s52_ + H.S($name)));
      $name.XmlOwned__parent = t2;
      if (t1.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$(_s52_ + t1.toString$0(0)));
      t1.XmlOwned__parent = t2;
      t1.addAll$1(0, attributesIterable);
      return t2;
    },
    XmlElement: function XmlElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.attributes = t1;
      _.isSelfClosing = t2;
      _.children = t3;
      _.XmlOwned__parent = t4;
    },
    XmlSimpleName: function XmlSimpleName(t0, t1) {
      this.local = t0;
      this.XmlOwned__parent = t1;
    },
    SliceCipherOperation: function SliceCipherOperation(t0) {
      this._slice_cipher_operation$_index = t0;
    },
    DashManifestParser: function DashManifestParser(t0) {
      this._dash_manifest_parser$_root = t0;
    },
    DashManifestParser_getStreamInfo_closure: function DashManifestParser_getStreamInfo_closure() {
    },
    DashManifestParser_getStreamInfo_closure0: function DashManifestParser_getStreamInfo_closure0(t0) {
      this.builtList = t0;
    },
    Client_Client: function() {
      return new O.BrowserClient(P.LinkedHashSet_LinkedHashSet(W.HttpRequest));
    }
  },
  X = {StreamedResponse: function StreamedResponse(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = [P.String];
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return new X.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0) {
      this.$this = t0;
    },
    PathException$: function(message) {
      return new X.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    EndOfInputParser: function EndOfInputParser(t0) {
      this.message = t0;
    },
    SourceSpanWithContext$: function(start, end, text, _context) {
      var t1 = new X.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!C.JSString_methods.contains$1(_context, text))
        H.throwExpression(P.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".'));
      if (B.findLineStart(_context, text, start.get$column()) == null)
        H.throwExpression(P.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".'));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    XmlProductionDefinition: function XmlProductionDefinition() {
    },
    XmlNodeList: function XmlNodeList(t0, t1, t2, t3) {
      var _ = this;
      _.validNodeTypes = t0;
      _.XmlOwned__parent = t1;
      _._base = t2;
      _.$ti = t3;
    },
    XmlNodeList__expandFragment_closure: function XmlNodeList__expandFragment_closure(t0) {
      this.$this = t0;
    },
    _XmlNodeList_DelegatingList_XmlOwned: function _XmlNodeList_DelegatingList_XmlOwned() {
    },
    XmlVisitable: function XmlVisitable() {
    }
  },
  R = {
    MediaType_MediaType$parse: function(mediaType) {
      return B.wrapFormatException("media type", mediaType, new R.MediaType_MediaType$parse_closure(mediaType), R.MediaType);
    },
    MediaType$: function(type, subtype, parameters) {
      var t1 = type.toLowerCase(),
        t2 = subtype.toLowerCase(),
        t3 = P.String,
        t4 = parameters == null ? P.LinkedHashMap_LinkedHashMap$_empty(t3, t3) : Z.CaseInsensitiveMap$from(parameters, t3);
      return new R.MediaType(t1, t2, new P.UnmodifiableMapView(t4, [t3, t3]));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    DelegateParser: function DelegateParser() {
    },
    XmlParent: function XmlParent() {
    },
    VideoUnavailableException$: function(videoId, code, reason) {
      return new R.VideoUnavailableException(videoId, code, reason);
    },
    VideoUnavailableException: function VideoUnavailableException(t0, t1, t2) {
      this.videoId = t0;
      this.code = t1;
      this.reason = t2;
    },
    SwapCipherOperation: function SwapCipherOperation(t0) {
      this._swap_cipher_operation$_index = t0;
    },
    VideoInfoParser: function VideoInfoParser(t0) {
      this._root = t0;
    },
    VideoInfoParser_getMuxedStreamInfo_closure: function VideoInfoParser_getMuxedStreamInfo_closure(t0) {
      this.builtList = t0;
    },
    VideoInfoParser_getAdaptiveStreamInfo_closure: function VideoInfoParser_getAdaptiveStreamInfo_closure(t0) {
      this.builtList = t0;
    },
    AudioStreamInfo: function AudioStreamInfo(t0, t1) {
      this.iTag = t0;
      this.url = t1;
      this.container = null;
    },
    MuxedStreamInfo: function MuxedStreamInfo(t0, t1) {
      var _ = this;
      _.videoQuality = null;
      _.iTag = t0;
      _.url = t1;
      _.container = null;
    },
    VideoQuality: function VideoQuality(t0) {
      this._video_quality$_name = t0;
    }
  },
  N = {
    expectQuotedString: function(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return C.JSString_methods.splitMapJoin$2$onMatch(J.substring$2$s(string, 1, string.length - 1), $.$get$_quotedPair(), H.functionTypeCheck(new N.expectQuotedString_closure(), {func: 1, ret: P.String, args: [P.Match]}));
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    GrammarDefinition: function GrammarDefinition() {
    },
    GrammarDefinition_ref_closure: function GrammarDefinition_ref_closure() {
    },
    GrammarDefinition__resolve__dereference: function GrammarDefinition__resolve__dereference(t0) {
      this.mapping = t0;
    },
    any: function() {
      return new N.AnyParser("input expected");
    },
    AnyParser: function AnyParser(t0) {
      this.message = t0;
    },
    XmlParserException$: function(message, line, column) {
      return new N.XmlParserException(line, column, message);
    },
    XmlNodeTypeException_checkValidType: function(node, types) {
      H.interceptedTypeCheck(node, "$isXmlNode");
      H.assertSubtype(types, "$isIterable", [E.XmlNodeType], "$asIterable");
      if (!types._map.containsKey$1(node.get$nodeType(node)))
        throw H.wrapException(N.XmlNodeTypeException$("Expected node of type: " + types.toString$0(0)));
    },
    XmlNodeTypeException$: function(message) {
      return new N.XmlNodeTypeException(message);
    },
    XmlParentException$: function(message) {
      return new N.XmlParentException(message);
    },
    XmlException: function XmlException() {
    },
    XmlParserException: function XmlParserException(t0, t1, t2) {
      this.line = t0;
      this.column = t1;
      this.message = t2;
    },
    XmlNodeTypeException: function XmlNodeTypeException(t0) {
      this.message = t0;
    },
    XmlParentException: function XmlParentException(t0) {
      this.message = t0;
    },
    ReverseCipherOperation: function ReverseCipherOperation() {
    },
    MuxedStreamInfoParser: function MuxedStreamInfoParser(t0) {
      this._muxed_stream_info_parser$_root = t0;
    }
  },
  F = {UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    }, DigitCharPredicate: function DigitCharPredicate() {
    }},
  L = {WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    }, SequenceParser: function SequenceParser(t0) {
      this.children = t0;
    },
    Reference$: function($function, $arguments) {
      return new L.Reference($function, $arguments);
    },
    Reference: function Reference(t0, t1) {
      this.$function = t0;
      this.$arguments = t1;
    },
    XmlName_XmlName$fromString: function(qualified) {
      var index = J.getInterceptor$s(qualified).indexOf$1(qualified, ":");
      if (index > 0)
        return new A.XmlPrefixName(C.JSString_methods.substring$2(qualified, 0, index), C.JSString_methods.substring$1(qualified, index + 1), qualified, null);
      else
        return new U.XmlSimpleName(qualified, null);
    },
    XmlName: function XmlName() {
    },
    _XmlName_Object_XmlVisitable: function _XmlName_Object_XmlVisitable() {
    },
    _XmlName_Object_XmlVisitable_XmlWritable: function _XmlName_Object_XmlVisitable_XmlWritable() {
    },
    _XmlName_Object_XmlVisitable_XmlWritable_XmlOwned: function _XmlName_Object_XmlVisitable_XmlWritable_XmlOwned() {
    },
    XmlOwned: function XmlOwned() {
    },
    StreamInfoParser: function StreamInfoParser(t0) {
      this._stream2dinfo2dparser$_root = t0;
    },
    StreamInfoParser_parseItag_closure: function StreamInfoParser_parseItag_closure() {
    },
    StreamInfoParser_parseUrl_closure: function StreamInfoParser_parseUrl_closure() {
    },
    StreamInfoParser_parseBitrate_closure: function StreamInfoParser_parseBitrate_closure() {
    },
    StreamInfoParser_parseIsAudioOnly_closure: function StreamInfoParser_parseIsAudioOnly_closure() {
    },
    StreamInfoParser_parseWidth_closure: function StreamInfoParser_parseWidth_closure() {
    },
    StreamInfoParser_parseHeight_closure: function StreamInfoParser_parseHeight_closure() {
    },
    StreamInfoParser_parseFramerate_closure: function StreamInfoParser_parseFramerate_closure() {
    }
  },
  D = {ActionParser: function ActionParser(t0, t1, t2, t3) {
      var _ = this;
      _.callback = t0;
      _.hasSideEffects = t1;
      _.delegate = t2;
      _.$ti = t3;
    },
    char: function(char) {
      var t1 = V.toCharCode(char),
        t2 = '"' + V.toReadableString(char) + '" expected';
      return new D.CharacterParser(new D.SingleCharPredicate(t1), t2);
    },
    SingleCharPredicate: function SingleCharPredicate(t0) {
      this.value = t0;
    },
    CharacterParser$: function(predicate, message) {
      return new D.CharacterParser(predicate, message);
    },
    CharacterParser: function CharacterParser(t0, t1) {
      this.predicate = t0;
      this.message = t1;
    },
    pattern: function(element) {
      var t1 = $.$get$pattern_().parseOn$1(new A.Context(element, 0)).get$value(),
        t2 = "[" + V.toReadableString(element) + "] expected";
      return new D.CharacterParser(t1, t2);
    },
    closure3: function closure3() {
    },
    closure4: function closure4() {
    },
    closure2: function closure2() {
    },
    closure1: function closure1() {
    },
    ParserException: function ParserException(t0) {
      this.failure = t0;
    },
    LimitedRepeatingParser: function LimitedRepeatingParser() {
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    ItagDescriptor$: function(container, audioEncoding, videoEncoding, videoQuality) {
      return new D.ItagDescriptor(container, audioEncoding, videoEncoding, videoQuality);
    },
    ItagDescriptor: function ItagDescriptor(t0, t1, t2, t3) {
      var _ = this;
      _.container = t0;
      _.audioEncoding = t1;
      _.videoEncoding = t2;
      _.videoQuality = t3;
    },
    AdaptiveStreamInfoParser: function AdaptiveStreamInfoParser(t0) {
      this._adaptive_stream_info_parser$_root = t0;
    },
    current: function() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = P.Uri_base();
      } catch (exception) {
        if (!!J.getInterceptor$(H.unwrapException(exception)).$isException) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        return $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        return $._current = lastIndex === 0 ? path : C.JSString_methods.substring$2(path, 0, lastIndex);
      }
    }
  },
  Y = {CastParser: function CastParser(t0, t1) {
      this.delegate = t0;
      this.$ti = t1;
    }, CastListParser: function CastListParser(t0, t1) {
      this.delegate = t0;
      this.$ti = t1;
    }, ChoiceParser: function ChoiceParser(t0) {
      this.children = t0;
    },
    FileLocation$_: function(file, offset) {
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        H.throwExpression(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + file.get$length(file) + "."));
      return new Y.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    BaseCipherOperation: function BaseCipherOperation() {
    },
    PlayerSourceParser: function PlayerSourceParser(t0) {
      this._raw = t0;
    },
    VideoEncoding: function VideoEncoding(t0) {
      this._video_encoding$_name = t0;
    },
    VideoStreamInfo: function VideoStreamInfo(t0, t1) {
      this.iTag = t0;
      this.url = t1;
      this.container = null;
    },
    YouTubeExtractor: function YouTubeExtractor(t0, t1) {
      this._playerSourceCache = t0;
      this._client = t1;
    }
  },
  S = {TokenParser: function TokenParser(t0, t1) {
      this.delegate = t0;
      this.$ti = t1;
    }, WhitespaceCharPredicate: function WhitespaceCharPredicate() {
    }, ListParser: function ListParser() {
    }, PossessiveRepeatingParser: function PossessiveRepeatingParser(t0, t1, t2, t3) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.delegate = t2;
      _.$ti = t3;
    }, XmlDoctype: function XmlDoctype(t0) {
      this._text = null;
      this.XmlOwned__parent = t0;
    }, XmlProcessing: function XmlProcessing(t0, t1) {
      this.target = t0;
      this._text = null;
      this.XmlOwned__parent = t1;
    },
    main: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$temp1, $async$temp2, $async$temp3;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$temp2 = H;
              $async$temp3 = C.JSArray_methods;
              $async$goto = 2;
              return P._asyncAwait($.$get$extractor().getMediaStreamsAsync$1("IsTjwQ-TFXY"), $async$main);
            case 2:
              // returning from await.
              $async$temp1.printString("video url " + $async$temp2.S($async$temp3.get$first($async$result.video).url));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    }
  },
  Q = {NotCharacterPredicate: function NotCharacterPredicate(t0) {
      this.predicate = t0;
    }, Parser: function Parser() {
    }, Parser_pick_closure: function Parser_pick_closure(t0, t1) {
      this.index = t0;
      this.R = t1;
    }, Parser_separatedBy_closure: function Parser_separatedBy_closure(t0, t1, t2) {
      this.includeSeparators = t0;
      this.optionalSeparatorAtEnd = t1;
      this.R = t2;
    },
    string: function(element) {
      var t1 = element + " expected";
      return new B.PredicateParser(element.length, new Q.string_closure(element), t1);
    },
    string_closure: function string_closure(t0) {
      this.element = t0;
    },
    VideoRequiresPurchaseException: function VideoRequiresPurchaseException(t0) {
      this.videoId = t0;
    }
  },
  V = {
    RangeCharPredicate$: function(start, $stop) {
      if (start > $stop)
        H.throwExpression(P.ArgumentError$("Invalid range: " + start + "-" + $stop));
      return new V.RangeCharPredicate(start, $stop);
    },
    RangeCharPredicate: function RangeCharPredicate(t0, t1) {
      this.start = t0;
      this.stop = t1;
    },
    Result: function Result() {
    },
    SourceLocation$: function(offset, column, line, sourceUrl) {
      var t1 = line == null,
        t2 = t1 ? 0 : line;
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (!t1 && line < 0)
        H.throwExpression(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column < 0)
        H.throwExpression(P.RangeError$("Column may not be negative, was " + column + "."));
      return new V.SourceLocation(sourceUrl, offset, t2, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceSpan: function SourceSpan() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    XmlData: function XmlData() {
    },
    XmlNode: function XmlNode() {
    },
    XmlNode_text_closure: function XmlNode_text_closure() {
    },
    XmlNode_text_closure0: function XmlNode_text_closure0() {
    },
    _XmlNode_Object_XmlVisitable: function _XmlNode_Object_XmlVisitable() {
    },
    _XmlNode_Object_XmlVisitable_XmlWritable: function _XmlNode_Object_XmlVisitable_XmlWritable() {
    },
    _XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned: function _XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned() {
    },
    XmlText: function XmlText(t0) {
      this._text = null;
      this.XmlOwned__parent = t0;
    },
    XmlParserDefinition: function XmlParserDefinition() {
    },
    PlayerSource: function PlayerSource(t0) {
      this.cipherOperations = t0;
    },
    PlayerSource_decipher_closure: function PlayerSource_decipher_closure(t0) {
      this._box_0 = t0;
    },
    toCharCode: function(element) {
      var value;
      if (typeof element === "number")
        return C.JSNumber_methods.round$0(element);
      value = J.toString$0$(element);
      if (value.length !== 1)
        throw H.wrapException(P.ArgumentError$('"' + H.S(value) + '" is not a character'));
      return J._codeUnitAt$1$s(value, 0);
    },
    toReadableString: function(element) {
      var i, t2, code,
        t1 = element.length;
      if (t1 > 1) {
        for (i = 0, t2 = ""; i < t1; ++i)
          t2 += V.toReadableString(element[i]);
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      }
      code = V.toCharCode(element);
      switch (code) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 11:
          return "\\v";
        case 12:
          return "\\f";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 39:
          return "\\'";
        case 92:
          return "\\\\";
      }
      if (code < 32)
        return "\\x" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(code, 16), 2, "0");
      return H.Primitives_stringFromCharCode(code);
    }
  },
  K = {OptionalParser: function OptionalParser(t0, t1, t2) {
      this.otherwise = t0;
      this.delegate = t1;
      this.$ti = t2;
    },
    Token_lineAndColumnOf: function(buffer, position) {
      var t2, list, t3, line, offset, _i, offset0,
        t1 = $.$get$Token__newlineParser();
      t1.toString;
      t2 = H.getRuntimeTypeArgument(t1, "Parser", 0);
      list = H.setRuntimeTypeInfo([], [[K.Token, t2]]);
      t3 = [Q.Parser,,];
      t3 = P.List_List$from(H.setRuntimeTypeInfo([new S.TokenParser(t1, [t2]).map$1$2$hasSideEffects(0, C.JSArray_methods.get$add(list), true, -1), new N.AnyParser("input expected")], [t3]), false, t3);
      new Y.ChoiceParser(t3).repeat$2(0, 0, -1).fastParseOn$2(buffer, 0);
      t1 = list.length;
      line = 1;
      offset = 0;
      _i = 0;
      for (; _i < t1; ++_i, offset = offset0) {
        offset0 = list[_i].stop;
        if (position < offset0)
          return H.setRuntimeTypeInfo([line, position - offset + 1], [P.int]);
        ++line;
      }
      return H.setRuntimeTypeInfo([line, position - offset + 1], [P.int]);
    },
    Token_positionString: function(buffer, position) {
      var lineAndColumn = K.Token_lineAndColumnOf(buffer, position);
      return "" + lineAndColumn[0] + ":" + lineAndColumn[1];
    },
    Token: function Token(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _.buffer = t1;
      _.start = t2;
      _.stop = t3;
      _.$ti = t4;
    },
    XmlDocument: function XmlDocument(t0, t1) {
      this.children = t0;
      this.XmlOwned__parent = t1;
    },
    XmlVisitor: function XmlVisitor() {
    },
    XmlWriter: function XmlWriter(t0) {
      this.buffer = t0;
    },
    _XmlWriter_Object_XmlVisitor: function _XmlWriter_Object_XmlVisitor() {
    },
    ItagHelper_getContainer: function(itag) {
      var t1 = $.$get$ItagHelper__ItagMap().$index(0, itag),
        result = t1 == null ? null : t1.container;
      if (result == null)
        throw H.wrapException(P.ArgumentError$("Unexpected itag [" + H.S(itag) + "]."));
      return result;
    },
    ItagHelper_getAudioEncoding: function(itag) {
      var t1 = $.$get$ItagHelper__ItagMap().$index(0, itag),
        result = t1 == null ? null : t1.audioEncoding;
      if (result == null)
        throw H.wrapException(P.ArgumentError$("Unexpected itag [" + H.S(itag) + "]."));
      return result;
    },
    ItagHelper_getVideoEncoding: function(itag) {
      var t1 = $.$get$ItagHelper__ItagMap().$index(0, itag),
        result = t1 == null ? null : t1.videoEncoding;
      if (result == null)
        throw H.wrapException(P.ArgumentError$("Unexpected itag [" + H.S(itag) + "]."));
      return result;
    },
    ItagHelper_getVideoQuality: function(itag) {
      var t1 = $.$get$ItagHelper__ItagMap().$index(0, itag),
        result = t1 == null ? null : t1.videoQuality;
      if (result == null)
        throw H.wrapException(P.ArgumentError$("Unexpected itag [" + H.S(itag) + "]."));
      return result;
    }
  },
  A = {Context: function Context(t0, t1) {
      this.buffer = t0;
      this.position = t1;
    },
    XmlAttribute$: function($name, value, attributeType) {
      var t1;
      if ($name.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$("Node already has a parent, copy or remove it first: " + H.S($name)));
      t1 = $name.XmlOwned__parent = new A.XmlAttribute($name, attributeType, null);
      if (value == null)
        H.throwExpression(P.ArgumentError$notNull("value"));
      t1._value = value;
      return t1;
    },
    XmlAttribute: function XmlAttribute(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _._value = null;
      _.attributeType = t1;
      _.XmlOwned__parent = t2;
    },
    XmlPrefixName: function XmlPrefixName(t0, t1, t2, t3) {
      var _ = this;
      _.prefix = t0;
      _.local = t1;
      _.qualified = t2;
      _.XmlOwned__parent = t3;
    },
    XmlWritable: function XmlWritable() {
    },
    MediaStreamInfoSet: function MediaStreamInfoSet(t0) {
      this.video = t0;
    }
  };
  var holders = [C, H, J, P, W, M, B, E, G, T, O, Z, U, X, R, N, F, L, D, Y, S, Q, V, K, A];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, [H.getTypeArgumentByIndex(receiver, 0), $R]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      var t1;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end;
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      this.set$length(receiver, receiver.length + insertionLength);
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var end, i, element;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t2, otherStart, otherList, i,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t2.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    get$reversed: function(receiver) {
      return new H.ReversedListIterable(receiver, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $or: function(receiver, other) {
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    splitMapJoin$2$onMatch: function(receiver, from, onMatch) {
      return H.stringReplaceAllFuncUnchecked(receiver, from, H.functionTypeCheck(onMatch, {func: 1, ret: P.String, args: [P.Match]}), null);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (typeof index !== "number" || Math.floor(index) !== index)
        H.throwExpression(H.argumentErrorValue(index));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(H.argumentErrorValue(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1: function(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1: function(receiver, other) {
      return H.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      return new H.CastIterator(J.get$iterator$ax(this.get$_source()), this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    elementAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.elementAt$1$ax(this.get$_source(), index), H.getTypeArgumentByIndex(this, 1));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function() {
      return H.subtypeOfRuntimeTypeCast(this._source.get$current(), H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.CastList.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastList(this._source, [H.getTypeArgumentByIndex(this, 0), $R]);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this.__internal$_string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this.__internal$_string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, i, _this = this,
        t1 = new Array(_this.get$length(_this));
      t1.fixed$length = Array;
      result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
      for (i = 0; i < _this.get$length(_this); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
      return result;
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 == null || t1 > $length)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || t2 >= $length)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var t1, _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      t1 = _this._endOrLength;
      if (t1 != null && newStart >= t1)
        return new H.EmptyIterable(_this.$ti);
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._endOrLength;
      t2 = _this.__internal$_start;
      newEnd = t2 + count;
      if (t1 == null)
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      else {
        if (t1 < newEnd)
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var $length, t3, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        end0 = _this._endOrLength;
      if (end0 != null && end0 < end)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = new Array($length);
      t3.fixed$length = Array;
      result = H.setRuntimeTypeInfo(t3, _this.$ti);
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.TakeWhileIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    }
  };
  H.TakeWhileIterator.prototype = {
    moveNext$0: function() {
      var t1, _this = this;
      if (_this._isFinished)
        return false;
      t1 = _this._iterator;
      if (!t1.moveNext$0() || !H.boolConversionCheck(_this._f.call$1(t1.get$current()))) {
        _this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current: function() {
      if (this._isFinished)
        return;
      return this._iterator.get$current();
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, this.$ti);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t1 = new Array(0);
      t1.fixed$length = Array;
      t1 = H.setRuntimeTypeInfo(t1, this.$ti);
      return t1;
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {};
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this._keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
      }
    },
    get$keys: function() {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map._keys;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this.__js_helper$_map._keys.length;
    }
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new H.JsLinkedHashMap(_this.$ti);
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.Instantiation.prototype = {
    Instantiation$1: function(_genericClosure) {
      if (false)
        H.instantiatedGenericFunctionType(0, 0);
    },
    toString$0: function(_) {
      var types = "<" + C.JSArray_methods.join$1([new H.TypeImpl(H.getTypeArgumentByIndex(this, 0))], ", ") + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    call$1: function(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti[0]);
    },
    $signature: function() {
      return H.instantiatedGenericFunctionType(H.extractFunctionTypeObjectFromInternal(this._genericClosure), this.$ti);
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this._kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5, _this = this;
      if (_this._kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t3 = P.Symbol0;
      map = new H.JsLinkedHashMap([t3, null]);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = namedArgumentsStartIndex + i;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        map.$indexSet(0, new H.Symbol(t4), t2[t5]);
      }
      return new H.ConstantMapView(map, [t3, null]);
    },
    $isInvocation: 1
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 45
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 11
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.runtimeTypeToString(this._rti) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = C.JSString_methods.get$hashCode(this.get$_typeName()) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this._strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 11
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 34
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 42
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(m);
    },
    allMatches$2: function(_, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return new H._MatchImplementation(match);
    },
    _execAnchored$2: function(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return new H._MatchImplementation(match);
    },
    matchAsPrefix$2: function(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    get$end: function() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1: function(index) {
      var t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this._start);
    },
    $asIterable: function() {
      return [P.RegExpMatch];
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t2, t3, match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      t2 = _this._nextIndex;
      if (t2 <= t1.length) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(t1, t2);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t2 = t1 + 1;
              t3 = _this._string;
              if (t2 < t3.length) {
                t1 = J.getInterceptor$s(t3).codeUnitAt$1(t3, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(t3, t2);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.RegExpMatch];
    }
  };
  H.StringMatch.prototype = {
    get$end: function() {
      return this.start + this.pattern.length;
    },
    $index: function(_, g) {
      return this.group$1(H.intTypeCheck(g));
    },
    group$1: function(group_) {
      if (group_ !== 0)
        throw H.wrapException(P.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new H.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current: function() {
      return this.__js_helper$_current;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H.NativeByteBuffer.prototype = {$isByteBuffer: 1};
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var targetLength, count, sourceLength, source;
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          H.throwExpression(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          H.throwExpression(P.StateError$("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 13
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 55
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (_this.isSync)
        _this._completer.complete$1(value);
      else if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        t1 = _this._completer;
        value.then$1$2$onError(t1.get$complete(), t1.get$completeError(), -1);
      } else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(_this, value));
    },
    completeError$2: function(e, st) {
      if (this.isSync)
        this._completer.completeError$2(e, st);
      else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
    },
    $isCompleter: 1
  };
  P._AsyncAwaitCompleter_complete_closure.prototype = {
    call$0: function() {
      this.$this._completer.complete$1(this.value);
    },
    $signature: 1
  };
  P._AsyncAwaitCompleter_completeError_closure.prototype = {
    call$0: function() {
      this.$this._completer.completeError$2(this.e, this.st);
    },
    $signature: 1
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 12
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 31
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H.intTypeCheck(errorCode), result);
    },
    $signature: 23
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (error == null)
        error = new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      return this._thenNoZoneRegistration$1$2(f, onError, $R);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenNoZoneRegistration$1$2: function(f, onError, $E) {
      var result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      result = new P._Future($.Zone__current, [$E]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
      return result;
    },
    _setValue$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._state = 4;
      this._resultOrListeners = value;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._state = 1;
      t1 = _this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncComplete_closure(_this, value), {func: 1, ret: -1}));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value._state === 8) {
          _this._state = 1;
          t1 = _this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__chainFuture_closure(_this, value), {func: 1, ret: -1}));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncCompleteError_closure(this, error, stackTrace), {func: 1, ret: -1}));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 1
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 1
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 13
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 38
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 1
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)),
        listeners = t1._removeListeners$0();
      t1._state = 4;
      t1._resultOrListeners = t2;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 1
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 1
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 39
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 2
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_Stream$fromIterable_closure.prototype = {
    call$0: function() {
      var t1 = this.elements;
      return new P._IterablePendingEvents(new J.ArrayIterator(t1, 1, [H.getTypeArgumentByIndex(t1, 0)]), [this.T]);
    },
    $signature: function() {
      return {func: 1, ret: [P._IterablePendingEvents, this.T]};
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 1
  };
  P.Stream_first_closure.prototype = {
    call$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      P._cancelAndValue(this._box_0.subscription, this.future, value);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_first_closure0.prototype = {
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        this.future._completeError$2(e, s);
      }
    },
    $signature: 1
  };
  P.StreamSubscription.prototype = {};
  P.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "StreamView", 0)]}), true, H.functionTypeCheck(onDone, {func: 1, ret: -1}), onError);
    }
  };
  P.StreamTransformerBase.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H.assertSubtype(pendingEvents, "$is_PendingEvents", _this.$ti, "$as_PendingEvents");
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents._async$_iterator != null) {
        _this._state |= 64;
        _this._pending.schedule$1(_this);
      }
    },
    cancel$0: function() {
      var t1 = this._state &= 4294967279;
      if ((t1 & 8) === 0)
        this._cancel$0();
      t1 = $.$get$Future__nullFuture();
      return t1;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state |= 8;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = null;
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = _this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = t1 | 16;
        _this._cancel$0();
        t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      this._cancel$0();
      this._state |= 16;
      new P._BufferingStreamSubscription__sendDone_sendDone(this).call$0();
    },
    _checkState$1: function(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending._async$_iterator == null) {
        t1 = _this._state = t1 & 4294967231;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null || t2._async$_iterator == null;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 &= 4294967291;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        t1 ^= 32;
        _this._state = t1;
        t1 &= 4294967263;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData: function(_onData) {
      this._async$_onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    set$_onDone: function(_onDone) {
      this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", this.$ti, "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = t2 | 32;
      onError = t1._onError;
      t2 = this.error;
      t3 = P.Object;
      t4 = t1._zone;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
      else
        t4.runUnaryGuarded$1$2(H.functionTypeCheck(t1._onError, {func: 1, ret: -1, args: [P.Object]}), t2, t3);
      t1._state &= 4294967263;
    },
    $signature: 2
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = t2 | 42;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state &= 4294967263;
    },
    $signature: 2
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, subscription, _this = this;
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      if (_this._isUsed)
        H.throwExpression(P.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      subscription = P._BufferingStreamSubscription$(onData, onError, onDone, true, t1);
      subscription._setPendingEvents$1(_this._pending.call$0());
      return subscription;
    }
  };
  P._GeneratedStreamImpl.prototype = {};
  P._IterablePendingEvents.prototype = {
    handleNext$1: function(dispatch) {
      var hasMore, e, s, t1, t2, t3, t4, exception, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No events pending."));
      hasMore = null;
      try {
        hasMore = t1.moveNext$0();
        if (H.boolConversionCheck(hasMore)) {
          t1 = dispatch;
          t2 = H.getTypeArgumentByIndex(t1, 0);
          t3 = H.assertSubtypeOfRuntimeType(_this._async$_iterator.get$current(), t2);
          t4 = t1._state;
          t1._state = t4 | 32;
          t1._zone.runUnaryGuarded$1$2(t1._async$_onData, t3, t2);
          t1._state &= 4294967263;
          t1._checkState$1((t4 & 4) !== 0);
        } else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (hasMore == null) {
          _this.set$_async$_iterator(C.C_EmptyIterator);
          dispatch._sendError$2(e, s);
        } else
          dispatch._sendError$2(e, s);
      }
    },
    set$_async$_iterator: function(_iterator) {
      this._async$_iterator = H.assertSubtype(_iterator, "$isIterator", this.$ti, "$asIterator");
    }
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    $signature: 1
  };
  P._StreamIterator.prototype = {};
  P._cancelAndValue_closure.prototype = {
    call$0: function() {
      return this.future._complete$1(this.value);
    },
    $signature: 2
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 1
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 2
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._LinkedCustomHashMap.prototype = {
    $index: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet: function(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    internalComputeHashCode$1: function(key) {
      return this._collection$_hashCode.call$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), t2 = this._equals, i = 0; i < $length; ++i)
        if (H.boolConversionCheck(t2.call$2(H.assertSubtypeOfRuntimeType(bucket[i].hashMapCellKey, t1), H.assertSubtypeOfRuntimeType(key, t1))))
          return i;
      return -1;
    }
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 15
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti);
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, t1;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else {
        t1 = this._contains$1(object);
        return t1;
      }
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var t1 = this._remove$1(object);
      return t1;
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._previous = previous;
      --_this._collection$_length;
      _this._modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.IterableBase.prototype = {};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(receiver));
      for (i = 0; i < _this.get$length(receiver); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0), $R]);
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 16
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = _this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    containsKey$1: function(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._map.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1: function(_, action) {
      this._map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$length: function(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys: function() {
      return this._map.get$keys();
    },
    toString$0: function(_) {
      return this._map.toString$0(0);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1: function(_, elements) {
      var t1, _i;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        this.add$1(0, elements[_i]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableSet.prototype = {
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    get$iterator: function(_) {
      var t1 = this._map.get$keys();
      return t1.get$iterator(t1);
    },
    get$length: function(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      throw H.wrapException(P.UnsupportedError$("Cannot change unmodifiable set"));
    }
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function() {
      if (this._processed == null)
        return this._data.get$keys();
      return new P._JsonMapKeyIterable(this);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var keys = H.listTypeCheck(this._data);
      if (keys == null)
        keys = this._data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.AsciiCodec.prototype = {
    encode$1: function(source) {
      return C.AsciiEncoder_127.convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var t1, t2, i, codeUnit,
        $length = P.RangeError_checkValidRange(0, null, string.length) - 0,
        result = new Uint8Array($length);
      for (t1 = result.length, t2 = ~this._subsetMask, i = 0; i < $length; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & t2) !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= t1)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.AsciiEncoder.prototype = {};
  P._UnicodeSubsetDecoder.prototype = {
    convert$1: function(bytes) {
      var byteCount, t1, i, byte;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      byteCount = bytes.length;
      P.RangeError_checkValidRange(0, null, byteCount);
      for (t1 = ~this._subsetMask, i = 0; i < byteCount; ++i) {
        byte = bytes[i];
        if ((byte & t1) !== 0) {
          if (!this._allowInvalid)
            throw H.wrapException(P.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, byteCount);
        }
      }
      return P.String_String$fromCharCodes(bytes, 0, byteCount);
    },
    _convertInvalid$3: function(bytes, start, end) {
      var t1, t2, i, t3, value;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      for (t1 = ~this._subsetMask, t2 = bytes.length, i = start, t3 = ""; i < end; ++i) {
        if (i >= t2)
          return H.ioore(bytes, i);
        value = bytes[i];
        t3 += H.Primitives_stringFromCharCode((value & t1) !== 0 ? 65533 : value);
      }
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.AsciiDecoder.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return C.C_Base64Encoder;
    },
    normalize$3: function(source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= inverseAlphabet.length)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            buffer._contents += H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      if (input.get$isEmpty(input))
        return "";
      return P.String_String$fromCharCodes(new P._Base64Encoder("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").encode$4(input, 0, input.get$length(input), true), 0, null);
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Base64Encoder.prototype = {
    encode$4: function(bytes, start, end, isLast) {
      var $length, byteCount, fullChunks, bufferLength, output, _this = this;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      $length = end.$sub(0, start);
      byteCount = C.JSInt_methods.$add(_this._convert$_state & 3, $length);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      _this._convert$_state = P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, true, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return;
    }
  };
  P.ByteConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [[P.List, P.int]];
    }
  };
  P.ByteConversionSinkBase.prototype = {};
  P._ByteCallbackSink.prototype = {
    add$1: function(_, chunk) {
      var t1, t2, t3, v, grown, _this = this;
      H.assertSubtype(chunk, "$isIterable", [P.int], "$asIterable");
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      if (t3.get$length(chunk) > t1.length - t2) {
        t1 = _this._convert$_buffer;
        v = t3.get$length(chunk) + t1.length - 1;
        v |= C.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._convert$_buffer;
        C.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_convert$_buffer(grown);
      }
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      C.NativeUint8List_methods.setRange$3(t1, t2, t2 + t3.get$length(chunk), chunk);
      _this._bufferIndex = _this._bufferIndex + t3.get$length(chunk);
    },
    close$0: function() {
      this._callback.call$1(C.NativeUint8List_methods.sublist$2(this._convert$_buffer, 0, this._bufferIndex));
    },
    set$_convert$_buffer: function(_buffer) {
      this._convert$_buffer = H.assertSubtype(_buffer, "$isList", [P.int], "$asList");
    }
  };
  P.ChunkedConversionSink.prototype = {};
  P.Codec.prototype = {
    encode$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Codec", 0));
      return this.get$encoder().convert$1(input);
    }
  };
  P.Converter.prototype = {};
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$1: function(source) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    convert$1: function(input) {
      return P._parseJson(input, this._reviver);
    },
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, t2, separator, t3, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t2 = _this._sink;
      t2._contents += "{";
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        t2._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t2._contents += '":';
        t3 = i + 1;
        if (t3 >= t1)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t2._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 16
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.Latin1Codec.prototype = {
    encode$1: function(source) {
      return C.Latin1Encoder_255.convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Latin1Decoder.prototype = {};
  P.Utf8Codec.prototype = {
    decode$1: function(codeUnits) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      return new P.Utf8Decoder(false).convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var t1, encoder,
        end = P.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, end - 1), 0);
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = t2 + 1,
        t4 = t1.length;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 240 | rune >>> 18;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (_this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t3 = _this._bufferIndex;
          t4 = t3 + 1;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 192 | codeUnit >>> 6;
          _this._bufferIndex = t4 + 1;
          t1[t4] = 128 | codeUnit & 63;
        } else {
          t3 = _this._bufferIndex;
          if (t3 + 2 >= t2)
            break;
          t4 = _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 224 | codeUnit >>> 12;
          t3 = _this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit >>> 6 & 63;
          _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder, t1;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      result = P.Utf8Decoder__convertIntercepted(false, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, J.get$length$asx(codeUnits));
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = new P.StringBuffer(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = new P.StringBuffer("");
      decoder = new P._Utf8Decoder(false, buffer);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      if (decoder._expectedUnits > 0) {
        H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", codeUnits, end));
        buffer._contents += H.Primitives_stringFromCharCode(65533);
        decoder._extraUnits = decoder._expectedUnits = decoder._convert$_value = 0;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, i, unit, t3, oneBytes, i0, i1, t4, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x";
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      value = _this._convert$_value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._convert$_value = 0;
      $label0$0:
        for (t1 = J.getInterceptor$asx(codeUnits), t2 = _this._stringSink, i = startIndex; true; i = i1) {
          $label1$1:
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $label0$0;
                unit = t1.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  t3 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i);
                  throw H.wrapException(t3);
                } else {
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t3 = extraUnits - 1;
              if (t3 < 0 || t3 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t3);
              if (value <= C.List_127_2047_65535_1114111[t3]) {
                t3 = P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (value > 1114111) {
                t3 = P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (!_this._isFirstCharacter || value !== 65279)
                t2._contents += H.Primitives_stringFromCharCode(value);
              _this._isFirstCharacter = false;
            }
          for (t3 = i < endIndex; t3;) {
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t2._contents += P.String_String$fromCharCodes(codeUnits, i, i0);
              if (i0 === endIndex)
                break;
            } else
              i0 = i;
            i1 = i0 + 1;
            unit = t1.$index(codeUnits, i0);
            if (typeof unit !== "number")
              return unit.$lt();
            if (unit < 0) {
              t4 = P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16), codeUnits, i1 - 1);
              throw H.wrapException(t4);
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $label0$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $label0$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $label0$0;
              }
              t4 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i1 - 1);
              throw H.wrapException(t4);
            }
          }
          break $label0$0;
        }
      if (expectedUnits > 0) {
        _this._convert$_value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 47
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._core$_value === other._core$_value && true;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._core$_value, H.interceptedTypeCheck(other, "$isDateTime")._core$_value);
    },
    get$hashCode: function(_) {
      var t1 = this._core$_value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      return t1;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(_this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    },
    get$source: function(receiver) {
      return this.source;
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  P.int.prototype = {};
  P.Iterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this, H.getRuntimeTypeArgument(this, "Iterable", 0), $R);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    join$1: function(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (H.boolConversionCheck(test.call$1(t1.get$current())))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Pattern.prototype = {};
  P.Match.prototype = {};
  P.RegExpMatch.prototype = {$isMatch: 1};
  P.StackTrace.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  P.Uri_splitQueryString_closure.prototype = {
    call$2: function(map, element) {
      var index, key, value,
        t1 = P.String;
      H.assertSubtype(map, "$isMap", [t1, t1], "$asMap");
      H.stringTypeCheck(element);
      index = J.getInterceptor$s(element).indexOf$1(element, "=");
      if (index === -1) {
        if (element !== "")
          map.$indexSet(0, P._Uri__uriDecode(element, 0, element.length, this.encoding, true), "");
      } else if (index !== 0) {
        key = C.JSString_methods.substring$2(element, 0, index);
        value = C.JSString_methods.substring$1(element, index + 1);
        t1 = this.encoding;
        map.$indexSet(0, P._Uri__uriDecode(key, 0, key.length, t1, true), P._Uri__uriDecode(value, 0, value.length, t1, true));
      }
      return map;
    },
    $signature: 48
  };
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 49
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $signature: 22
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 58
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function() {
      var t1 = this._host;
      if (t1 == null)
        return "";
      if (C.JSString_methods.startsWith$1(t1, "["))
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$pathSegments: function() {
      var pathToSplit, t1, t2, t3,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (pathToSplit.length !== 0 && C.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      if (pathToSplit === "")
        result = C.List_empty3;
      else {
        t1 = P.String;
        t2 = H.setRuntimeTypeInfo(pathToSplit.split("/"), [t1]);
        t3 = H.getTypeArgumentByIndex(t2, 0);
        result = P.List_List$unmodifiable(new H.MappedListIterable(t2, H.functionTypeCheck(P.core_Uri_decodeComponent$closure(), {func: 1, ret: null, args: [t3]}), [t3, null]), t1);
      }
      this.set$_pathSegments(result);
      return result;
    },
    _mergePaths$2: function(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, mergedPath, t2, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (reference.get$path(reference) === "") {
            targetPath = _this.path;
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          } else {
            if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else {
              t1 = _this.path;
              if (t1.length === 0)
                if (targetHost == null)
                  targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
                else
                  targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
              else {
                mergedPath = _this._mergePaths$2(t1, reference.get$path(reference));
                t2 = targetScheme.length === 0;
                if (!t2 || targetHost != null || C.JSString_methods.startsWith$1(t1, "/"))
                  targetPath = P._Uri__removeDotSegments(mergedPath);
                else
                  targetPath = P._Uri__normalizeRelativePath(mergedPath, !t2 || targetHost != null);
              }
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return new P._Uri(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host() !== "")
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        pathSegments = _this.get$pathSegments();
        P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = P.StringBuffer__writeAll(C.JSString_methods.startsWith$1(_this.path, "/") ? "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0: function(_) {
      var t2, t3, t4, _this = this,
        t1 = _this._core$_text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? H.S(t1) + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + H.S(t2) + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = _this._core$_text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!!J.getInterceptor$(other).$isUri)
        if (_this.scheme == other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo == other.get$userInfo())
              if (_this.get$host() == other.get$host())
                if (_this.get$port(_this) == other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this.toString$0(0)) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = H.assertSubtype(_pathSegments, "$isList", [P.String], "$asList");
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, this.portStart + 1));
    },
    $signature: 7
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H.stringTypeCheck(segment);
      if (J.contains$1$asx(segment, "/"))
        if (this.argumentError)
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 7
  };
  P.UriData.prototype = {
    get$uri: function() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      t1 = _this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = _this._core$_text;
      t1 = t1[0] + 1;
      queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
      end = t2.length;
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = _null;
      return _this._uriCache = new P._DataUri("data", _null, _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._core$_text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      return new Uint8Array(96);
    },
    $signature: 24
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      J.fillRange$3$x(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 25
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, t3;
      for (t1 = chars.length, t2 = target.length, i = 0; i < t1; ++i) {
        t3 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t3 >= t2)
          return H.ioore(target, t3);
        target[t3] = transition;
      }
    }
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1, t2;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1), t1 = target.length; i <= n; ++i) {
        t2 = (i ^ 96) >>> 0;
        if (t2 >= t1)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    }
  };
  P._SimpleUri.prototype = {
    get$hasAuthority: function() {
      return this._hostStart > 0;
    },
    get$hasPort: function() {
      var t1, t2;
      if (this._hostStart > 0) {
        t1 = this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._pathStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hasQuery: function() {
      var t1 = this._queryStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < this._fragmentStart;
    },
    get$hasFragment: function() {
      return this._fragmentStart < this._uri.length;
    },
    get$_isFile: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "file");
    },
    get$_isHttp: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "http");
    },
    get$_isHttps: function() {
      return this._schemeEnd === 5 && C.JSString_methods.startsWith$1(this._uri, "https");
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$scheme: function() {
      var t2, _this = this,
        _s7_ = "package",
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (_this.get$_isFile()) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, _s7_)) {
        _this._schemeCache = _s7_;
        t1 = _s7_;
      } else {
        t1 = C.JSString_methods.substring$2(_this._uri, 0, t1);
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host: function() {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, _this = this;
      if (_this.get$hasPort()) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return P.int_parse(C.JSString_methods.substring$2(_this._uri, t1 + 1, _this._pathStart), null, null);
      }
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return C.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < t2 ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments: function() {
      var t2, parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (C.JSString_methods.startsWith$2(t1, "/", start)) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty3;
      t2 = P.String;
      parts = H.setRuntimeTypeInfo([], [t2]);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (C.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, t2);
    },
    _isPort$1: function(port) {
      var portDigitStart,
        t1 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      portDigitStart = t1 + 1;
      return portDigitStart + port.length === this._pathStart && C.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new P._SimpleUri(C.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1: function(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var t2, t3, isSimple, delta, newUri, t4, t5, refStart, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        if (base.get$_isFile())
          isSimple = ref._pathStart != ref._queryStart;
        else if (base.get$_isHttp())
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !base.get$_isHttps() || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          newUri = C.JSString_methods.substring$2(base._uri, 0, delta) + C.JSString_methods.substring$1(ref._uri, t1 + 1);
          t1 = ref._portStart;
          if (typeof t1 !== "number")
            return t1.$add();
          t4 = ref._pathStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = ref._queryStart;
          if (typeof t5 !== "number")
            return t5.$add();
          return new P._SimpleUri(newUri, t3, t2 + delta, t1 + delta, t4 + delta, t5 + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart == t1) {
        t2 = ref._fragmentStart;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < t2) {
          t3 = base._queryStart;
          if (typeof t3 !== "number")
            return t3.$sub();
          delta = t3 - t1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (C.JSString_methods.startsWith$2(t2, "/", refStart)) {
        t3 = base._pathStart;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = t3 - refStart;
        newUri = C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, t3, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart == baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, "../", refStart);) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        if (typeof baseStart !== "number")
          return baseStart.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = baseStart - refStart + 1;
        newUri = C.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      for (baseStart0 = baseStart; C.JSString_methods.startsWith$2(baseUri, "../", baseStart0);) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(refStart0 <= t1 && C.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !C.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(C.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0: function() {
      var t1, t2, windows, t3, _this = this;
      if (_this._schemeEnd >= 0 && !_this.get$_isFile())
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        t3 = _this._portStart;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (_this._hostStart < t3)
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        t1 = C.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && this._uri === other.toString$0(0);
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      if (typeof t6 !== "number")
        return t6.$lt();
      t6 = t6 < t8 ? _this.get$query() : _null;
      return new P._Uri(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  W.Blob.prototype = {$isBlob: 1};
  W.Document.prototype = {$isDocument: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.FileReader.prototype = {
    get$result: function(receiver) {
      var res = receiver.result;
      if (!!J.getInterceptor$(res).$isByteBuffer)
        return H.NativeUint8List_NativeUint8List$view(res, 0, null);
      return res;
    }
  };
  W.HttpRequest.prototype = {
    get$responseHeaders: function(receiver) {
      var headersList, _i, header, t2, splitIdx, key, value,
        t1 = P.String,
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersString = receiver.getAllResponseHeaders();
      if (headersString == null)
        return headers;
      headersList = headersString.split("\r\n");
      for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
        header = headersList[_i];
        t2 = J.getInterceptor$asx(header);
        if (t2.get$length(header) === 0)
          continue;
        splitIdx = t2.indexOf$1(header, ": ");
        if (splitIdx === -1)
          continue;
        key = t2.substring$2(header, 0, splitIdx).toLowerCase();
        value = t2.substring$1(header, splitIdx + 2);
        if (headers.containsKey$1(key))
          headers.$indexSet(0, key, H.S(headers.$index(0, key)) + ", " + value);
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, true, user, password);
    },
    send$1: function(receiver, body_OR_data) {
      return receiver.send(body_OR_data);
    },
    setRequestHeader$2: function(receiver, $name, value) {
      return receiver.setRequestHeader(H.stringTypeCheck($name), H.stringTypeCheck(value));
    },
    $isHttpRequest: 1
  };
  W.HttpRequestEventTarget.prototype = {};
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    }
  };
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1);
    }
  };
  W._EventStreamSubscription.prototype = {
    cancel$0: function() {
      var t2, t3, _this = this,
        t1 = _this._html$_target;
      if (t1 == null)
        return;
      t2 = _this._onData;
      t3 = t2 != null;
      if (t3) {
        H.functionTypeCheck(t2, {func: 1, args: [W.Event]});
        if (t3)
          J._removeEventListener$3$x(t1, _this._eventType, t2, false);
      }
      _this._html$_target = null;
      _this.set$_onData(null);
      return;
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 27
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.convertNativePromiseToDartFuture(e);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 28
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.convertNativePromiseToDartFuture_closure.prototype = {
    call$1: function(result) {
      return this.completer.complete$1(result);
    },
    $signature: 12
  };
  P.convertNativePromiseToDartFuture_closure0.prototype = {
    call$1: function(result) {
      return this.completer.completeError$1(result);
    },
    $signature: 12
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  M.CanonicalizedMap.prototype = {
    $index: function(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return;
      pair = _this._canonicalized_map$_base.$index(0, _this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
      return pair == null ? null : pair.last;
    },
    $indexSet: function(_, key, value) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1);
      H.assertSubtypeOfRuntimeType(key, t1);
      t2 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2);
      H.assertSubtypeOfRuntimeType(value, t2);
      if (!_this._isValidKey$1(key))
        return;
      _this._canonicalized_map$_base.$indexSet(0, _this._canonicalize.call$1(key), new B.Pair(key, value, [t1, t2]));
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(this, "CanonicalizedMap", 2)], "$asMap").forEach$1(0, new M.CanonicalizedMap_addAll_closure(this));
    },
    containsKey$1: function(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._canonicalized_map$_base.containsKey$1(_this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
    },
    forEach$1: function(_, f) {
      var _this = this;
      _this._canonicalized_map$_base.forEach$1(0, new M.CanonicalizedMap_forEach_closure(_this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)]})));
    },
    get$isEmpty: function(_) {
      var t1 = this._canonicalized_map$_base;
      return t1.get$isEmpty(t1);
    },
    get$keys: function() {
      var t1 = this._canonicalized_map$_base.get$values(),
        t2 = H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1),
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M.CanonicalizedMap_keys_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2);
    },
    get$length: function(_) {
      var t1 = this._canonicalized_map$_base;
      return t1.get$length(t1);
    },
    toString$0: function(_) {
      var result, _this = this, t1 = {};
      if (M._isToStringVisiting0(_this))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting0, _this);
        result._contents += "{";
        t1.first = true;
        _this.forEach$1(0, new M.CanonicalizedMap_toString_closure(t1, _this, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting0.length)
          return H.ioore($._toStringVisiting0, -1);
        $._toStringVisiting0.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isValidKey$1: function(key) {
      var t1;
      if (key == null || H.checkSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1)))
        t1 = H.boolConversionCheck(this._isValidKeyFn.call$1(key));
      else
        t1 = false;
      return t1;
    },
    $isMap: 1,
    $asMap: function($C, $K, $V) {
      return [$K, $V];
    }
  };
  M.CanonicalizedMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2));
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2);
      return {func: 1, ret: t2, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), t2]};
    }
  };
  M.CanonicalizedMap_forEach_closure.prototype = {
    call$2: function(key, pair) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0));
      H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)], "$asPair");
      return this.f.call$2(pair.first, pair.last);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0), [B.Pair, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_keys_closure.prototype = {
    call$1: function(pair) {
      var t1 = this.$this;
      return H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)], "$asPair").first;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1);
      return {func: 1, ret: t2, args: [[B.Pair, t2, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_toString_closure.prototype = {
    call$2: function(k, v) {
      var _this = this,
        t1 = _this.$this;
      H.assertSubtypeOfRuntimeType(k, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(v, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2));
      t1 = _this._box_0;
      if (!t1.first)
        _this.result._contents += ", ";
      t1.first = false;
      _this.result._contents += H.S(k) + ": " + H.S(v);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]};
    }
  };
  M._isToStringVisiting_closure.prototype = {
    call$1: function(e) {
      return this.o === e;
    },
    $signature: 15
  };
  B.Pair.prototype = {};
  M._DelegatingIterableBase.prototype = {
    cast$1$0: function(_, $T) {
      var t1 = this._base;
      return new H.CastList(t1, [H.getTypeArgumentByIndex(t1, 0), $T]);
    },
    contains$1: function(_, element) {
      return C.JSArray_methods.contains$1(this._base, element);
    },
    elementAt$1: function(_, index) {
      var t1 = this._base;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$isEmpty: function(_) {
      return this._base.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._base.length !== 0;
    },
    get$iterator: function(_) {
      var t1 = this._base;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._base.length;
    },
    map$1$1: function(_, f, $T) {
      var t1 = this._base,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]}), {func: 1, ret: $T, args: [t2]}), [t2, $T]);
    },
    skip$1: function(_, n) {
      var t1 = this._base;
      return H.SubListIterable$(t1, n, null, H.getTypeArgumentByIndex(t1, 0));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this._base, "[", "]");
    },
    $isIterable: 1
  };
  M.DelegatingIterable.prototype = {};
  M.DelegatingList.prototype = {
    $index: function(_, index) {
      H.intTypeCheck(index);
      return C.JSArray_methods.$index(H.assertSubtype(this._base, "$isList", this.$ti, "$asList"), index);
    },
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      C.JSArray_methods.$indexSet(H.assertSubtype(this._base, "$isList", this.$ti, "$asList"), index, value);
    },
    addAll$1: function(_, iterable) {
      var t1 = this.$ti;
      H.assertSubtype(iterable, "$isIterable", t1, "$asIterable");
      C.JSArray_methods.addAll$1(H.assertSubtype(this._base, "$isList", t1, "$asList"), iterable);
    },
    cast$1$0: function(_, $T) {
      var t1 = H.assertSubtype(this._base, "$isList", this.$ti, "$asList");
      return new H.CastList(t1, [H.getTypeArgumentByIndex(t1, 0), $T]);
    },
    get$reversed: function(_) {
      var t1 = H.assertSubtype(this._base, "$isList", this.$ti, "$asList");
      return new H.ReversedListIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  E.BaseClient.prototype = {
    _sendUnstreamed$3: function(method, url, headers) {
      return this._sendUnstreamed$body$BaseClient(method, url, headers);
    },
    _sendUnstreamed$body$BaseClient: function(method, url, headers) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(U.Response),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$_sendUnstreamed$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = H.interceptedTypeCheck(typeof url === "string" ? P.Uri_parse(url) : url, "$isUri");
              t1 = new Uint8Array(0);
              t2 = P.String;
              t2 = P.LinkedHashMap_LinkedHashMap(new G.BaseRequest_closure(), new G.BaseRequest_closure0(), t2, t2);
              $async$temp1 = U;
              $async$goto = 3;
              return P._asyncAwait($async$self.send$1(0, new O.Request(C.C_Utf8Codec, t1, method, url, t2)), $async$_sendUnstreamed$3);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_sendUnstreamed$3, $async$completer);
    },
    $isClient: 1
  };
  G.BaseRequest.prototype = {
    finalize$0: function() {
      if (this._finalized)
        throw H.wrapException(P.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return;
    },
    toString$0: function(_) {
      return this.method + " " + H.S(this.url);
    }
  };
  G.BaseRequest_closure.prototype = {
    call$2: function(key1, key2) {
      H.stringTypeCheck(key1);
      H.stringTypeCheck(key2);
      return key1.toLowerCase() === key2.toLowerCase();
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 29
  };
  G.BaseRequest_closure0.prototype = {
    call$1: function(key) {
      return C.JSString_methods.get$hashCode(H.stringTypeCheck(key).toLowerCase());
    },
    $signature: 30
  };
  T.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request: function(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 100)
        throw H.wrapException(P.ArgumentError$("Invalid status code " + t1 + "."));
    }
  };
  O.BrowserClient.prototype = {
    send$1: function(_, request) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(X.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, xhr, completer, t1, bytes, t2, t3, t4;
      var $async$send$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request.super$BaseRequest$finalize();
              t1 = [P.List, P.int];
              $async$goto = 3;
              return P._asyncAwait(new Z.ByteStream(P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([request._bodyBytes], [t1]), t1)).toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = new XMLHttpRequest();
              t1 = $async$self._xhrs;
              t1.add$1(0, xhr);
              t2 = J.toString$0$(request.url);
              t3 = H.interceptedTypeCheck(xhr, "$isHttpRequest");
              (t3 && C.HttpRequest_methods).open$5$async$password$user(t3, request.method, t2, true, null, null);
              xhr.responseType = "blob";
              xhr.withCredentials = false;
              request.headers.forEach$1(0, J.get$setRequestHeader$x(xhr));
              t2 = X.StreamedResponse;
              completer = new P._AsyncCompleter(new P._Future($.Zone__current, [t2]), [t2]);
              t2 = [W.ProgressEvent];
              t3 = new W._EventStream(H.interceptedTypeCheck(xhr, "$isEventTarget"), "load", false, t2);
              t4 = -1;
              t3.get$first(t3).then$1$1(new O.BrowserClient_send_closure(xhr, completer, request), t4);
              t2 = new W._EventStream(H.interceptedTypeCheck(xhr, "$isEventTarget"), "error", false, t2);
              t2.get$first(t2).then$1$1(new O.BrowserClient_send_closure0(completer, request), t4);
              J.send$1$x(xhr, bytes);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(completer.future, $async$send$1);
            case 7:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1.remove$1(0, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$send$1, $async$completer);
    },
    close$0: function() {
      for (var t1 = this._xhrs, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
        t1._collection$_current.abort();
    }
  };
  O.BrowserClient_send_closure.prototype = {
    call$1: function(_) {
      var t1, blob, reader, t2, t3, t4, t5;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      t1 = this.xhr;
      blob = W._convertNativeToDart_XHR_Response(t1.response) == null ? W.Blob_Blob([]) : W._convertNativeToDart_XHR_Response(t1.response);
      reader = new FileReader();
      t2 = [W.ProgressEvent];
      t3 = new W._EventStream(reader, "load", false, t2);
      t4 = this.completer;
      t5 = this.request;
      t3.get$first(t3).then$1$1(new O.BrowserClient_send__closure(reader, t4, t1, t5), null);
      t2 = new W._EventStream(reader, "error", false, t2);
      t2.get$first(t2).then$1$1(new O.BrowserClient_send__closure0(t4, t5), null);
      reader.readAsArrayBuffer(H.interceptedTypeCheck(blob, "$isBlob"));
    },
    $signature: 6
  };
  O.BrowserClient_send__closure.prototype = {
    call$1: function(_) {
      var body, t1, t2, t3, t4, t5, t6, _this = this;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      body = H.interceptedTypeCast(C.FileReader_methods.get$result(_this.reader), "$isUint8List");
      t1 = [P.List, P.int];
      t1 = P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([body], [t1]), t1);
      t2 = _this.xhr;
      t3 = t2.status;
      t4 = body.length;
      t5 = _this.request;
      t6 = C.HttpRequest_methods.get$responseHeaders(t2);
      t2 = t2.statusText;
      t1 = new X.StreamedResponse(B.toByteStream(new Z.ByteStream(t1)), t5, t3, t2, t4, t6, false, true);
      t1.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, t6, false, true, t2, t5);
      _this.completer.complete$1(t1);
    },
    $signature: 6
  };
  O.BrowserClient_send__closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$2(new E.ClientException(J.toString$0$(H.interceptedTypeCheck(error, "$isProgressEvent"))), P.StackTrace_current());
    },
    $signature: 6
  };
  O.BrowserClient_send_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isProgressEvent");
      this.completer.completeError$2(new E.ClientException("XMLHttpRequest error."), P.StackTrace_current());
    },
    $signature: 6
  };
  Z.ByteStream.prototype = {
    toBytes$0: function() {
      var t1 = P.Uint8List,
        t2 = new P._Future($.Zone__current, [t1]),
        completer = new P._AsyncCompleter(t2, [t1]),
        sink = new P._ByteCallbackSink(new Z.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(sink.get$add(sink), true, sink.get$close(), completer.get$completeError());
      return t2;
    },
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $asStreamView: function() {
      return [[P.List, P.int]];
    }
  };
  Z.ByteStream_toBytes_closure.prototype = {
    call$1: function(bytes) {
      return this.completer.complete$1(new Uint8Array(H._ensureNativeList(H.assertSubtype(bytes, "$isList", [P.int], "$asList"))));
    },
    $signature: 32
  };
  E.ClientException.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isException: 1
  };
  O.Request.prototype = {};
  U.Response.prototype = {};
  U.Response_fromStream_closure.prototype = {
    call$1: function(body) {
      var t1, t2, t3, t4, t5, t6;
      H.interceptedTypeCheck(body, "$isUint8List");
      t1 = this.response;
      t2 = t1.statusCode;
      t3 = t1.request;
      t4 = t1.headers;
      t1 = t1.reasonPhrase;
      t5 = B.toUint8List(body);
      t6 = body.length;
      t5 = new U.Response(t5, t3, t2, t1, t6, t4, false, true);
      t5.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t2, t6, t4, false, true, t1, t3);
      return t5;
    },
    $signature: 33
  };
  X.StreamedResponse.prototype = {};
  Z.CaseInsensitiveMap.prototype = {
    $asMap: function($V) {
      return [P.String, $V];
    },
    $asCanonicalizedMap: function($V) {
      return [P.String, P.String, $V];
    }
  };
  Z.CaseInsensitiveMap$from_closure.prototype = {
    call$1: function(key) {
      return H.stringTypeCheck(key).toLowerCase();
    },
    $signature: 3
  };
  Z.CaseInsensitiveMap$from_closure0.prototype = {
    call$1: function(key) {
      return key != null;
    },
    $signature: 18
  };
  R.MediaType.prototype = {
    toString$0: function(_) {
      var buffer = new P.StringBuffer(""),
        t1 = this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      t1._map.forEach$1(0, H.functionTypeCheck(new R.MediaType_toString_closure(buffer), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]}));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  R.MediaType_MediaType$parse_closure.prototype = {
    call$0: function() {
      var t3, type, subtype, t4, parameters, t5, success, attribute, value,
        t1 = this.mediaType,
        scanner = new X.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      type = scanner.get$lastMatch().$index(0, 0);
      scanner.expect$1("/");
      scanner.expect$1(t3);
      subtype = scanner.get$lastMatch().$index(0, 0);
      scanner.scan$1(t2);
      t4 = P.String;
      parameters = P.LinkedHashMap_LinkedHashMap$_empty(t4, t4);
      while (true) {
        t4 = scanner._lastMatch = C.JSString_methods.matchAsPrefix$2(";", t1, scanner._position);
        t5 = scanner._lastMatchPosition = scanner._position;
        success = t4 != null;
        t4 = success ? scanner._lastMatchPosition = scanner._position = t4.get$end() : t5;
        if (!success)
          break;
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t4);
        scanner._lastMatchPosition = scanner._position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._position = t4.get$end();
        scanner.expect$1(t3);
        if (scanner._position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        attribute = scanner._lastMatch.$index(0, 0);
        scanner.expect$1("=");
        t4 = scanner._lastMatch = t3.matchAsPrefix$2(0, t1, scanner._position);
        t5 = scanner._lastMatchPosition = scanner._position;
        success = t4 != null;
        if (success) {
          t4 = scanner._lastMatchPosition = scanner._position = t4.get$end();
          t5 = t4;
        } else
          t4 = t5;
        if (success) {
          if (t4 !== t5)
            scanner._lastMatch = null;
          value = scanner._lastMatch.$index(0, 0);
        } else
          value = N.expectQuotedString(scanner);
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._position);
        scanner._lastMatchPosition = scanner._position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._position = t4.get$end();
        parameters.$indexSet(0, attribute, value);
      }
      scanner.expectDone$0();
      return R.MediaType$(type, subtype, parameters);
    },
    $signature: 36
  };
  R.MediaType_toString_closure.prototype = {
    call$2: function(attribute, value) {
      var t1, t2;
      H.stringTypeCheck(attribute);
      H.stringTypeCheck(value);
      t1 = this.buffer;
      t1._contents += "; " + H.S(attribute) + "=";
      t2 = $.$get$nonToken()._nativeRegExp;
      if (typeof value !== "string")
        H.throwExpression(H.argumentErrorValue(value));
      if (t2.test(value)) {
        t1._contents += '"';
        t2 = $.$get$_escapedChar();
        value.toString;
        t2 = t1._contents += J.splitMapJoin$2$onMatch$s(value, t2, H.functionTypeCheck(new R.MediaType_toString__closure(), {func: 1, ret: P.String, args: [P.Match]}));
        t1._contents = t2 + '"';
      } else
        t1._contents += H.S(value);
    },
    $signature: 37
  };
  R.MediaType_toString__closure.prototype = {
    call$1: function(match) {
      return C.JSString_methods.$add("\\", match.$index(0, 0));
    },
    $signature: 4
  };
  N.expectQuotedString_closure.prototype = {
    call$1: function(match) {
      return match.$index(0, 1);
    },
    $signature: 4
  };
  M.Context0.prototype = {
    absolute$1: function(_, part1) {
      var t1, _null = null;
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, null, null, null, null, null, null], [P.String]));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = D.current();
      return this.join$8(0, t1, part1, _null, _null, _null, _null, _null, _null);
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var t1,
        parts = H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7, part8], [P.String]);
      M._validateArgList("join", parts);
      t1 = H.getTypeArgumentByIndex(parts, 0);
      return this.joinAll$1(new H.WhereIterable(parts, H.functionTypeCheck(new M.Context_join_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]));
    },
    joinAll$1: function(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      H.assertSubtype(parts, "$isIterable", [P.String], "$asIterable");
      for (t1 = H.getTypeArgumentByIndex(parts, 0), t2 = H.functionTypeCheck(new M.Context_joinAll_closure(), {func: 1, ret: P.bool, args: [t1]}), t3 = parts.get$iterator(parts), t1 = new H.WhereIterator(t3, t2, [t1]), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = X.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = C.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            C.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = H.S(t5);
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return H.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += H.S(t5);
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1: function(_, path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      parsed.set$parts(P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new M.Context_split_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2));
      t1 = parsed.root;
      if (t1 != null)
        C.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (C.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new H.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1: function(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      from = D.current();
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return H.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return H.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      t2 = P.String;
      C.JSArray_methods.insertAll$2(pathParsed.parts, 0, P.List_List$filled(fromParsed.parts.length, "..", t2));
      C.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      C.JSArray_methods.insertAll$2(pathParsed.separators, 1, P.List_List$filled(fromParsed.parts.length, t1.get$separator(), t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), ".")) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1: function(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style == $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style != $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(M._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) != null;
    },
    $signature: 8
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 8
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part).length !== 0;
    },
    $signature: 8
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H.stringTypeCheck(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 3
  };
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2: function(path1, path2) {
      return path1 == path2;
    }
  };
  X.ParsedPath.prototype = {
    removeTrailingSeparators$0: function() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), "")))
          break;
        C.JSArray_methods.removeLast$0(_this.parts);
        C.JSArray_methods.removeLast$0(_this.separators);
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        C.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0: function() {
      var t2, t3, leadingDoubles, _i, part, t4, newSeparators, _this = this,
        t1 = P.String,
        newParts = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = _this.parts, t3 = t2.length, leadingDoubles = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        part = t2[_i];
        t4 = J.getInterceptor$(part);
        if (!(t4.$eq(part, ".") || t4.$eq(part, "")))
          if (t4.$eq(part, "..")) {
            t4 = newParts.length;
            if (t4 !== 0) {
              if (0 >= t4)
                return H.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            C.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", t1));
      if (newParts.length === 0 && _this.root == null)
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, t1);
      t1 = _this.root;
      C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length !== 0 && _this.style.needsSeparator$1(t1) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      t1 = _this.root;
      if (t1 != null && _this.style === $.$get$Style_windows()) {
        t1.toString;
        _this.root = H.stringReplaceAllUnchecked(t1, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, t2, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? t1 : "";
      for (i = 0; i < _this.parts.length; ++i) {
        t2 = _this.separators;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t1 + H.S(t2[i]);
        t1 = _this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t2 + H.S(t1[i]);
      }
      t1 += H.S(C.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts: function(parts) {
      this.parts = H.assertSubtype(parts, "$isList", [P.String], "$asList");
    },
    set$separators: function(separators) {
      this.separators = H.assertSubtype(separators, "$isList", [P.String], "$asList");
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      return this.$this.style.get$separator();
    },
    $signature: 40
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  O.Style.prototype = {
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      return t1 !== 0 && J.codeUnitAt$1$s(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      if (path.length !== 0 && J._codeUnitAt$1$s(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return false;
    },
    pathFromUri$1: function(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
      }
      throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (J.getInterceptor$s(path).codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (J.getInterceptor$s(path)._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return path.length !== 0 && J._codeUnitAt$1$s(path, 0) === 47;
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(uri);
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = J.codeUnitAt$1$s(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = J.getInterceptor$s(path)._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || C.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!B.isAlphabetic(t2))
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1: function(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (uri.get$host() === "") {
        t1 = path.length;
        if (t1 >= 3 && C.JSString_methods.startsWith$1(path, "/") && B.isDriveLetter(path, 1)) {
          P.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = H.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + H.S(uri.get$host()) + path;
      t1 = H.stringReplaceAllUnchecked(path, "/", "\\");
      return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    }
  };
  D.ActionParser.prototype = {
    parseOn$1: function(context) {
      var _this = this,
        result = _this.delegate.parseOn$1(context),
        t1 = H.getTypeArgumentByIndex(_this, 1);
      if (result.get$isSuccess())
        return result.success$1$1(_this.callback.call$1(H.assertSubtypeOfRuntimeType(result.get$value(), H.getTypeArgumentByIndex(_this, 0))), t1);
      else
        return result.failure$1$1(result.get$message(result), t1);
    },
    fastParseOn$2: function(buffer, position) {
      return this.hasSideEffects ? this.super$Parser$fastParseOn(buffer, position) : this.delegate.fastParseOn$2(buffer, position);
    },
    hasEqualProperties$1: function(other) {
      var t1, _this = this;
      H.assertSubtype(other, "$isActionParser", _this.$ti, "$asActionParser");
      _this.super$Parser$hasEqualProperties(other);
      t1 = J.$eq$(_this.callback, H.functionTypeCheck(other.callback, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1), args: [H.getTypeArgumentByIndex(_this, 0)]})) && _this.hasSideEffects === other.hasSideEffects;
      return t1;
    },
    $asDelegateParser: function($T, $R) {
      return [$R];
    },
    $asParser: function($T, $R) {
      return [$R];
    }
  };
  Y.CastParser.prototype = {
    parseOn$1: function(context) {
      var result = this.delegate.parseOn$1(context),
        t1 = H.getTypeArgumentByIndex(this, 0);
      if (result.get$isSuccess())
        return result.success$1$1(H.assertSubtypeOfRuntimeType(result.get$value(), t1), t1);
      else
        return result.failure$1$1(result.get$message(result), t1);
    },
    fastParseOn$2: function(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    }
  };
  Y.CastListParser.prototype = {
    parseOn$1: function(context) {
      var result = H.assertSubtype(this.delegate.parseOn$1(context), "$isResult", [[P.List,,]], "$asResult"),
        t1 = H.getTypeArgumentByIndex(this, 0),
        t2 = [P.List, t1];
      if (result.get$isSuccess())
        return result.success$1$1(J.cast$1$0$ax(result.get$value(), t1), t2);
      else
        return result.failure$1$1(result.get$message(result), t2);
    },
    fastParseOn$2: function(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    },
    $asDelegateParser: function($R) {
      return [[P.List, $R]];
    },
    $asParser: function($R) {
      return [[P.List, $R]];
    }
  };
  O.FlattenParser.prototype = {
    parseOn$1: function(context) {
      var t1 = context.buffer,
        t2 = context.position,
        position = this.delegate.fastParseOn$2(t1, t2);
      if (typeof position !== "number")
        return position.$lt();
      if (position < 0)
        return context.failure$1$1(this.message, P.String);
      return context.success$1$2(C.JSString_methods.substring$2(t1, t2, position), position, P.String);
    },
    fastParseOn$2: function(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isFlattenParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = other.message;
      return this.message === t1;
    },
    $asDelegateParser: function() {
      return [P.String];
    },
    $asParser: function() {
      return [P.String];
    }
  };
  S.TokenParser.prototype = {
    parseOn$1: function(context) {
      var result = this.delegate.parseOn$1(context),
        t1 = H.getTypeArgumentByIndex(this, 0),
        t2 = [K.Token, t1];
      if (result.get$isSuccess())
        return result.success$1$1(new K.Token(H.assertSubtypeOfRuntimeType(result.get$value(), t1), context.buffer, context.position, result.position, this.$ti), t2);
      else
        return result.failure$1$1(result.get$message(result), t2);
    },
    fastParseOn$2: function(buffer, position) {
      return this.delegate.fastParseOn$2(buffer, position);
    },
    $asDelegateParser: function($T) {
      return [[K.Token, $T]];
    },
    $asParser: function($T) {
      return [[K.Token, $T]];
    }
  };
  D.SingleCharPredicate.prototype = {
    test$1: function(value) {
      return this.value === value;
    },
    isEqualTo$1: function(other) {
      return other instanceof D.SingleCharPredicate && other.value === this.value;
    }
  };
  F.DigitCharPredicate.prototype = {
    test$1: function(value) {
      return 48 <= value && value <= 57;
    },
    isEqualTo$1: function(other) {
      return other instanceof F.DigitCharPredicate;
    }
  };
  Q.NotCharacterPredicate.prototype = {
    test$1: function(value) {
      return !this.predicate.test$1(value);
    },
    isEqualTo$1: function(other) {
      var t1;
      if (other instanceof Q.NotCharacterPredicate) {
        t1 = other.predicate;
        t1 = t1.isEqualTo$1(t1);
      } else
        t1 = false;
      return t1;
    }
  };
  E.optimizedRanges_closure.prototype = {
    call$2: function(first, second) {
      var t1, t2;
      H.interceptedTypeCheck(first, "$isRangeCharPredicate");
      H.interceptedTypeCheck(second, "$isRangeCharPredicate");
      t1 = first.start;
      t2 = second.start;
      return t1 !== t2 ? t1 - t2 : first.stop - second.stop;
    },
    $signature: 62
  };
  E.optimizedRanges_closure0.prototype = {
    call$1: function(range) {
      return H.interceptedTypeCheck(range, "$isRangeCharPredicate").start;
    },
    $signature: 19
  };
  E.optimizedRanges_closure1.prototype = {
    call$1: function(range) {
      return H.interceptedTypeCheck(range, "$isRangeCharPredicate").stop;
    },
    $signature: 19
  };
  D.CharacterParser.prototype = {
    parseOn$1: function(context) {
      var buffer = context.buffer,
        position = context.position,
        t1 = buffer.length;
      if (position < t1 && this.predicate.test$1(C.JSString_methods.codeUnitAt$1(buffer, position))) {
        if (position < 0 || position >= t1)
          return H.ioore(buffer, position);
        return context.success$1$2(buffer[position], position + 1, P.String);
      }
      return context.failure$1$1(this.message, P.String);
    },
    fastParseOn$2: function(buffer, position) {
      return position < buffer.length && this.predicate.test$1(C.JSString_methods.codeUnitAt$1(buffer, position)) ? position + 1 : -1;
    },
    toString$0: function(_) {
      return this.super$Object$toString(0) + "[" + this.message + "]";
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isCharacterParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = this.predicate.isEqualTo$1(other.predicate) && this.message === other.message;
      return t1;
    },
    $asParser: function() {
      return [P.String];
    }
  };
  D.closure3.prototype = {
    call$1: function(element) {
      H.stringTypeCheck(element);
      return V.RangeCharPredicate$(V.toCharCode(element), V.toCharCode(element));
    },
    $signature: 43
  };
  D.closure4.prototype = {
    call$1: function(elements) {
      var t1;
      H.listTypeCheck(elements);
      t1 = J.getInterceptor$asx(elements);
      return V.RangeCharPredicate$(V.toCharCode(t1.$index(elements, 0)), V.toCharCode(t1.$index(elements, 2)));
    },
    $signature: 44
  };
  D.closure2.prototype = {
    call$1: function(predicates) {
      return E.optimizedRanges(J.cast$1$0$ax(H.listTypeCheck(predicates), V.RangeCharPredicate));
    },
    $signature: 20
  };
  D.closure1.prototype = {
    call$1: function(predicates) {
      var t1;
      H.listTypeCheck(predicates);
      t1 = J.getInterceptor$asx(predicates);
      return H.interceptedTypeCheck(t1.$index(predicates, 0) == null ? t1.$index(predicates, 1) : new Q.NotCharacterPredicate(H.interceptedTypeCheck(t1.$index(predicates, 1), "$isCharacterPredicate")), "$isCharacterPredicate");
    },
    $signature: 20
  };
  E.CharacterPredicate.prototype = {};
  V.RangeCharPredicate.prototype = {
    test$1: function(value) {
      return this.start <= value && value <= this.stop;
    },
    isEqualTo$1: function(other) {
      return other instanceof V.RangeCharPredicate && other.start === this.start && other.stop === this.stop;
    },
    $isCharacterPredicate: 1
  };
  Z.RangesCharPredicate.prototype = {
    test$1: function(value) {
      var t1, t2, min, mid, t3, comp,
        max = this.length;
      for (t1 = this.starts, t2 = t1.length, min = 0; min < max;) {
        mid = min + C.JSInt_methods._shrOtherPositive$1(max - min, 1);
        if (mid < 0 || mid >= t2)
          return H.ioore(t1, mid);
        t3 = t1[mid];
        if (typeof t3 !== "number")
          return t3.$sub();
        comp = t3 - value;
        if (comp === 0)
          return true;
        else if (comp < 0)
          min = mid + 1;
        else
          max = mid;
      }
      if (0 < min) {
        t1 = this.stops;
        t2 = min - 1;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = value <= t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    isEqualTo$1: function(other) {
      return other instanceof Z.RangesCharPredicate && other.length === this.length && other.starts === this.starts && other.stops === this.stops;
    },
    $isCharacterPredicate: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  S.WhitespaceCharPredicate.prototype = {
    test$1: function(value) {
      if (value < 256)
        switch (value) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      else
        switch (value) {
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
    },
    isEqualTo$1: function(other) {
      return other instanceof S.WhitespaceCharPredicate;
    },
    $isCharacterPredicate: 1
  };
  O.WordCharPredicate.prototype = {
    test$1: function(value) {
      var t1;
      if (!(65 <= value && value <= 90))
        if (!(97 <= value && value <= 122))
          t1 = 48 <= value && value <= 57 || value === 95;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isEqualTo$1: function(other) {
      return other instanceof O.WordCharPredicate;
    },
    $isCharacterPredicate: 1
  };
  Y.ChoiceParser.prototype = {
    parseOn$1: function(context) {
      var t1, result, i;
      for (t1 = this.children, result = null, i = 0; i < t1.length; ++i) {
        result = t1[i].parseOn$1(context);
        if (result.get$isSuccess())
          return result;
      }
      return result;
    },
    fastParseOn$2: function(buffer, position) {
      var t1, t2, result, _i;
      for (t1 = this.children, t2 = t1.length, result = -1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        result = t1[_i].fastParseOn$2(buffer, position);
        if (typeof result !== "number")
          return result.$ge();
        if (result >= 0)
          return result;
      }
      return result;
    },
    or$1: function(other) {
      var t3, t4, _i,
        t1 = [Q.Parser,,],
        t2 = H.setRuntimeTypeInfo([], [t1]);
      for (t3 = this.children, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i)
        C.JSArray_methods.add$1(t2, t3[_i]);
      C.JSArray_methods.add$1(t2, other);
      t1 = P.List_List$from(t2, false, t1);
      if (t2.length === 0)
        H.throwExpression(P.ArgumentError$("Choice parser cannot be empty."));
      return new Y.ChoiceParser(t1);
    },
    $asParser: function() {
    }
  };
  R.DelegateParser.prototype = {
    parseOn$1: function(context) {
      return H.assertSubtype(this.delegate.parseOn$1(context), "$isResult", [H.getRuntimeTypeArgument(this, "DelegateParser", 0)], "$asResult");
    },
    get$children: function() {
      return H.setRuntimeTypeInfo([this.delegate], [[Q.Parser,,]]);
    },
    replace$2: function(source, target) {
      this.super$Parser$replace(source, target);
      if (J.$eq$(this.delegate, source))
        this.delegate = target;
    }
  };
  S.ListParser.prototype = {
    replace$2: function(source, target) {
      var t1, i;
      this.super$Parser$replace(source, target);
      for (t1 = this.children, i = 0; i < t1.length; ++i)
        if (J.$eq$(t1[i], source))
          C.JSArray_methods.$indexSet(t1, i, target);
    },
    get$children: function() {
      return this.children;
    }
  };
  K.OptionalParser.prototype = {
    parseOn$1: function(context) {
      var _this = this,
        result = _this.delegate.parseOn$1(context);
      if (result.get$isSuccess())
        return H.assertSubtype(result, "$isResult", _this.$ti, "$asResult");
      else
        return context.success$1$1(_this.otherwise, H.getTypeArgumentByIndex(_this, 0));
    },
    fastParseOn$2: function(buffer, position) {
      var t1,
        result = this.delegate.fastParseOn$2(buffer, position);
      if (typeof result !== "number")
        return result.$lt();
      if (result < 0)
        t1 = position;
      else
        t1 = result;
      return t1;
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.assertSubtype(other, "$isOptionalParser", this.$ti, "$asOptionalParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = other.otherwise;
      return this.otherwise == t1;
    }
  };
  L.SequenceParser.prototype = {
    parseOn$1: function(context) {
      var current, i, result, t2, t3,
        t1 = this.children,
        elements = new Array(t1.length);
      elements.fixed$length = Array;
      for (current = context, i = 0; i < t1.length; ++i, current = result) {
        result = t1[i].parseOn$1(current);
        if (result.get$isFailure()) {
          t1 = result.get$message(result);
          t2 = result.buffer;
          t3 = result.position;
          return new B.Failure(t1, t2, t3, [[P.List,,]]);
        }
        C.JSArray_methods.$indexSet(elements, i, result.get$value());
      }
      return current.success$1$1(elements, [P.List,,]);
    },
    fastParseOn$2: function(buffer, position) {
      var t1, t2, _i;
      for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        position = t1[_i].fastParseOn$2(buffer, position);
        if (typeof position !== "number")
          return position.$lt();
        if (position < 0)
          return position;
      }
      return position;
    },
    seq$1: function(other) {
      var t3, t4, _i,
        t1 = [Q.Parser,,],
        t2 = H.setRuntimeTypeInfo([], [t1]);
      for (t3 = this.children, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i)
        C.JSArray_methods.add$1(t2, t3[_i]);
      C.JSArray_methods.add$1(t2, other);
      return new L.SequenceParser(P.List_List$from(t2, false, t1));
    },
    $asParser: function() {
      return [[P.List,,]];
    }
  };
  A.Context.prototype = {
    success$1$2: function(result, position, $R) {
      var t1;
      H.assertSubtypeOfRuntimeType(result, $R);
      t1 = position == null ? this.position : position;
      return new E.Success(result, this.buffer, t1, [$R]);
    },
    success$1$1: function(result, $R) {
      return this.success$1$2(result, null, $R);
    },
    failure$1$1: function(message, $R) {
      return new B.Failure(message, this.buffer, this.position, [$R]);
    },
    toString$0: function(_) {
      return "Context[" + K.Token_positionString(this.buffer, this.position) + "]";
    }
  };
  D.ParserException.prototype = {
    toString$0: function(_) {
      var t1 = this.failure;
      return H.S(t1.message) + " at " + K.Token_positionString(t1.buffer, t1.position);
    },
    $isException: 1
  };
  B.Failure.prototype = {
    get$isFailure: function() {
      return true;
    },
    get$value: function() {
      return H.throwExpression(new D.ParserException(this));
    },
    toString$0: function(_) {
      return "Failure[" + K.Token_positionString(this.buffer, this.position) + "]: " + H.S(this.message);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  V.Result.prototype = {
    get$isSuccess: function() {
      return false;
    },
    get$isFailure: function() {
      return false;
    }
  };
  E.Success.prototype = {
    get$isSuccess: function() {
      return true;
    },
    get$message: function(_) {
      return;
    },
    toString$0: function(_) {
      return "Success[" + K.Token_positionString(this.buffer, this.position) + "]: " + H.S(this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  N.GrammarDefinition.prototype = {
    ref$1: function($function) {
      var t1 = H.setRuntimeTypeInfo([null, null, null, null, null, null], [P.Object]),
        t2 = H.getTypeArgumentByIndex(t1, 0);
      return new L.Reference($function, P.List_List$from(new H.TakeWhileIterable(t1, H.functionTypeCheck(new N.GrammarDefinition_ref_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), false, t2));
    },
    _resolve$1: function(reference) {
      var $parent, t2, _i, child, referenced,
        t1 = [Q.Parser,,],
        mapping = P.LinkedHashMap_LinkedHashMap$_empty(L.Reference, t1),
        _dereference = new N.GrammarDefinition__resolve__dereference(mapping),
        todo = H.setRuntimeTypeInfo([_dereference.call$1(reference)], [t1]),
        seen = P.LinkedHashSet_LinkedHashSet(t1);
      seen.addAll$1(0, todo);
      for (; t1 = todo.length, t1 !== 0;) {
        if (0 >= t1)
          return H.ioore(todo, -1);
        $parent = todo.pop();
        for (t1 = $parent.get$children(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          if (child instanceof L.Reference) {
            referenced = _dereference.call$1(child);
            $parent.replace$2(child, referenced);
            child = referenced;
          }
          if (!seen.contains$1(0, child)) {
            seen.add$1(0, child);
            C.JSArray_methods.add$1(todo, child);
          }
        }
      }
      return mapping.$index(0, reference);
    }
  };
  N.GrammarDefinition_ref_closure.prototype = {
    call$1: function(each) {
      return each != null;
    },
    $signature: 18
  };
  N.GrammarDefinition__resolve__dereference.prototype = {
    call$1: function(reference) {
      var references, t2, t3, _i,
        t1 = this.mapping,
        parser = t1.$index(0, reference);
      if (parser == null) {
        references = H.setRuntimeTypeInfo([reference], [L.Reference]);
        parser = H.interceptedTypeCheck(P.Function_apply(reference.$function, reference.$arguments), "$isParser");
        for (; parser instanceof L.Reference;) {
          if (C.JSArray_methods.contains$1(references, parser))
            throw H.wrapException(P.StateError$("Recursive references detected: " + H.S(references)));
          C.JSArray_methods.add$1(references, parser);
          t2 = parser.$function;
          t3 = parser.$arguments;
          parser = H.interceptedTypeCheck(H.Primitives_applyFunction(t2, t3, null), "$isParser");
        }
        for (t2 = references.length, _i = 0; _i < references.length; references.length === t2 || (0, H.throwConcurrentModificationError)(references), ++_i)
          t1.$indexSet(0, references[_i], parser);
      }
      return parser;
    },
    $signature: 46
  };
  L.Reference.prototype = {
    $eq: function(_, other) {
      var t1, t2, i, a, b, t3;
      if (other == null)
        return false;
      if (other instanceof L.Reference) {
        if (!J.$eq$(other.$function, this.$function) || other.$arguments.length !== this.$arguments.length)
          return false;
        for (t1 = this.$arguments, t2 = other.$arguments, i = 0; i < t1.length; ++i) {
          a = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          b = t2[i];
          t3 = J.getInterceptor$(a);
          if (!!t3.$isParser && !a.$isReference && b instanceof Q.Parser && !b.$isReference) {
            if (!a.isEqualTo$1(b))
              return false;
          } else if (!t3.$eq(a, b))
            return false;
        }
        return true;
      }
      return false;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.$function);
    },
    parseOn$1: function(context) {
      return H.throwExpression(P.UnsupportedError$("References cannot be parsed."));
    },
    $asParser: function() {
    }
  };
  Q.Parser.prototype = {
    fastParseOn$2: function(buffer, position) {
      var result = this.parseOn$1(new A.Context(buffer, position));
      return result.get$isSuccess() ? result.position : -1;
    },
    optional$1: function(otherwise) {
      var t1 = H.getRuntimeTypeArgument(this, "Parser", 0);
      return new K.OptionalParser(H.assertSubtypeOfRuntimeType(otherwise, t1), this, [t1]);
    },
    optional$0: function() {
      return this.optional$1(null);
    },
    plus$0: function() {
      return this.repeat$2(0, 1, -1);
    },
    repeat$2: function(_, min, max) {
      var t1 = H.getRuntimeTypeArgument(this, "Parser", 0),
        t2 = new S.PossessiveRepeatingParser(min, max, this, [t1]);
      t2.RepeatingParser$3(this, min, max, t1);
      return t2;
    },
    seq$1: function(other) {
      var t1 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([this, other], [t1]), false, t1));
    },
    or$1: function(other) {
      var t1 = [Q.Parser,,];
      t1 = P.List_List$from(H.setRuntimeTypeInfo([this, other], [t1]), false, t1);
      return new Y.ChoiceParser(t1);
    },
    map$1$2$hasSideEffects: function(_, callback, hasSideEffects, $R) {
      var t1 = H.getRuntimeTypeArgument(this, "Parser", 0);
      return new D.ActionParser(H.functionTypeCheck(callback, {func: 1, ret: $R, args: [t1]}), hasSideEffects, this, [t1, $R]);
    },
    map$1$1: function($receiver, callback, $R) {
      return this.map$1$2$hasSideEffects($receiver, callback, false, $R);
    },
    pick$1$1: function(index, $R) {
      return new Y.CastListParser(this, [$R]).map$1$1(0, new Q.Parser_pick_closure(index, $R), $R);
    },
    separatedBy$1$1: function(separator, $R) {
      var t1 = [Q.Parser,,],
        t2 = [t1];
      t2 = H.setRuntimeTypeInfo([this, new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([separator, this], t2), false, t1)).repeat$2(0, 0, -1)], t2);
      return new L.SequenceParser(P.List_List$from(t2, false, t1)).map$1$1(0, new Q.Parser_separatedBy_closure(true, false, $R), [P.List, $R]);
    },
    isEqualTo$2: function(other, seen) {
      var _this = this,
        t1 = [Q.Parser,,];
      H.assertSubtype(seen, "$isSet", [t1], "$asSet");
      if (seen == null)
        seen = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      if (_this.$eq(0, other) || seen.contains$1(0, _this))
        return true;
      seen.add$1(0, _this);
      return H.getRuntimeType(_this).$eq(0, J.get$runtimeType$u(other)) && _this.hasEqualProperties$1(H.assertSubtype(other, "$isParser", [H.getRuntimeTypeArgument(_this, "Parser", 0)], "$asParser")) && _this.hasEqualChildren$2(other, seen);
    },
    isEqualTo$1: function(other) {
      return this.isEqualTo$2(other, null);
    },
    hasEqualProperties$1: function(other) {
      H.assertSubtype(other, "$isParser", [H.getRuntimeTypeArgument(this, "Parser", 0)], "$asParser");
      return true;
    },
    hasEqualChildren$2: function(other, seen) {
      var thisChildren, otherChildren, i, t1;
      H.assertSubtype(seen, "$isSet", [[Q.Parser,,]], "$asSet");
      thisChildren = this.get$children();
      otherChildren = other.get$children();
      if (thisChildren.length !== otherChildren.length)
        return false;
      for (i = 0; i < thisChildren.length; ++i) {
        t1 = thisChildren[i];
        if (i >= otherChildren.length)
          return H.ioore(otherChildren, i);
        if (!t1.isEqualTo$2(otherChildren[i], seen))
          return false;
      }
      return true;
    },
    get$children: function() {
      return C.List_empty0;
    },
    replace$2: function(source, target) {
    },
    $isPattern: 1
  };
  Q.Parser_pick_closure.prototype = {
    call$1: function(list) {
      H.assertSubtype(list, "$isList", [this.R], "$asList");
      return J.$index$asx(list, this.index);
    },
    $signature: function() {
      var t1 = this.R;
      return {func: 1, ret: t1, args: [[P.List, t1]]};
    }
  };
  Q.Parser_separatedBy_closure.prototype = {
    call$1: function(list) {
      var t1, result, t2, t3, t4, tuple;
      H.listTypeCheck(list);
      t1 = this.R;
      result = H.setRuntimeTypeInfo([], [t1]);
      t2 = J.getInterceptor$asx(list);
      C.JSArray_methods.add$1(result, H.assertSubtypeOfRuntimeType(t2.$index(list, 0), t1));
      for (t3 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t2.$index(list, 1), "$isIterable")), t4 = this.includeSeparators; t3.moveNext$0();) {
        tuple = t3.get$current();
        if (t4)
          C.JSArray_methods.add$1(result, H.assertSubtypeOfRuntimeType(J.$index$asx(tuple, 0), t1));
        C.JSArray_methods.add$1(result, H.assertSubtypeOfRuntimeType(J.$index$asx(tuple, 1), t1));
      }
      if (t4 && this.optionalSeparatorAtEnd && t2.$index(list, 2) != null)
        C.JSArray_methods.add$1(result, H.assertSubtypeOfRuntimeType(t2.$index(list, 2), t1));
      return result;
    },
    $signature: function() {
      return {func: 1, ret: [P.List, this.R], args: [[P.List,,]]};
    }
  };
  X.EndOfInputParser.prototype = {
    parseOn$1: function(context) {
      return context.position < context.buffer.length ? context.failure$1$1(this.message, null) : context.success$1$1(null, null);
    },
    fastParseOn$2: function(buffer, position) {
      return position < buffer.length ? -1 : position;
    },
    toString$0: function(_) {
      return this.super$Object$toString(0) + "[" + this.message + "]";
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isEndOfInputParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = other.message;
      return this.message === t1;
    },
    $asParser: function() {
      return [-1];
    }
  };
  N.AnyParser.prototype = {
    parseOn$1: function(context) {
      var position = context.position,
        buffer = context.buffer,
        t1 = buffer.length,
        t2 = P.String;
      if (position < t1) {
        if (position < 0)
          return H.ioore(buffer, position);
        t1 = context.success$1$2(buffer[position], position + 1, t2);
      } else
        t1 = context.failure$1$1(this.message, t2);
      return t1;
    },
    fastParseOn$2: function(buffer, position) {
      return position < buffer.length ? position + 1 : -1;
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isAnyParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = other.message;
      return this.message === t1;
    },
    $asParser: function() {
      return [P.String];
    }
  };
  B.PredicateParser.prototype = {
    parseOn$1: function(context) {
      var result,
        start = context.position,
        $stop = start + this.length,
        t1 = context.buffer;
      if ($stop <= t1.length) {
        result = C.JSString_methods.substring$2(t1, start, $stop);
        if (H.boolConversionCheck(this.predicate.call$1(result)))
          return context.success$1$2(result, $stop, P.String);
      }
      return context.failure$1$1(this.message, P.String);
    },
    fastParseOn$2: function(buffer, position) {
      var $stop = position + this.length;
      return $stop <= buffer.length && H.boolConversionCheck(this.predicate.call$1(C.JSString_methods.substring$2(buffer, position, $stop))) ? $stop : -1;
    },
    toString$0: function(_) {
      return this.super$Object$toString(0) + "[" + this.message + "]";
    },
    hasEqualProperties$1: function(other) {
      var t1, _this = this;
      H.interceptedTypeCheck(other, "$isPredicateParser");
      _this.super$Parser$hasEqualProperties(other);
      t1 = _this.length === other.length && J.$eq$(_this.predicate, other.predicate) && _this.message === other.message;
      return t1;
    },
    $asParser: function() {
      return [P.String];
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  Q.string_closure.prototype = {
    call$1: function(each) {
      return this.element === H.stringTypeCheck(each);
    },
    $signature: 8
  };
  E.LazyRepeatingParser.prototype = {
    parseOn$1: function(context) {
      var t1, t2, current, result, t3, t4, limiter, _this = this,
        elements = H.setRuntimeTypeInfo([], _this.$ti);
      for (t1 = _this.min, t2 = H.getTypeArgumentByIndex(_this, 0), current = context; elements.length < t1; current = result) {
        result = _this.delegate.parseOn$1(current);
        if (result.get$isFailure()) {
          t1 = result.get$message(result);
          t3 = result.buffer;
          t4 = result.position;
          return new B.Failure(t1, t3, t4, [[P.List, t2]]);
        }
        C.JSArray_methods.add$1(elements, H.assertSubtypeOfRuntimeType(result.get$value(), t2));
      }
      for (t1 = _this.max, t3 = t1 !== -1; true; current = result) {
        limiter = _this.limit.parseOn$1(current);
        if (limiter.get$isSuccess()) {
          t1 = [P.List, t2];
          H.assertSubtypeOfRuntimeType(elements, t1);
          return new E.Success(elements, current.buffer, current.position, [t1]);
        } else {
          if (t3 && elements.length >= t1) {
            t1 = limiter.get$message(limiter);
            t3 = limiter.buffer;
            t4 = limiter.position;
            return new B.Failure(t1, t3, t4, [[P.List, t2]]);
          }
          result = _this.delegate.parseOn$1(current);
          if (result.get$isFailure()) {
            t1 = limiter.get$message(limiter);
            t3 = limiter.buffer;
            t4 = limiter.position;
            return new B.Failure(t1, t3, t4, [[P.List, t2]]);
          }
          C.JSArray_methods.add$1(elements, H.assertSubtypeOfRuntimeType(result.get$value(), t2));
        }
      }
    },
    fastParseOn$2: function(buffer, position) {
      var t1, current, count, result, t2, limiter, _this = this;
      for (t1 = _this.min, current = position, count = 0; count < t1; current = result) {
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (typeof result !== "number")
          return result.$lt();
        if (result < 0)
          return -1;
        ++count;
      }
      for (t1 = _this.max, t2 = t1 !== -1; true; current = result) {
        limiter = _this.limit.fastParseOn$2(buffer, current);
        if (typeof limiter !== "number")
          return limiter.$ge();
        if (limiter >= 0)
          return current;
        else {
          if (t2 && count >= t1)
            return -1;
          result = _this.delegate.fastParseOn$2(buffer, current);
          if (typeof result !== "number")
            return result.$lt();
          if (result < 0)
            return -1;
          ++count;
        }
      }
    }
  };
  D.LimitedRepeatingParser.prototype = {
    get$children: function() {
      return H.setRuntimeTypeInfo([this.delegate, this.limit], [[Q.Parser,,]]);
    },
    replace$2: function(source, target) {
      this.super$DelegateParser$replace(source, target);
      if (J.$eq$(this.limit, source))
        this.limit = target;
    }
  };
  S.PossessiveRepeatingParser.prototype = {
    parseOn$1: function(context) {
      var t1, t2, current, result, t3, t4, _this = this,
        elements = H.setRuntimeTypeInfo([], _this.$ti);
      for (t1 = _this.min, t2 = H.getTypeArgumentByIndex(_this, 0), current = context; elements.length < t1; current = result) {
        result = _this.delegate.parseOn$1(current);
        if (result.get$isFailure()) {
          t1 = result.get$message(result);
          t3 = result.buffer;
          t4 = result.position;
          return new B.Failure(t1, t3, t4, [[P.List, t2]]);
        }
        C.JSArray_methods.add$1(elements, H.assertSubtypeOfRuntimeType(result.get$value(), t2));
      }
      t1 = _this.max;
      t3 = t1 !== -1;
      while (true) {
        if (!(!t3 || elements.length < t1))
          break;
        result = _this.delegate.parseOn$1(current);
        if (result.get$isFailure()) {
          t1 = [P.List, t2];
          H.assertSubtypeOfRuntimeType(elements, t1);
          return new E.Success(elements, current.buffer, current.position, [t1]);
        }
        C.JSArray_methods.add$1(elements, H.assertSubtypeOfRuntimeType(result.get$value(), t2));
        current = result;
      }
      return current.success$1$1(elements, [P.List, t2]);
    },
    fastParseOn$2: function(buffer, position) {
      var t1, current, count, result, t2, _this = this;
      for (t1 = _this.min, current = position, count = 0; count < t1; current = result) {
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (typeof result !== "number")
          return result.$lt();
        if (result < 0)
          return -1;
        ++count;
      }
      t1 = _this.max;
      t2 = t1 !== -1;
      while (true) {
        if (!(!t2 || count < t1))
          break;
        result = _this.delegate.fastParseOn$2(buffer, current);
        if (typeof result !== "number")
          return result.$lt();
        if (result < 0)
          return current;
        ++count;
        current = result;
      }
      return current;
    }
  };
  G.RepeatingParser.prototype = {
    RepeatingParser$3: function(parser, min, max, $T) {
      var t1 = this.min,
        t2 = this.max;
      if (t2 !== -1 && t2 < t1)
        throw H.wrapException(P.ArgumentError$("Maximum repetitions must be larger than " + t1 + ", but got " + t2 + "."));
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0) + "[" + this.min + "..",
        t2 = this.max;
      return t1 + H.S(t2 === -1 ? "*" : t2) + "]";
    },
    hasEqualProperties$1: function(other) {
      var t1, _this = this;
      H.assertSubtype(other, "$isRepeatingParser", _this.$ti, "$asRepeatingParser");
      _this.super$Parser$hasEqualProperties(other);
      t1 = _this.min === other.min && _this.max === other.max;
      return t1;
    },
    $asDelegateParser: function($T) {
      return [[P.List, $T]];
    },
    $asParser: function($T) {
      return [[P.List, $T]];
    }
  };
  K.Token.prototype = {
    get$length: function(_) {
      return this.stop - this.start;
    },
    toString$0: function(_) {
      return "Token[" + K.Token_positionString(this.buffer, this.start) + "]: " + H.S(this.value);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof K.Token && J.$eq$(this.value, other.value) && this.start === other.start && this.stop === other.stop;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value) + C.JSInt_methods.get$hashCode(this.start) + C.JSInt_methods.get$hashCode(this.stop);
    }
  };
  Y.SourceFile.prototype = {
    get$length: function(_) {
      return this._decodedChars.length;
    },
    get$lines: function() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url: function(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (j >= t2)
              return H.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          C.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1: function(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < C.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= C.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset))
        return _this._cachedLine;
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1: function(offset) {
      var t2, t3, t4, _this = this,
        t1 = _this._cachedLine;
      if (t1 == null)
        return false;
      t2 = _this._lineStarts;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        return H.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      t1 = _this._cachedLine;
      t3 = t2.length;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 < t3 - 1) {
        t4 = t1 + 1;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (t1 < t3 - 2) {
        t4 = t1 + 2;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        _this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1: function(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (half < 0 || half >= t2)
          return H.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1: function(offset) {
      var line, lineStart, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      lineStart = C.JSArray_methods.$index(_this._lineStarts, line);
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1: function(line) {
      var t1, t2, result, t3;
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$line: function() {
      return this.file.getLine$1(this.offset);
    },
    get$column: function() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  Y._FileSpan.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$length: function(_) {
      return this._end - this._file$_start;
    },
    get$start: function() {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end: function() {
      return Y.FileLocation$_(this.file, this._end);
    },
    get$text: function(_) {
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context: function() {
      var t2, _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0) {
          if (endLine === t1._lineStarts.length - 1)
            t1 = "";
          else {
            t2 = t1.getOffset$1(endLine);
            if (typeof endLine !== "number")
              return endLine.$add();
            t1 = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t1.getOffset$1(endLine + 1)), 0, null);
          }
          return t1;
        }
      } else if (endLine === t1._lineStarts.length - 1)
        endOffset = t1._decodedChars.length;
      else {
        if (typeof endLine !== "number")
          return endLine.$add();
        endOffset = t1.getOffset$1(endLine + 1);
      }
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1: function(_, other) {
      var result;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = C.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? C.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isFileSpan)
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode: function(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {
    highlight$0: function() {
      var t1, t2, lineStart, context, lines, t3, t4, lineNumber, _i, line, lastLineIndex, _this = this;
      _this._writeSidebar$1$end("\u2577");
      t1 = _this._buffer;
      t1._contents += "\n";
      t2 = _this._highlighter$_span;
      lineStart = B.findLineStart(t2.get$context(), t2.get$text(t2), t2.get$start().get$column());
      context = t2.get$context();
      if (typeof lineStart !== "number")
        return lineStart.$gt();
      if (lineStart > 0) {
        lines = C.JSString_methods.substring$2(context, 0, lineStart - 1).split("\n");
        t3 = t2.get$start().get$line();
        t4 = lines.length;
        if (typeof t3 !== "number")
          return t3.$sub();
        lineNumber = t3 - t4;
        for (t3 = _this._multiline, _i = 0; _i < t4; ++_i) {
          line = lines[_i];
          _this._writeSidebar$1$line(lineNumber);
          t1._contents += C.JSString_methods.$mul(" ", t3 ? 3 : 1);
          _this._writeText$1(line);
          t1._contents += "\n";
          ++lineNumber;
        }
        context = C.JSString_methods.substring$1(context, lineStart);
      }
      lines = H.setRuntimeTypeInfo(context.split("\n"), [P.String]);
      t3 = t2.get$end().get$line();
      t2 = t2.get$start().get$line();
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      lastLineIndex = t3 - t2;
      if (J.get$length$asx(C.JSArray_methods.get$last(lines)) === 0 && lines.length > lastLineIndex + 1) {
        if (0 >= lines.length)
          return H.ioore(lines, -1);
        lines.pop();
      }
      _this._writeFirstLine$1(C.JSArray_methods.get$first(lines));
      if (_this._multiline) {
        _this._writeIntermediateLines$1(H.SubListIterable$(lines, 1, null, H.getTypeArgumentByIndex(lines, 0)).take$1(0, lastLineIndex - 1));
        if (lastLineIndex < 0 || lastLineIndex >= lines.length)
          return H.ioore(lines, lastLineIndex);
        _this._writeLastLine$1(lines[lastLineIndex]);
      }
      _this._writeTrailingLines$1(H.SubListIterable$(lines, lastLineIndex + 1, null, H.getTypeArgumentByIndex(lines, 0)));
      _this._writeSidebar$1$end("\u2575");
      t1 = t1._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFirstLine$1: function(line) {
      var t3, t4, startColumn, endColumn, textBefore, textInside, tabsBefore, tabsInside, _this = this, t1 = {},
        t2 = _this._highlighter$_span;
      _this._writeSidebar$1$line(t2.get$start().get$line());
      t3 = t2.get$start().get$column();
      t4 = line.length;
      startColumn = t1.startColumn = Math.min(t3, t4);
      t3 = t2.get$end();
      t3 = t3.get$offset(t3);
      t2 = t2.get$start();
      endColumn = t1.endColumn = Math.min(startColumn + t3 - t2.get$offset(t2), t4);
      textBefore = J.substring$2$s(line, 0, startColumn);
      t2 = _this._multiline;
      if (t2 && _this._isOnlyWhitespace$1(textBefore)) {
        t1 = _this._buffer;
        t1._contents += " ";
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure(_this, line));
        t1._contents += "\n";
        return;
      }
      t3 = _this._buffer;
      t3._contents += C.JSString_methods.$mul(" ", t2 ? 3 : 1);
      _this._writeText$1(textBefore);
      textInside = C.JSString_methods.substring$2(line, startColumn, endColumn);
      _this._colorize$1(new U.Highlighter__writeFirstLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t3._contents += "\n";
      tabsBefore = _this._countTabs$1(textBefore);
      tabsInside = _this._countTabs$1(textInside);
      startColumn += tabsBefore * 3;
      t1.startColumn = startColumn;
      t1.endColumn = endColumn + (tabsBefore + tabsInside) * 3;
      _this._writeSidebar$0();
      if (t2) {
        t3._contents += " ";
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure1(t1, _this));
      } else {
        t3._contents += C.JSString_methods.$mul(" ", startColumn + 1);
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure2(t1, _this));
      }
      t3._contents += "\n";
    },
    _writeIntermediateLines$1: function(lines) {
      var t1, lineNumber, t2, t3, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      t1 = _this._highlighter$_span.get$start().get$line();
      if (typeof t1 !== "number")
        return t1.$add();
      lineNumber = t1 + 1;
      for (t1 = new H.ListIterator(lines, lines.get$length(lines), [H.getTypeArgumentByIndex(lines, 0)]), t2 = _this._buffer; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        _this._writeSidebar$1$line(lineNumber);
        t2._contents += " ";
        _this._colorize$1(new U.Highlighter__writeIntermediateLines_closure(_this, t3));
        t2._contents += "\n";
        ++lineNumber;
      }
    },
    _writeLastLine$1: function(line) {
      var t3, endColumn, textInside, _this = this, t1 = {},
        t2 = _this._highlighter$_span;
      _this._writeSidebar$1$line(t2.get$end().get$line());
      t2 = t2.get$end().get$column();
      t3 = line.length;
      endColumn = t1.endColumn = Math.min(t2, t3);
      if (_this._multiline && endColumn === t3) {
        t1 = _this._buffer;
        t1._contents += " ";
        _this._colorize$1(new U.Highlighter__writeLastLine_closure(_this, line));
        t1._contents += "\n";
        return;
      }
      t2 = _this._buffer;
      t2._contents += " ";
      textInside = J.substring$2$s(line, 0, endColumn);
      _this._colorize$1(new U.Highlighter__writeLastLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t2._contents += "\n";
      t1.endColumn = endColumn + _this._countTabs$1(textInside) * 3;
      _this._writeSidebar$0();
      t2._contents += " ";
      _this._colorize$1(new U.Highlighter__writeLastLine_closure1(t1, _this));
      t2._contents += "\n";
    },
    _writeTrailingLines$1: function(lines) {
      var t1, lineNumber, t2, t3, t4, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      t1 = _this._highlighter$_span.get$end().get$line();
      if (typeof t1 !== "number")
        return t1.$add();
      lineNumber = t1 + 1;
      for (t1 = new H.ListIterator(lines, lines.get$length(lines), [H.getTypeArgumentByIndex(lines, 0)]), t2 = _this._buffer, t3 = _this._multiline; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        _this._writeSidebar$1$line(lineNumber);
        t2._contents += C.JSString_methods.$mul(" ", t3 ? 3 : 1);
        _this._writeText$1(t4);
        t2._contents += "\n";
        ++lineNumber;
      }
    },
    _writeText$1: function(text) {
      var t1, t2, t3;
      for (text.toString, t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), t2 = this._buffer; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 === 9)
          t2._contents += C.JSString_methods.$mul(" ", 4);
        else
          t2._contents += H.Primitives_stringFromCharCode(t3);
      }
    },
    _writeSidebar$2$end$line: function(end, line) {
      this._colorize$2$color(new U.Highlighter__writeSidebar_closure(this, line, end), "\x1b[34m");
    },
    _writeSidebar$1$end: function(end) {
      return this._writeSidebar$2$end$line(end, null);
    },
    _writeSidebar$1$line: function(line) {
      return this._writeSidebar$2$end$line(null, line);
    },
    _writeSidebar$0: function() {
      return this._writeSidebar$2$end$line(null, null);
    },
    _countTabs$1: function(text) {
      var t1, count;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1: function(text) {
      var t1, t2;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        if (t2 !== 32 && t2 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color: function(callback, color) {
      var t1, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this._color;
      t2 = t1 != null;
      if (t2) {
        t1 = color == null ? t1 : color;
        this._buffer._contents += t1;
      }
      callback.call$0();
      if (t2)
        this._buffer._contents += "\x1b[0m";
    },
    _colorize$1: function(callback) {
      return this._colorize$2$color(callback, null);
    }
  };
  U.Highlighter__writeFirstLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._buffer,
        t3 = t2._contents += "\u250c";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeFirstLine_closure0.prototype = {
    call$0: function() {
      return this.$this._writeText$1(this.textInside);
    },
    $signature: 2
  };
  U.Highlighter__writeFirstLine_closure1.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this._buffer;
      t1._contents += "\u250c";
      t2 = t1._contents += C.JSString_methods.$mul("\u2500", this._box_0.startColumn + 1);
      t1._contents = t2 + "^";
    },
    $signature: 1
  };
  U.Highlighter__writeFirstLine_closure2.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      this.$this._buffer._contents += C.JSString_methods.$mul("^", Math.max(t1.endColumn - t1.startColumn, 1));
      return;
    },
    $signature: 2
  };
  U.Highlighter__writeIntermediateLines_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._buffer,
        t3 = t2._contents += "\u2502";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._buffer,
        t3 = t2._contents += "\u2514";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._buffer,
        t3 = t2._contents += "\u2502";
      t2._contents = t3 + " ";
      t1._writeText$1(this.textInside);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure1.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this._buffer;
      t1._contents += "\u2514";
      t2 = t1._contents += C.JSString_methods.$mul("\u2500", this._box_0.endColumn);
      t1._contents = t2 + "^";
    },
    $signature: 1
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0: function() {
      var t1 = this.line,
        t2 = this.$this,
        t3 = t2._buffer;
      t2 = t2._paddingBeforeSidebar;
      if (t1 != null)
        t3._contents += C.JSString_methods.padRight$1(C.JSInt_methods.toString$0(t1 + 1), t2);
      else
        t3._contents += C.JSString_methods.$mul(" ", t2);
      t1 = this.end;
      t3._contents += t1 == null ? "\u2502" : t1;
    },
    $signature: 1
  };
  V.SourceLocation.prototype = {
    distance$1: function(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      var t1;
      H.interceptedTypeCheck(other, "$isSourceLocation");
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.sourceUrl) + this.offset;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = "<" + H.getRuntimeType(_this).toString$0(0) + ": " + _this.offset + " ",
        source = _this.sourceUrl;
      return t1 + (H.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    get$sourceUrl: function() {
      return this.sourceUrl;
    },
    get$offset: function(receiver) {
      return this.offset;
    },
    get$line: function() {
      return this.line;
    },
    get$column: function() {
      return this.column;
    }
  };
  D.SourceLocationMixin.prototype = {
    distance$1: function(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isSourceLocation");
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.file.url) + this.offset;
    },
    toString$0: function(_) {
      var t1 = this.offset,
        t2 = "<" + H.getRuntimeType(this).toString$0(0) + ": " + t1 + " ",
        t3 = this.file,
        source = t3.url,
        t4 = H.S(source == null ? "unknown source" : source) + ":",
        t5 = t3.getLine$1(t1);
      if (typeof t5 !== "number")
        return t5.$add();
      return t2 + (t4 + (t5 + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    $isSourceLocation: 1
  };
  V.SourceSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    }
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3: function(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t2.get$sourceUrl()) + '" and  "' + H.S(t1.get$sourceUrl()) + "\" don't match."));
      else if (t1.get$offset(t1) < t2.get$offset(t2))
        throw H.wrapException(P.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + "."));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw H.wrapException(P.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long."));
      }
    },
    get$start: function() {
      return this.start;
    },
    get$end: function() {
      return this.end;
    },
    get$text: function(receiver) {
      return this.text;
    }
  };
  G.SourceSpanException.prototype = {
    get$message: function(_) {
      return this._span_exception$_message;
    },
    toString$0: function(_) {
      var t3, highlight,
        t1 = this._span,
        t2 = t1.get$start().get$line();
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = "line " + (t2 + 1) + ", column " + (t1.get$start().get$column() + 1);
      if (t1.get$sourceUrl() != null) {
        t3 = t1.get$sourceUrl();
        t3 = t2 + (" of " + $.$get$context().prettyUri$1(t3));
        t2 = t3;
      }
      t2 += ": " + this._span_exception$_message;
      highlight = t1.highlight$1$color(null);
      t1 = highlight.length !== 0 ? t2 + "\n" + highlight : t2;
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    $isException: 1
  };
  G.SourceSpanFormatException.prototype = {
    get$source: function(_) {
      return this._span_exception$_source;
    },
    get$offset: function(_) {
      var t1 = this._span;
      t1 = Y.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl: function() {
      return this.get$start().get$sourceUrl();
    },
    get$length: function(_) {
      var t2,
        t1 = this.get$end();
      t1 = t1.get$offset(t1);
      t2 = this.get$start();
      return t1 - t2.get$offset(t2);
    },
    compareTo$1: function(_, other) {
      var result;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      result = this.get$start().compareTo$1(0, other.get$start());
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    highlight$1$color: function(color) {
      var t2, t3, t4, newSpan, _this = this,
        t1 = !!_this.$isSourceSpanWithContext;
      if (!t1 && _this.get$length(_this) === 0)
        return "";
      if (t1 && B.findLineStart(_this.get$context(), _this.get$text(_this), _this.get$start().get$column()) != null)
        t1 = _this;
      else {
        t1 = _this.get$start();
        t1 = V.SourceLocation$(t1.get$offset(t1), 0, 0, _this.get$sourceUrl());
        t2 = _this.get$end();
        t2 = t2.get$offset(t2);
        t3 = _this.get$sourceUrl();
        t4 = B.countCodeUnits(_this.get$text(_this), 10);
        t3 = X.SourceSpanWithContext$(t1, V.SourceLocation$(t2, U.Highlighter__lastLineLength(_this.get$text(_this)), t4, t3), _this.get$text(_this), _this.get$text(_this));
        t1 = t3;
      }
      newSpan = U.Highlighter__normalizeEndOfLine(U.Highlighter__normalizeTrailingNewline(U.Highlighter__normalizeNewlines(t1)));
      return new U.Highlighter(newSpan, color, newSpan.get$start().get$line() != newSpan.get$end().get$line(), J.toString$0$(newSpan.get$end().get$line()).length + 1, new P.StringBuffer("")).highlight$0();
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceSpan && this.get$start().$eq(0, other.get$start()) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode: function(_) {
      var t2,
        t1 = this.get$start();
      t1 = t1.get$hashCode(t1);
      t2 = this.get$end();
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start().toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text(_this) + '">';
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {
    get$context: function() {
      return this._context;
    }
  };
  E.StringScannerException.prototype = {
    get$source: function(_) {
      return G.SourceSpanFormatException.prototype.get$source.call(this, this);
    }
  };
  X.StringScanner.prototype = {
    get$lastMatch: function() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1: function(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(pattern, _this.string, _this._position);
      _this._lastMatchPosition = _this._position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._position = t1.get$end();
      return success;
    },
    expect$2$name: function(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null) {
        t1 = J.getInterceptor$(pattern);
        if (!!t1.$isRegExp)
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = t1.toString$0(pattern);
          t1 = H.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + H.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      }
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._position);
    },
    expect$1: function(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0: function() {
      var t1 = this._position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position(0, "expected no more input.", 0, t1);
    },
    error$3$length$position: function(_, message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        H.throwExpression(P.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        H.throwExpression(P.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        H.throwExpression(P.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new H.CodeUnits(t1);
      t4 = H.setRuntimeTypeInfo([0], [P.int]);
      t5 = new Uint32Array(H._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new Y.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        H.throwExpression(P.RangeError$("End " + end + " must not be greater than the number of characters in the file, " + sourceFile.get$length(sourceFile) + "."));
      else if (position < 0)
        H.throwExpression(P.RangeError$("Start may not be negative, was " + position + "."));
      throw H.wrapException(new E.StringScannerException(t1, message, new Y._FileSpan(sourceFile, position, end)));
    }
  };
  B.XmlGrammarDefinition.prototype = {
    attribute$0: function() {
      return this.super$XmlProductionDefinition$attribute().map$1$1(0, new B.XmlGrammarDefinition_attribute_closure(this), null);
    },
    attributeValueDouble$0: function() {
      return this.super$XmlProductionDefinition$attributeValueDouble().map$1$1(0, new B.XmlGrammarDefinition_attributeValueDouble_closure(), null);
    },
    attributeValueSingle$0: function() {
      return this.super$XmlProductionDefinition$attributeValueSingle().map$1$1(0, new B.XmlGrammarDefinition_attributeValueSingle_closure(), null);
    },
    comment$0: function() {
      return this.super$XmlProductionDefinition$comment().map$1$1(0, new B.XmlGrammarDefinition_comment_closure(this), null);
    },
    cdata$0: function() {
      return this.super$XmlProductionDefinition$cdata().map$1$1(0, new B.XmlGrammarDefinition_cdata_closure(this), null);
    },
    doctype$0: function() {
      return this.super$XmlProductionDefinition$doctype().map$1$1(0, new B.XmlGrammarDefinition_doctype_closure(this), null);
    },
    document$0: function() {
      return this.super$XmlProductionDefinition$document().map$1$1(0, new B.XmlGrammarDefinition_document_closure(this), null);
    },
    element$0: function() {
      return this.super$XmlProductionDefinition$element().map$1$1(0, new B.XmlGrammarDefinition_element_closure(this), null);
    },
    processing$0: function() {
      return this.super$XmlProductionDefinition$processing().map$1$1(0, new B.XmlGrammarDefinition_processing_closure(this), null);
    },
    qualified$0: function() {
      return new Y.CastParser(this.super$XmlProductionDefinition$qualified(), [P.String]).map$1$1(0, this.get$createQualified(), null);
    },
    characterData$0: function() {
      return new Y.CastParser(this.super$XmlProductionDefinition$characterData(), [P.String]).map$1$1(0, this.get$createText(), null);
    },
    spaceText$0: function() {
      return new Y.CastParser(this.super$XmlProductionDefinition$spaceText(), [P.String]).map$1$1(0, this.get$createText(), null);
    }
  };
  B.XmlGrammarDefinition_attribute_closure.prototype = {
    call$1: function(each) {
      var t1 = J.getInterceptor$asx(each),
        t2 = H.assertSubtypeOfRuntimeType(t1.$index(each, 0), H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 1)),
        t3 = H.stringTypeCheck(J.$index$asx(t1.$index(each, 4), 0));
      t1 = H.interceptedTypeCheck(J.$index$asx(t1.$index(each, 4), 1), "$isXmlAttributeType");
      return A.XmlAttribute$(H.interceptedTypeCheck(t2, "$isXmlName"), t3, t1);
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_attributeValueDouble_closure.prototype = {
    call$1: function(each) {
      return [J.$index$asx(each, 1), C.XmlAttributeType_1];
    },
    $signature: 21
  };
  B.XmlGrammarDefinition_attributeValueSingle_closure.prototype = {
    call$1: function(each) {
      return [J.$index$asx(each, 1), C.XmlAttributeType_0];
    },
    $signature: 21
  };
  B.XmlGrammarDefinition_comment_closure.prototype = {
    call$1: function(each) {
      var t1 = H.stringTypeCheck(J.$index$asx(each, 1)),
        t2 = new B.XmlComment(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_cdata_closure.prototype = {
    call$1: function(each) {
      var t1 = H.stringTypeCheck(J.$index$asx(each, 1)),
        t2 = new G.XmlCDATA(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_doctype_closure.prototype = {
    call$1: function(each) {
      var t1 = H.stringTypeCheck(J.$index$asx(each, 2)),
        t2 = new S.XmlDoctype(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_document_closure.prototype = {
    call$1: function(each) {
      var t2, nodes = [],
        t1 = J.getInterceptor$asx(each);
      C.JSArray_methods.addAll$1(nodes, H.listSuperNativeTypeCheck(t1.$index(each, 0), "$isIterable"));
      if (t1.$index(each, 1) != null)
        nodes.push(t1.$index(each, 1));
      C.JSArray_methods.addAll$1(nodes, H.listSuperNativeTypeCheck(t1.$index(each, 2), "$isIterable"));
      nodes.push(t1.$index(each, 3));
      C.JSArray_methods.addAll$1(nodes, H.listSuperNativeTypeCheck(t1.$index(each, 4), "$isIterable"));
      t1 = V.XmlNode;
      t2 = H.assertSubtype(new H.CastList(nodes, [null, H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0)]), "$isIterable", [t1], "$asIterable");
      t1 = new K.XmlDocument(new X.XmlNodeList(C.Set_KYrob, null, H.setRuntimeTypeInfo([], [t1]), [t1]), null);
      t1.XmlParent$2(C.Set_KYrob, t2);
      return t1;
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_element_closure.prototype = {
    call$1: function(list) {
      var t3, attributes, children, token,
        t1 = J.getInterceptor$asx(list),
        t2 = this.$this,
        $name = H.assertSubtypeOfRuntimeType(t1.$index(list, 1), H.getRuntimeTypeArgument(t2, "XmlGrammarDefinition", 1));
      t2 = H.getRuntimeTypeArgument(t2, "XmlGrammarDefinition", 0);
      t3 = [null, t2];
      attributes = new H.CastList(H.listTypeCheck(t1.$index(list, 2)), t3);
      if (J.$eq$(t1.$index(list, 4), "/>")) {
        t1 = H.setRuntimeTypeInfo([], [t2]);
        H.interceptedTypeCheck($name, "$isXmlName");
        t2 = [V.XmlNode];
        H.assertSubtype(attributes, "$isIterable", t2, "$asIterable");
        H.assertSubtype(t1, "$isIterable", t2, "$asIterable");
        return U.XmlElement$($name, P.List_List$from(attributes, true, A.XmlAttribute), t1, true);
      } else if (J.$eq$(t1.$index(list, 1), J.$index$asx(t1.$index(list, 4), 3))) {
        children = new H.CastList(H.listTypeCheck(J.$index$asx(t1.$index(list, 4), 1)), t3);
        t1 = children.get$isEmpty(children);
        H.interceptedTypeCheck($name, "$isXmlName");
        t2 = [V.XmlNode];
        H.assertSubtype(attributes, "$isIterable", t2, "$asIterable");
        H.assertSubtype(children, "$isIterable", t2, "$asIterable");
        return U.XmlElement$($name, P.List_List$from(attributes, true, A.XmlAttribute), children, !t1);
      } else {
        token = H.interceptedTypeCheck(J.$index$asx(t1.$index(list, 4), 2), "$isToken");
        t1 = "Expected </" + H.S(t1.$index(list, 1)) + ">, but found </" + H.S(J.$index$asx(t1.$index(list, 4), 3)) + ">";
        t2 = token.buffer;
        t3 = token.start;
        throw H.wrapException(N.XmlParserException$(t1, K.Token_lineAndColumnOf(t2, t3)[0], K.Token_lineAndColumnOf(t2, t3)[1]));
      }
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  B.XmlGrammarDefinition_processing_closure.prototype = {
    call$1: function(each) {
      var t1 = J.getInterceptor$asx(each),
        t2 = H.stringTypeCheck(t1.$index(each, 1));
      t1 = H.stringTypeCheck(t1.$index(each, 2));
      t2 = new S.XmlProcessing(t2, null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    $signature: function() {
      return {func: 1, ret: H.getRuntimeTypeArgument(this.$this, "XmlGrammarDefinition", 0), args: [,]};
    }
  };
  M.XmlDescendantsIterable.prototype = {
    get$iterator: function(_) {
      var t1 = new M.XmlDescendantsIterator(H.setRuntimeTypeInfo([], [V.XmlNode]));
      t1.push$1(this.start);
      return t1;
    },
    $asIterable: function() {
      return [V.XmlNode];
    }
  };
  M.XmlDescendantsIterator.prototype = {
    push$1: function(node) {
      var t1 = this.todo;
      C.JSArray_methods.addAll$1(t1, J.get$reversed$ax(node.get$children()));
      C.JSArray_methods.addAll$1(t1, J.get$reversed$ax(node.get$attributes()));
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.todo,
        t2 = t1.length;
      if (t2 === 0) {
        _this.current = null;
        return false;
      } else {
        if (0 >= t2)
          return H.ioore(t1, -1);
        t1 = H.interceptedTypeCheck(t1.pop(), "$isXmlNode");
        _this.current = t1;
        _this.push$1(t1);
        return true;
      }
    },
    $asIterator: function() {
      return [V.XmlNode];
    },
    get$current: function() {
      return this.current;
    }
  };
  A.XmlAttribute.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_1;
    },
    accept$1: function(visitor) {
      return visitor.visitAttribute$1(this);
    }
  };
  G.XmlCDATA.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_3;
    },
    accept$1: function(visitor) {
      return visitor.visitCDATA$1(this);
    }
  };
  B.XmlComment.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_5;
    },
    accept$1: function(visitor) {
      return visitor.visitComment$1(this);
    }
  };
  V.XmlData.prototype = {
    get$text: function(_) {
      return this._text;
    }
  };
  S.XmlDoctype.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_8;
    },
    accept$1: function(visitor) {
      return visitor.visitDoctype$1(this);
    }
  };
  K.XmlDocument.prototype = {
    get$text: function(_) {
      return;
    },
    get$nodeType: function(_) {
      return C.XmlNodeType_6;
    },
    accept$1: function(visitor) {
      return visitor.visitDocument$1(this);
    }
  };
  U.XmlElement.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_0;
    },
    accept$1: function(visitor) {
      return visitor.visitElement$1(this);
    },
    get$attributes: function() {
      return this.attributes;
    }
  };
  V.XmlNode.prototype = {
    get$children: function() {
      return C.List_empty2;
    },
    get$attributes: function() {
      return C.List_empty1;
    },
    get$text: function(_) {
      var t1 = V.XmlNode,
        t2 = P.String;
      return new H.MappedIterable(new H.WhereIterable(new M.XmlDescendantsIterable(this), H.functionTypeCheck(new V.XmlNode_text_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]), H.functionTypeCheck(new V.XmlNode_text_closure0(), {func: 1, ret: t2, args: [t1]}), [t1, t2]).join$0(0);
    }
  };
  V.XmlNode_text_closure.prototype = {
    call$1: function(node) {
      var t1 = J.getInterceptor$(H.interceptedTypeCheck(node, "$isXmlNode"));
      return !!t1.$isXmlText || !!t1.$isXmlCDATA;
    },
    $signature: 9
  };
  V.XmlNode_text_closure0.prototype = {
    call$1: function(node) {
      H.interceptedTypeCheck(node, "$isXmlNode");
      return node.get$text(node);
    },
    $signature: 50
  };
  V._XmlNode_Object_XmlVisitable.prototype = {};
  V._XmlNode_Object_XmlVisitable_XmlWritable.prototype = {};
  V._XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned.prototype = {};
  R.XmlParent.prototype = {
    XmlParent$2: function(supportedChildrenTypes, childrenIterable) {
      var t1 = this.children;
      if (t1.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$("Node already has a parent, copy or remove it first: " + t1.toString$0(0)));
      t1.XmlOwned__parent = this;
      t1.addAll$1(0, childrenIterable);
    },
    get$children: function() {
      return this.children;
    }
  };
  S.XmlProcessing.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_4;
    },
    accept$1: function(visitor) {
      return visitor.visitProcessing$1(this);
    }
  };
  V.XmlText.prototype = {
    get$nodeType: function(_) {
      return C.XmlNodeType_2;
    },
    accept$1: function(visitor) {
      return visitor.visitText$1(this);
    }
  };
  V.XmlParserDefinition.prototype = {
    createQualified$1: function($name) {
      return L.XmlName_XmlName$fromString(H.stringTypeCheck($name));
    },
    createText$1: function(text) {
      var t1;
      H.stringTypeCheck(text);
      t1 = new V.XmlText(null);
      if (text == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t1._text = text;
      return t1;
    },
    $asXmlGrammarDefinition: function() {
      return [V.XmlNode, L.XmlName];
    }
  };
  X.XmlProductionDefinition.prototype = {
    start$0: function() {
      var t1 = this.ref$1(this.get$document()),
        t2 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([t1, new X.EndOfInputParser("end of input expected")], [t2]), false, t2)).pick$1$1(0, H.getRuntimeTypeArgument(t1, "Parser", 0));
    },
    attribute$0: function() {
      var _this = this,
        t1 = _this.get$spaceOptional(),
        t2 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$qualified()), _this.ref$1(t1)], [t2]), false, t2)).seq$1(D.char("=")).seq$1(_this.ref$1(t1)).seq$1(_this.ref$1(_this.get$attributeValue()));
    },
    attributeValue$0: function() {
      var _this = this,
        t1 = [Q.Parser,,];
      t1 = P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$attributeValueDouble()), _this.ref$1(_this.get$attributeValueSingle())], [t1]), false, t1);
      return new Y.ChoiceParser(t1);
    },
    attributeValueDouble$0: function() {
      var t1 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([D.char('"'), new T.XmlCharacterDataParser('"', 34, 0)], [t1]), false, t1)).seq$1(D.char('"'));
    },
    attributeValueSingle$0: function() {
      var t1 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([D.char("'"), new T.XmlCharacterDataParser("'", 39, 0)], [t1]), false, t1)).seq$1(D.char("'"));
    },
    attributes$0: function() {
      var _this = this,
        t1 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$space()), _this.ref$1(_this.get$attribute())], [t1]), false, t1)).pick$1$1(1, null).repeat$2(0, 0, -1);
    },
    comment$0: function() {
      var t1 = Q.string("<!--"),
        t2 = new N.AnyParser("input expected"),
        t3 = P.String,
        t4 = new E.LazyRepeatingParser(Q.string("-->"), 0, -1, t2, [t3]);
      t4.RepeatingParser$3(t2, 0, -1, t3);
      t3 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([t1, new O.FlattenParser("Expected comment content", t4)], [t3]), false, t3)).seq$1(Q.string("-->"));
    },
    cdata$0: function() {
      var t1 = Q.string("<![CDATA["),
        t2 = new N.AnyParser("input expected"),
        t3 = P.String,
        t4 = new E.LazyRepeatingParser(Q.string("]]>"), 0, -1, t2, [t3]);
      t4.RepeatingParser$3(t2, 0, -1, t3);
      t3 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([t1, new O.FlattenParser("Expected CDATA content", t4)], [t3]), false, t3)).seq$1(Q.string("]]>"));
    },
    content$0: function() {
      var _this = this,
        t1 = [Q.Parser,,];
      t1 = P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$characterData()), _this.ref$1(_this.get$element())], [t1]), false, t1);
      return new Y.ChoiceParser(t1).or$1(_this.ref$1(_this.get$processing())).or$1(_this.ref$1(_this.get$comment())).or$1(_this.ref$1(_this.get$cdata())).repeat$2(0, 0, -1);
    },
    doctype$0: function() {
      var _this = this,
        _s14_ = "input expected",
        t1 = _this.get$space(),
        t2 = [Q.Parser,,],
        t3 = [t2],
        t4 = P.List_List$from(H.setRuntimeTypeInfo([Q.string("<!DOCTYPE"), _this.ref$1(t1)], t3), false, t2),
        t5 = P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$nameToken()), _this.ref$1(_this.get$attributeValue())], t3), false, t2),
        t6 = new N.AnyParser(_s14_),
        t7 = P.String,
        t8 = [t7],
        t9 = new E.LazyRepeatingParser(D.char("["), 0, -1, t6, t8);
      t9.RepeatingParser$3(t6, 0, -1, t7);
      t2 = P.List_List$from(H.setRuntimeTypeInfo([t9, D.char("[")], t3), false, t2);
      t3 = new N.AnyParser(_s14_);
      t8 = new E.LazyRepeatingParser(D.char("]"), 0, -1, t3, t8);
      t8.RepeatingParser$3(t3, 0, -1, t7);
      return new L.SequenceParser(t4).seq$1(new O.FlattenParser("Expected doctype content", new Y.ChoiceParser(t5).or$1(new L.SequenceParser(t2).seq$1(t8).seq$1(D.char("]"))).separatedBy$1$1(_this.ref$1(t1), null))).seq$1(_this.ref$1(_this.get$spaceOptional())).seq$1(D.char(">"));
    },
    document$0: function() {
      var _this = this,
        t1 = _this.get$misc(),
        t2 = _this.ref$1(t1),
        t3 = _this.ref$1(_this.get$doctype()),
        t4 = H.getRuntimeTypeArgument(t3, "Parser", 0),
        t5 = [Q.Parser,,];
      return new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([t2, new K.OptionalParser(H.assertSubtypeOfRuntimeType(null, t4), t3, [t4])], [t5]), false, t5)).seq$1(_this.ref$1(t1)).seq$1(_this.ref$1(_this.get$element())).seq$1(_this.ref$1(t1));
    },
    element$0: function() {
      var _this = this,
        t1 = _this.get$qualified(),
        t2 = [Q.Parser,,],
        t3 = [t2],
        t4 = _this.get$spaceOptional(),
        t5 = new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([D.char("<"), _this.ref$1(t1)], t3), false, t2)).seq$1(_this.ref$1(_this.get$attributes())).seq$1(_this.ref$1(t4)),
        t6 = Q.string("/>"),
        t7 = P.List_List$from(H.setRuntimeTypeInfo([D.char(">"), _this.ref$1(_this.get$content())], t3), false, t2),
        t8 = Q.string("</");
      t2 = P.List_List$from(H.setRuntimeTypeInfo([t6, new L.SequenceParser(t7).seq$1(new S.TokenParser(t8, [H.getRuntimeTypeArgument(t8, "Parser", 0)])).seq$1(_this.ref$1(t1)).seq$1(_this.ref$1(t4)).seq$1(D.char(">"))], t3), false, t2);
      return t5.seq$1(new Y.ChoiceParser(t2));
    },
    processing$0: function() {
      var _this = this,
        t1 = [Q.Parser,,],
        t2 = [t1],
        t3 = P.List_List$from(H.setRuntimeTypeInfo([Q.string("<?"), _this.ref$1(_this.get$nameToken())], t2), false, t1),
        t4 = _this.ref$1(_this.get$space()),
        t5 = new N.AnyParser("input expected"),
        t6 = P.String,
        t7 = new E.LazyRepeatingParser(Q.string("?>"), 0, -1, t5, [t6]);
      t7.RepeatingParser$3(t5, 0, -1, t6);
      t1 = new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([t4, new O.FlattenParser("Expected processing instruction content", t7)], t2), false, t1)).pick$1$1(1, null);
      t2 = H.getRuntimeTypeArgument(t1, "Parser", 0);
      return new L.SequenceParser(t3).seq$1(new K.OptionalParser(H.assertSubtypeOfRuntimeType("", t2), t1, [t2])).seq$1(Q.string("?>"));
    },
    qualified$0: function() {
      return this.ref$1(this.get$nameToken());
    },
    characterData$0: function() {
      return new T.XmlCharacterDataParser("<", 60, 1);
    },
    misc$0: function() {
      var _this = this,
        t1 = [Q.Parser,,];
      t1 = P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$spaceText()), _this.ref$1(_this.get$comment())], [t1]), false, t1);
      return new Y.ChoiceParser(t1).or$1(_this.ref$1(_this.get$processing())).repeat$2(0, 0, -1);
    },
    space$0: function() {
      return new D.CharacterParser(C.C_WhitespaceCharPredicate, "whitespace expected").repeat$2(0, 1, -1);
    },
    spaceText$0: function() {
      return new O.FlattenParser("Expected whitespace", this.ref$1(this.get$space()));
    },
    spaceOptional$0: function() {
      return new D.CharacterParser(C.C_WhitespaceCharPredicate, "whitespace expected").repeat$2(0, 0, -1);
    },
    nameToken$0: function() {
      var _this = this,
        t1 = [Q.Parser,,];
      return new O.FlattenParser("Expected name", new L.SequenceParser(P.List_List$from(H.setRuntimeTypeInfo([_this.ref$1(_this.get$nameStartChar()), _this.ref$1(_this.get$nameChar()).repeat$2(0, 0, -1)], [t1]), false, t1)));
    },
    nameStartChar$0: function() {
      return D.pattern(":A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2c00-\u2fef\u3001\ud7ff\uf900-\ufdcf\ufdf0-\ufffd");
    },
    nameChar$0: function() {
      return D.pattern("-.0-9\xb7\u0300-\u036f\u203f-\u2040:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2c00-\u2fef\u3001\ud7ff\uf900-\ufdcf\ufdf0-\ufffd");
    }
  };
  G.XmlAttributeType.prototype = {
    toString$0: function(_) {
      return this._attribute_type$_name;
    }
  };
  T.closure7.prototype = {
    call$1: function(value) {
      return H.Primitives_stringFromCharCode(P.int_parse(H.stringTypeCheck(value), null, 16));
    },
    $signature: 3
  };
  T.closure6.prototype = {
    call$1: function(value) {
      return H.Primitives_stringFromCharCode(P.int_parse(H.stringTypeCheck(value), null, null));
    },
    $signature: 3
  };
  T.closure5.prototype = {
    call$1: function(value) {
      return C.Map_WngUw.$index(0, H.stringTypeCheck(value));
    },
    $signature: 3
  };
  T.XmlCharacterDataParser.prototype = {
    parseOn$1: function(context) {
      var t1, t2, start, value, t3, result,
        input = context.buffer,
        $length = input.length,
        output = new P.StringBuffer(""),
        position = context.position;
      for (t1 = this._stopperCode, t2 = [P.Null], start = position; position < $length;) {
        value = C.JSString_methods.codeUnitAt$1(input, position);
        if (value === t1)
          break;
        else if (value === 38) {
          t3 = $.$get$_entity();
          result = t3.parseOn$1(new E.Success(null, input, position, t2));
          if (result.get$isSuccess() && result.get$value() != null) {
            t3 = output._contents += C.JSString_methods.substring$2(input, start, position);
            output._contents = t3 + H.S(result.get$value());
            position = result.position;
            start = position;
          } else
            ++position;
        } else
          ++position;
      }
      t1 = output._contents += C.JSString_methods.substring$2(input, start, position);
      t2 = P.String;
      return t1.length < this._minLength ? context.failure$1$1("Unable to parse chracter data.", t2) : context.success$1$2(t1.charCodeAt(0) == 0 ? t1 : t1, position, t2);
    },
    fastParseOn$2: function(buffer, position) {
      var t1, position0,
        $length = buffer.length;
      for (t1 = this._stopperCode, position0 = position; position0 < $length;)
        if (C.JSString_methods.codeUnitAt$1(buffer, position0) === t1)
          break;
        else
          ++position0;
      return position0 - position < this._minLength ? -1 : position0;
    },
    get$children: function() {
      return H.setRuntimeTypeInfo([$.$get$_entity()], [[Q.Parser,,]]);
    },
    hasEqualProperties$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isXmlCharacterDataParser");
      this.super$Parser$hasEqualProperties(other);
      t1 = this._stopper === other._stopper && this._minLength === other._minLength;
      return t1;
    },
    $asParser: function() {
      return [P.String];
    }
  };
  T.closure.prototype = {
    call$1: function(match) {
      switch (match.group$1(0)) {
        case "'":
          return "&apos;";
        case "&":
          return "&amp;";
        case "<":
          return "&lt;";
        case "\n":
          return "&#xA;";
        case "\r":
          return "&#xD;";
        case "\t":
          return "&#x9;";
        default:
          throw H.wrapException(P.AssertionError$(null));
      }
    },
    $signature: 4
  };
  T.closure0.prototype = {
    call$1: function(match) {
      switch (match.group$1(0)) {
        case '"':
          return "&quot;";
        case "&":
          return "&amp;";
        case "<":
          return "&lt;";
        case "\n":
          return "&#xA;";
        case "\r":
          return "&#xD;";
        case "\t":
          return "&#x9;";
        default:
          throw H.wrapException(P.AssertionError$(null));
      }
    },
    $signature: 4
  };
  N.XmlException.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 == null ? this.super$Object$toString(0) : t1;
    },
    $isException: 1
  };
  N.XmlParserException.prototype = {
    toString$0: function(_) {
      return this.super$XmlException$toString(0) + " at " + this.line + ":" + this.column;
    }
  };
  N.XmlNodeTypeException.prototype = {};
  N.XmlParentException.prototype = {};
  L.XmlName.prototype = {
    accept$1: function(visitor) {
      return visitor.visitName$1(this);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof L.XmlName && other.get$local() === this.get$local() && other.get$namespaceUri() == this.get$namespaceUri();
    },
    get$hashCode: function(_) {
      return C.JSString_methods.get$hashCode(this.get$qualified());
    }
  };
  L._XmlName_Object_XmlVisitable.prototype = {};
  L._XmlName_Object_XmlVisitable_XmlWritable.prototype = {};
  L._XmlName_Object_XmlVisitable_XmlWritable_XmlOwned.prototype = {};
  X.XmlNodeList.prototype = {
    $indexSet: function(_, index, value) {
      var t1, _this = this,
        _s52_ = "Node already has a parent, copy or remove it first: ";
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      if (value == null)
        H.throwExpression(N.XmlNodeTypeException$("Node must not be null."));
      P.RangeError_checkValidIndex(index, _this);
      N.XmlNodeTypeException_checkValidType(value, _this.validNodeTypes);
      if (value.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$(_s52_ + H.S(value)));
      C.JSArray_methods.$index(H.assertSubtype(_this._base, "$isList", _this.$ti, "$asList"), index).XmlOwned__parent = null;
      _this.super$DelegatingList$$indexSet(0, index, value);
      t1 = _this.XmlOwned__parent;
      if (value.XmlOwned__parent != null)
        H.throwExpression(N.XmlParentException$(_s52_ + H.S(value)));
      value.XmlOwned__parent = t1;
    },
    addAll$1: function(_, iterable) {
      var t1, _i, node, t2, _this = this,
        expanded = _this._expandNodes$1(H.assertSubtype(iterable, "$isIterable", _this.$ti, "$asIterable"));
      _this.super$DelegatingList$addAll(0, expanded);
      for (t1 = expanded.length, _i = 0; _i < expanded.length; expanded.length === t1 || (0, H.throwConcurrentModificationError)(expanded), ++_i) {
        node = expanded[_i];
        t2 = _this.XmlOwned__parent;
        node.toString;
        if (node.XmlOwned__parent != null)
          H.throwExpression(N.XmlParentException$("Node already has a parent, copy or remove it first: " + H.S(node)));
        node.XmlOwned__parent = t2;
      }
    },
    _expandFragment$1: function(fragment) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return J.map$1$1$ax(H.assertSubtypeOfRuntimeType(fragment, t1).get$children(), new X.XmlNodeList__expandFragment_closure(this), t1);
    },
    _expandNodes$1: function(iterable) {
      var expanded, t2, node,
        t1 = this.$ti;
      H.assertSubtype(iterable, "$isIterable", t1, "$asIterable");
      expanded = H.setRuntimeTypeInfo([], t1);
      for (t1 = J.get$iterator$ax(iterable), t2 = this.validNodeTypes; t1.moveNext$0();) {
        node = t1.get$current();
        if (node == null)
          H.throwExpression(N.XmlNodeTypeException$("Node must not be null."));
        if (node.get$nodeType(node) === C.XmlNodeType_7)
          C.JSArray_methods.addAll$1(expanded, this._expandFragment$1(node));
        else {
          if (!t2._map.containsKey$1(node.get$nodeType(node)))
            H.throwExpression(N.XmlNodeTypeException$("Expected node of type: " + t2.toString$0(0)));
          if (node.XmlOwned__parent != null)
            H.throwExpression(N.XmlParentException$("Node already has a parent, copy or remove it first: " + node.toString$0(0)));
          C.JSArray_methods.add$1(expanded, node);
        }
      }
      return expanded;
    }
  };
  X.XmlNodeList__expandFragment_closure.prototype = {
    call$1: function(node) {
      var t1, t2;
      H.interceptedTypeCheck(node, "$isXmlNode");
      t1 = this.$this;
      N.XmlNodeTypeException_checkValidType(node, t1.validNodeTypes);
      node.toString;
      t2 = $.$get$XmlTransformer_defaultInstance();
      t2.toString;
      return H.assertSubtypeOfRuntimeType(node.accept$1(t2), H.getTypeArgumentByIndex(t1, 0));
    },
    $signature: function() {
      return {func: 1, ret: H.getTypeArgumentByIndex(this.$this, 0), args: [V.XmlNode]};
    }
  };
  X._XmlNodeList_DelegatingList_XmlOwned.prototype = {};
  E.XmlNodeType.prototype = {
    toString$0: function(_) {
      return this._node_type$_name;
    }
  };
  L.XmlOwned.prototype = {};
  A.XmlPrefixName.prototype = {
    get$namespaceUri: function() {
      var node, t1, t2, t3, t4;
      for (node = this.XmlOwned__parent, t1 = this.prefix; node != null; node = node.XmlOwned__parent)
        for (t2 = J.get$iterator$ax(node.get$attributes()); t2.moveNext$0();) {
          t3 = t2._current;
          t4 = t3.name;
          if (t4.get$prefix() === "xmlns" && t4.get$local() === t1)
            return t3._value;
        }
      return;
    },
    get$prefix: function() {
      return this.prefix;
    },
    get$local: function() {
      return this.local;
    },
    get$qualified: function() {
      return this.qualified;
    }
  };
  U.XmlSimpleName.prototype = {
    get$prefix: function() {
      return;
    },
    get$qualified: function() {
      return this.local;
    },
    get$namespaceUri: function() {
      var node, t1, t2, t3;
      for (node = this.XmlOwned__parent; node != null; node = node.XmlOwned__parent)
        for (t1 = J.get$iterator$ax(node.get$attributes()); t1.moveNext$0();) {
          t2 = t1._current;
          t3 = t2.name;
          if (t3.get$prefix() == null && t3.get$local() === "xmlns")
            return t2._value;
        }
      return;
    },
    get$local: function() {
      return this.local;
    }
  };
  A.XmlWritable.prototype = {
    toString$0: function(_) {
      var t1,
        buffer = new P.StringBuffer("");
      H.assertSubtypeOfRuntimeType(this.accept$1(new K.XmlWriter(buffer)), null);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  Z.XmlTransformer.prototype = {
    visitAttribute$1: function(node) {
      return A.XmlAttribute$(node.name.accept$1(this), node._value, node.attributeType);
    },
    visitCDATA$1: function(node) {
      var t1 = node._text,
        t2 = new G.XmlCDATA(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    visitComment$1: function(node) {
      var t1 = node._text,
        t2 = new B.XmlComment(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    visitDoctype$1: function(node) {
      var t1 = node._text,
        t2 = new S.XmlDoctype(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    visitDocument$1: function(node) {
      var t5,
        t1 = node.children,
        t2 = V.XmlNode,
        t3 = t1._base,
        t4 = H.getTypeArgumentByIndex(t3, 0);
      t1 = H.functionTypeCheck(H.functionTypeCheck(H.instantiate1(this.get$visit(), t2), {func: 1, ret: t2, args: [H.getTypeArgumentByIndex(t1, 0)]}), {func: 1, ret: t2, args: [t4]});
      t5 = new K.XmlDocument(new X.XmlNodeList(C.Set_KYrob, null, H.setRuntimeTypeInfo([], [t2]), [t2]), null);
      t5.XmlParent$2(C.Set_KYrob, new H.MappedListIterable(t3, t1, [t4, t2]));
      return t5;
    },
    visitElement$1: function(node) {
      var t1 = node.attributes,
        t2 = this.get$visit(),
        t3 = A.XmlAttribute,
        t4 = t1._base,
        t5 = H.getTypeArgumentByIndex(t4, 0),
        t6 = node.children,
        t7 = V.XmlNode,
        t8 = t6._base,
        t9 = H.getTypeArgumentByIndex(t8, 0);
      return U.XmlElement$(node.name.accept$1(this), new H.MappedListIterable(t4, H.functionTypeCheck(H.functionTypeCheck(H.instantiate1(t2, t3), {func: 1, ret: t3, args: [H.getTypeArgumentByIndex(t1, 0)]}), {func: 1, ret: t3, args: [t5]}), [t5, t3]), new H.MappedListIterable(t8, H.functionTypeCheck(H.functionTypeCheck(H.instantiate1(t2, t7), {func: 1, ret: t7, args: [H.getTypeArgumentByIndex(t6, 0)]}), {func: 1, ret: t7, args: [t9]}), [t9, t7]), node.isSelfClosing);
    },
    visitName$1: function($name) {
      return L.XmlName_XmlName$fromString($name.get$qualified());
    },
    visitProcessing$1: function(node) {
      var t1 = node._text,
        t2 = new S.XmlProcessing(node.target, null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    },
    visitText$1: function(node) {
      var t1 = node._text,
        t2 = new V.XmlText(null);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("text"));
      t2._text = t1;
      return t2;
    }
  };
  Z._XmlTransformer_Object_XmlVisitor.prototype = {};
  X.XmlVisitable.prototype = {};
  K.XmlVisitor.prototype = {
    visit$1$1: function(visitable, $T) {
      return H.assertSubtypeOfRuntimeType(H.interceptedTypeCheck(visitable, "$isXmlVisitable").accept$1(this), $T);
    },
    visit$1: function(visitable) {
      return this.visit$1$1(visitable, null);
    },
    visitName$1: function($name) {
      return;
    },
    visitAttribute$1: function(node) {
      return;
    },
    visitDocument$1: function(node) {
      return;
    },
    visitElement$1: function(node) {
      return;
    },
    visitCDATA$1: function(node) {
      return;
    },
    visitComment$1: function(node) {
      return;
    },
    visitDoctype$1: function(node) {
      return;
    },
    visitProcessing$1: function(node) {
      return;
    },
    visitText$1: function(node) {
      return;
    }
  };
  K.XmlWriter.prototype = {
    visitAttribute$1: function(node) {
      var t1, t2, t3, quote, t4, t5;
      H.assertSubtypeOfRuntimeType(node.name.accept$1(this), null);
      t1 = this.buffer;
      t1._contents += "=";
      t2 = node._value;
      t3 = node.attributeType;
      quote = $.attributeQuote.$index(0, t3);
      t4 = H.S(quote);
      t5 = $.$get$_attributePattern().$index(0, t3);
      t3 = $.$get$_attributeReplace().$index(0, t3);
      t2.toString;
      t3 = t4 + J.splitMapJoin$2$onMatch$s(t2, t5, H.functionTypeCheck(t3, {func: 1, ret: P.String, args: [P.Match]})) + H.S(quote);
      t1._contents += t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    visitCDATA$1: function(node) {
      var t2,
        t1 = this.buffer;
      t1._contents += "<![CDATA[";
      t2 = t1._contents += H.S(node._text);
      t1._contents = t2 + "]]>";
    },
    visitComment$1: function(node) {
      var t2,
        t1 = this.buffer;
      t1._contents += "<!--";
      t2 = t1._contents += H.S(node._text);
      t1._contents = t2 + "-->";
    },
    visitDoctype$1: function(node) {
      var t1 = this.buffer,
        t2 = t1._contents += "<!DOCTYPE";
      t1._contents = t2 + " ";
      t2 = t1._contents += H.S(node._text);
      t1._contents = t2 + ">";
    },
    visitDocument$1: function(node) {
      var t1 = node.children;
      C.JSArray_methods.forEach$1(t1._base, H.functionTypeCheck(H.instantiate1(this.get$visit(), null), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t1, 0)]}));
    },
    visitElement$1: function(node) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.buffer;
      t1._contents += "<";
      t2 = node.name;
      H.assertSubtypeOfRuntimeType(t2.accept$1(_this), null);
      _this.writeAttributes$1(node);
      t3 = node.children;
      t4 = t3._base;
      t5 = t4.length === 0 && node.isSelfClosing;
      t6 = t1._contents;
      if (t5)
        t1._contents = t6 + "/>";
      else {
        t1._contents = t6 + ">";
        C.JSArray_methods.forEach$1(t4, H.functionTypeCheck(H.instantiate1(_this.get$visit(), null), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t3, 0)]}));
        t1._contents += "</";
        H.assertSubtypeOfRuntimeType(t2.accept$1(_this), null);
        t1._contents += ">";
      }
    },
    visitName$1: function($name) {
      this.buffer._contents += $name.get$qualified();
    },
    visitProcessing$1: function(node) {
      var t2, t3,
        t1 = this.buffer;
      t1._contents += "<?";
      t2 = t1._contents += H.S(node.target);
      t3 = node._text;
      if (t3.length !== 0) {
        t1._contents = t2 + " ";
        t2 = t1._contents += H.S(t3);
      }
      t1._contents = t2 + "?>";
    },
    visitText$1: function(node) {
      var t1 = node._text,
        t2 = $.$get$_textPattern();
      t1.toString;
      this.buffer._contents += J.splitMapJoin$2$onMatch$s(t1, t2, H.functionTypeCheck(T.entities___textReplace$closure(), {func: 1, ret: P.String, args: [P.Match]}));
    },
    writeAttributes$1: function(node) {
      var t1, t2, t3;
      for (t1 = node.attributes._base, t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]), t2 = this.buffer; t1.moveNext$0();) {
        t3 = t1._current;
        t2._contents += " ";
        H.assertSubtypeOfRuntimeType(t3.accept$1(this), null);
      }
    }
  };
  K._XmlWriter_Object_XmlVisitor.prototype = {};
  G.ParseException.prototype = {
    toString$0: function(_) {
      return "ParseException: " + this.message;
    },
    $isException: 1
  };
  Q.VideoRequiresPurchaseException.prototype = {
    toString$0: function(_) {
      return "Video [" + this.videoId + "] requires purchase and cannot be processed.";
    },
    $isException: 1
  };
  R.VideoUnavailableException.prototype = {
    toString$0: function(_) {
      return "Video [" + this.videoId + "] is not available and cannot be processed. Code: " + H.S(this.code) + ". Reason: " + H.S(this.reason) + ".";
    },
    $isException: 1
  };
  Y.BaseCipherOperation.prototype = {};
  N.ReverseCipherOperation.prototype = {
    decipher$1: function(input) {
      var t1 = H.setRuntimeTypeInfo(input.split(""), [P.String]);
      return new H.ReversedListIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]).join$1(0, "");
    },
    $isBaseCipherOperation: 1
  };
  U.SliceCipherOperation.prototype = {
    decipher$1: function(input) {
      return C.JSString_methods.substring$1(input, this._slice_cipher_operation$_index);
    },
    $isBaseCipherOperation: 1
  };
  R.SwapCipherOperation.prototype = {
    decipher$1: function(input) {
      var splitString = H.setRuntimeTypeInfo(input.split(""), [P.String]),
        t1 = this._swap_cipher_operation$_index;
      C.JSArray_methods.$indexSet(splitString, 0, C.JSString_methods.$index(input, t1));
      if (0 >= input.length)
        return H.ioore(input, 0);
      C.JSArray_methods.$indexSet(splitString, t1, input[0]);
      return C.JSArray_methods.join$0(splitString);
    },
    $isBaseCipherOperation: 1
  };
  D.ItagDescriptor.prototype = {};
  D.AdaptiveStreamInfoParser.prototype = {
    _adaptive_stream_info_parser$_getInt$1: function(string) {
      if (string == null)
        return;
      return H.Primitives_parseInt(string, null);
    }
  };
  U.DashManifestParser.prototype = {
    getStreamInfo$0: function() {
      var t2, streamInfosXml, builtList,
        t1 = this._dash_manifest_parser$_root;
      t1.toString;
      t2 = V.XmlNode;
      streamInfosXml = P.List_List$from(new H.WhereIterable(new M.XmlDescendantsIterable(t1), H.functionTypeCheck(new U.DashManifestParser_getStreamInfo_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      builtList = H.setRuntimeTypeInfo([], [L.StreamInfoParser]);
      C.JSArray_methods.forEach$1(streamInfosXml, new U.DashManifestParser_getStreamInfo_closure0(builtList));
      return builtList;
    }
  };
  U.DashManifestParser_getStreamInfo_closure.prototype = {
    call$1: function(x) {
      H.interceptedTypeCheck(x, "$isXmlNode");
      return x instanceof U.XmlElement && x.name.get$local() === "Representation";
    },
    $signature: 9
  };
  U.DashManifestParser_getStreamInfo_closure0.prototype = {
    call$1: function(x) {
      C.JSArray_methods.add$1(this.builtList, new L.StreamInfoParser(H.interceptedTypeCheck(H.interceptedTypeCheck(x, "$isXmlNode"), "$isXmlElement")));
    },
    $signature: 54
  };
  N.MuxedStreamInfoParser.prototype = {
    _getInt$1: function(string) {
      if (string == null)
        return;
      return H.Primitives_parseInt(string, null);
    }
  };
  Y.PlayerSourceParser.prototype = {
    parseCipherOperations$0: function() {
      var entryPoint, entryPointBody, entryPointLines, operations, charSwapFuncName, sliceFuncName, reverseFuncName, i, calledFuncName, _null = null,
        _s12_ = "\\w+\\.(\\w+)\\(",
        _s13_ = "\\(\\w+,(\\d+)\\)",
        t1 = this._raw,
        t2 = P.RegExp_RegExp("\\b[a-z]+\\s*&&\\s*[a-z]+\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*([a-zA-Z0-9$]+)\\(", false).firstMatch$1(t1)._match;
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      entryPoint = t2[1];
      if (entryPoint == null)
        throw H.wrapException(G.ParseException$("Could not find the entry function for signature deciphering."));
      t2 = P.RegExp_RegExp("(?!h\\.)" + H.quoteStringForRegExp(entryPoint) + "=function\\(\\w+\\)\\{(.*?)\\}", false).firstMatch$1(t1)._match;
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      entryPointBody = t2[1];
      if (entryPointBody == null)
        throw H.wrapException(G.ParseException$("Could not find the signature decipherer function body."));
      t2 = H.setRuntimeTypeInfo(entryPointBody.split(";"), [P.String]);
      entryPointLines = H.setRuntimeTypeInfo(t2.slice(0), [H.getTypeArgumentByIndex(t2, 0)]);
      operations = H.setRuntimeTypeInfo([], [Y.BaseCipherOperation]);
      for (charSwapFuncName = _null, sliceFuncName = charSwapFuncName, reverseFuncName = sliceFuncName, i = 0; i < entryPointLines.length; ++i) {
        if (reverseFuncName != null && sliceFuncName != null && charSwapFuncName != null)
          break;
        t2 = P.RegExp_RegExp(_s12_, false);
        if (i >= entryPointLines.length)
          return H.ioore(entryPointLines, i);
        t2 = t2.firstMatch$1(entryPointLines[i])._match;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        calledFuncName = t2[1];
        if (calledFuncName == null)
          continue;
        t2 = P.RegExp_RegExp(H.quoteStringForRegExp(calledFuncName) + ":\\bfunction\\b\\(\\w+\\)", false);
        if (t2._nativeRegExp.test(t1))
          reverseFuncName = calledFuncName;
        else {
          t2 = P.RegExp_RegExp(H.quoteStringForRegExp(calledFuncName) + ":\\bfunction\\b\\([a],b\\).(\\breturn\\b)?.?\\w+\\.", false);
          if (t2._nativeRegExp.test(t1))
            sliceFuncName = calledFuncName;
          else {
            t2 = P.RegExp_RegExp(H.quoteStringForRegExp(calledFuncName) + ":\\bfunction\\b\\(\\w+\\,\\w\\).\\bvar\\b.\\bc=a\\b", false);
            if (t2._nativeRegExp.test(t1))
              charSwapFuncName = calledFuncName;
          }
        }
      }
      for (i = 0; i < entryPointLines.length; ++i) {
        t1 = P.RegExp_RegExp(_s12_, false);
        if (i >= entryPointLines.length)
          return H.ioore(entryPointLines, i);
        t1 = t1.firstMatch$1(entryPointLines[i])._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        calledFuncName = t1[1];
        if (calledFuncName == null)
          continue;
        if (calledFuncName === charSwapFuncName) {
          t1 = P.RegExp_RegExp(_s13_, false);
          if (i >= entryPointLines.length)
            return H.ioore(entryPointLines, i);
          t1 = t1.firstMatch$1(entryPointLines[i])._match;
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          C.JSArray_methods.add$1(operations, new R.SwapCipherOperation(H.Primitives_parseInt(t1[1], _null)));
        } else if (calledFuncName === sliceFuncName) {
          t1 = P.RegExp_RegExp(_s13_, false);
          if (i >= entryPointLines.length)
            return H.ioore(entryPointLines, i);
          t1 = t1.firstMatch$1(entryPointLines[i])._match;
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          C.JSArray_methods.add$1(operations, new U.SliceCipherOperation(H.Primitives_parseInt(t1[1], _null)));
        } else if (calledFuncName === reverseFuncName)
          C.JSArray_methods.add$1(operations, new N.ReverseCipherOperation());
      }
      return operations;
    }
  };
  L.StreamInfoParser.prototype = {
    parseItag$0: function() {
      var t1 = this._stream2dinfo2dparser$_root.attributes;
      return H.Primitives_parseInt(C.JSArray_methods.firstWhere$2$orElse(t1._base, H.functionTypeCheck(new L.StreamInfoParser_parseItag_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), null)._value, null);
    },
    parseUrl$0: function() {
      var t1 = this._stream2dinfo2dparser$_root;
      t1.toString;
      return J.get$text$z(new M.XmlDescendantsIterable(t1).firstWhere$1(0, new L.StreamInfoParser_parseUrl_closure()));
    },
    parseBitrate$0: function() {
      var t1 = this._stream2dinfo2dparser$_root.attributes;
      return H.Primitives_parseInt(C.JSArray_methods.firstWhere$2$orElse(t1._base, H.functionTypeCheck(new L.StreamInfoParser_parseBitrate_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), null)._value, null);
    },
    parseIsAudioOnly$0: function() {
      var t1 = this._stream2dinfo2dparser$_root;
      t1.toString;
      return new M.XmlDescendantsIterable(t1).any$1(0, new L.StreamInfoParser_parseIsAudioOnly_closure());
    },
    parseWidth$0: function() {
      var t1 = this._stream2dinfo2dparser$_root.attributes;
      t1 = C.JSArray_methods.firstWhere$2$orElse(t1._base, H.functionTypeCheck(new L.StreamInfoParser_parseWidth_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), null);
      return H.Primitives_parseInt(t1 == null ? null : t1._value, null);
    },
    parseHeight$0: function() {
      var t1 = this._stream2dinfo2dparser$_root.attributes;
      t1 = C.JSArray_methods.firstWhere$2$orElse(t1._base, H.functionTypeCheck(new L.StreamInfoParser_parseHeight_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), null);
      return H.Primitives_parseInt(t1 == null ? null : t1._value, null);
    },
    parseFramerate$0: function() {
      var t1 = this._stream2dinfo2dparser$_root.attributes;
      t1 = C.JSArray_methods.firstWhere$2$orElse(t1._base, H.functionTypeCheck(new L.StreamInfoParser_parseFramerate_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), null);
      return H.Primitives_parseInt(t1 == null ? null : t1._value, null);
    }
  };
  L.StreamInfoParser_parseItag_closure.prototype = {
    call$1: function(x) {
      return H.interceptedTypeCheck(x, "$isXmlAttribute").name.get$local() === "id";
    },
    $signature: 5
  };
  L.StreamInfoParser_parseUrl_closure.prototype = {
    call$1: function(x) {
      H.interceptedTypeCheck(x, "$isXmlNode");
      return x instanceof U.XmlElement && x.name.get$local() === "BaseURL";
    },
    $signature: 9
  };
  L.StreamInfoParser_parseBitrate_closure.prototype = {
    call$1: function(x) {
      return H.interceptedTypeCheck(x, "$isXmlAttribute").name.get$local() === "bandwidth";
    },
    $signature: 5
  };
  L.StreamInfoParser_parseIsAudioOnly_closure.prototype = {
    call$1: function(x) {
      H.interceptedTypeCheck(x, "$isXmlNode");
      return x instanceof U.XmlElement && x.name.get$local() === "AudioChannelConfiguration";
    },
    $signature: 9
  };
  L.StreamInfoParser_parseWidth_closure.prototype = {
    call$1: function(x) {
      return H.interceptedTypeCheck(x, "$isXmlAttribute").name.get$local() === "width";
    },
    $signature: 5
  };
  L.StreamInfoParser_parseHeight_closure.prototype = {
    call$1: function(x) {
      return H.interceptedTypeCheck(x, "$isXmlAttribute").name.get$local() === "height";
    },
    $signature: 5
  };
  L.StreamInfoParser_parseFramerate_closure.prototype = {
    call$1: function(x) {
      return H.interceptedTypeCheck(x, "$isXmlAttribute").name.get$local() === "frameRate";
    },
    $signature: 5
  };
  R.VideoInfoParser.prototype = {
    parseErrorCode$0: function() {
      var _s9_ = "errorcode",
        t1 = this._root;
      return t1.$index(0, _s9_) == null ? 0 : H.Primitives_parseInt(t1.$index(0, _s9_), null);
    },
    getMuxedStreamInfo$0: function() {
      var builtList,
        streamInfosEncoded = this._root.$index(0, "url_encoded_fmt_stream_map");
      if (streamInfosEncoded == null)
        return H.setRuntimeTypeInfo([], [N.MuxedStreamInfoParser]);
      builtList = H.setRuntimeTypeInfo([], [N.MuxedStreamInfoParser]);
      C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo(streamInfosEncoded.split(","), [P.String]), new R.VideoInfoParser_getMuxedStreamInfo_closure(builtList));
      return builtList;
    },
    getAdaptiveStreamInfo$0: function() {
      var builtList,
        streamInfosEncoded = this._root.$index(0, "adaptive_fmts");
      if (streamInfosEncoded == null)
        return H.setRuntimeTypeInfo([], [D.AdaptiveStreamInfoParser]);
      builtList = H.setRuntimeTypeInfo([], [D.AdaptiveStreamInfoParser]);
      C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo(streamInfosEncoded.split(","), [P.String]), new R.VideoInfoParser_getAdaptiveStreamInfo_closure(builtList));
      return builtList;
    }
  };
  R.VideoInfoParser_getMuxedStreamInfo_closure.prototype = {
    call$1: function(stream) {
      C.JSArray_methods.add$1(this.builtList, new N.MuxedStreamInfoParser(P.Uri_splitQueryString(H.stringTypeCheck(stream))));
    },
    $signature: 7
  };
  R.VideoInfoParser_getAdaptiveStreamInfo_closure.prototype = {
    call$1: function(stream) {
      C.JSArray_methods.add$1(this.builtList, new D.AdaptiveStreamInfoParser(P.Uri_splitQueryString(H.stringTypeCheck(stream))));
    },
    $signature: 7
  };
  O.PlayerContext.prototype = {};
  V.PlayerSource.prototype = {
    decipher$1: function(input) {
      var t1 = {};
      t1.input = input;
      C.JSArray_methods.forEach$1(this.cipherOperations, new V.PlayerSource_decipher_closure(t1));
      return t1.input;
    }
  };
  V.PlayerSource_decipher_closure.prototype = {
    call$1: function(operation) {
      var t1 = this._box_0;
      t1.input = H.interceptedTypeCheck(operation, "$isBaseCipherOperation").decipher$1(t1.input);
    },
    $signature: 56
  };
  G.AudioEncoding.prototype = {
    toString$0: function(_) {
      return this._audio_encoding$_name;
    }
  };
  R.AudioStreamInfo.prototype = {};
  M.Container.prototype = {
    toString$0: function(_) {
      return this._container$_name;
    }
  };
  M.MediaStreamInfo.prototype = {
    toString$0: function(_) {
      return H.S(this.iTag) + " (" + this.container.toString$0(0) + ")";
    }
  };
  A.MediaStreamInfoSet.prototype = {};
  R.MuxedStreamInfo.prototype = {};
  Y.VideoEncoding.prototype = {
    toString$0: function(_) {
      return this._video_encoding$_name;
    }
  };
  R.VideoQuality.prototype = {
    toString$0: function(_) {
      return this._video_quality$_name;
    }
  };
  Y.VideoStreamInfo.prototype = {};
  Y.YouTubeExtractor.prototype = {
    getMediaStreamsAsync$1: function(videoId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(A.MediaStreamInfoSet),
        $async$returnValue, $async$self = this, playerContext, parser, t1, t2, muxedStreamInfoMap, audioStreamInfoMap, videoStreamInfoMap, muxedStreamInfo, i, itag, url, signature, contentLength, streamInfo, adaptiveStreamInfo, dashManifestUrl, dashManifestRaw, result, position, dashStreamInfo, videoStreamInfos, $async$temp1;
      var $async$getMediaStreamsAsync$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                if (!$async$self._validateVideoId$1(videoId))
                  throw H.wrapException(P.ArgumentError$("Invalid YouTube video ID [" + videoId + "]."));
                $async$self._client = new O.BrowserClient(P.LinkedHashSet_LinkedHashSet(W.HttpRequest));
                $async$goto = 3;
                return P._asyncAwait($async$self._getVideoPlayerContextAsync$1(videoId), $async$getMediaStreamsAsync$1);
              case 3:
                // returning from await.
                playerContext = $async$result;
                $async$goto = 4;
                return P._asyncAwait($async$self._getVideoInfoParserAsync$3(videoId, "embedded", playerContext.sts), $async$getMediaStreamsAsync$1);
              case 4:
                // returning from await.
                parser = $async$result;
                t1 = parser._root;
                if (t1.$index(0, "ypc_vid") != null)
                  throw H.wrapException(new Q.VideoRequiresPurchaseException(videoId));
                t2 = P.int;
                muxedStreamInfoMap = new H.JsLinkedHashMap([t2, R.MuxedStreamInfo]);
                audioStreamInfoMap = new H.JsLinkedHashMap([t2, R.AudioStreamInfo]);
                videoStreamInfoMap = new H.JsLinkedHashMap([t2, Y.VideoStreamInfo]);
                muxedStreamInfo = parser.getMuxedStreamInfo$0();
                i = 0;
              case 5:
                // for condition
                if (!(i < muxedStreamInfo.length)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                t2 = muxedStreamInfo[i];
                itag = t2._getInt$1(t2._muxed_stream_info_parser$_root.$index(0, "itag"));
                if (!$.$get$ItagHelper__ItagMap().containsKey$1(itag)) {
                  // goto for update
                  $async$goto = 6;
                  break;
                }
                if (i >= muxedStreamInfo.length) {
                  $async$returnValue = H.ioore(muxedStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                url = muxedStreamInfo[i]._muxed_stream_info_parser$_root.$index(0, "url");
                if (i >= muxedStreamInfo.length) {
                  $async$returnValue = H.ioore(muxedStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = muxedStreamInfo[i]._muxed_stream_info_parser$_root.$index(0, "s");
                $async$goto = t2 != null ? 8 : 9;
                break;
              case 8:
                // then
                $async$goto = 10;
                return P._asyncAwait($async$self._getVideoPlayerSourceAsync$1(playerContext.sourceUrl), $async$getMediaStreamsAsync$1);
              case 10:
                // returning from await.
                signature = $async$result.decipher$1(t2);
                url = J.$add$ansx(url, "&signature=") + signature;
              case 9:
                // join
                $async$temp1 = H;
                $async$goto = 11;
                return P._asyncAwait($async$self._client._sendUnstreamed$3("HEAD", url, null), $async$getMediaStreamsAsync$1);
              case 11:
                // returning from await.
                contentLength = $async$temp1.Primitives_parseInt($async$result.headers.$index(0, "content-length"), null);
                if (typeof contentLength !== "number") {
                  $async$returnValue = contentLength.$gt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (contentLength > 0) {
                  streamInfo = new R.MuxedStreamInfo(itag, url);
                  streamInfo.container = K.ItagHelper_getContainer(itag);
                  K.ItagHelper_getAudioEncoding(itag);
                  K.ItagHelper_getVideoEncoding(itag);
                  streamInfo.videoQuality = K.ItagHelper_getVideoQuality(itag);
                  muxedStreamInfoMap.$indexSet(0, itag, streamInfo);
                }
              case 6:
                // for update
                ++i;
                // goto for condition
                $async$goto = 5;
                break;
              case 7:
                // after for
                adaptiveStreamInfo = parser.getAdaptiveStreamInfo$0();
                i = 0;
              case 12:
                // for condition
                if (!(i < adaptiveStreamInfo.length)) {
                  // goto after for
                  $async$goto = 14;
                  break;
                }
                t2 = adaptiveStreamInfo[i];
                itag = t2._adaptive_stream_info_parser$_getInt$1(t2._adaptive_stream_info_parser$_root.$index(0, "itag"));
                if (!$.$get$ItagHelper__ItagMap().containsKey$1(itag)) {
                  // goto for update
                  $async$goto = 13;
                  break;
                }
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = adaptiveStreamInfo[i];
                contentLength = t2._adaptive_stream_info_parser$_getInt$1(t2._adaptive_stream_info_parser$_root.$index(0, "clen"));
                if (typeof contentLength !== "number") {
                  $async$returnValue = contentLength.$gt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = contentLength > 0 ? 15 : 16;
                break;
              case 15:
                // then
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                url = adaptiveStreamInfo[i]._adaptive_stream_info_parser$_root.$index(0, "url");
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = adaptiveStreamInfo[i]._adaptive_stream_info_parser$_root.$index(0, "s");
                $async$goto = t2 != null ? 17 : 18;
                break;
              case 17:
                // then
                $async$goto = 19;
                return P._asyncAwait($async$self._getVideoPlayerSourceAsync$1(playerContext.sourceUrl), $async$getMediaStreamsAsync$1);
              case 19:
                // returning from await.
                signature = $async$result.decipher$1(t2);
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = J.getInterceptor$ansx(url);
                if (adaptiveStreamInfo[i]._adaptive_stream_info_parser$_root.$index(0, "sp") != null) {
                  if (i >= adaptiveStreamInfo.length) {
                    $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  url = t2.$add(url, "&ratebypass=yes&" + H.S(adaptiveStreamInfo[i]._adaptive_stream_info_parser$_root.$index(0, "sp")) + "=") + signature;
                } else
                  url = t2.$add(url, "&ratebypass=yes&signature=") + signature;
              case 18:
                // join
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = adaptiveStreamInfo[i];
                t2._adaptive_stream_info_parser$_getInt$1(t2._adaptive_stream_info_parser$_root.$index(0, "bitrate"));
                if (i >= adaptiveStreamInfo.length) {
                  $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = adaptiveStreamInfo[i]._adaptive_stream_info_parser$_root.$index(0, "type");
                if (H.boolConversionCheck(t2 == null ? null : J.startsWith$1$s(t2, "audio/"))) {
                  streamInfo = new R.AudioStreamInfo(itag, url);
                  streamInfo.container = K.ItagHelper_getContainer(itag);
                  K.ItagHelper_getAudioEncoding(itag);
                  audioStreamInfoMap.$indexSet(0, itag, streamInfo);
                } else {
                  if (i >= adaptiveStreamInfo.length) {
                    $async$returnValue = H.ioore(adaptiveStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t2 = adaptiveStreamInfo[i];
                  t2._adaptive_stream_info_parser$_getInt$1(t2._adaptive_stream_info_parser$_root.$index(0, "fps"));
                  streamInfo = new Y.VideoStreamInfo(itag, url);
                  streamInfo.container = K.ItagHelper_getContainer(itag);
                  K.ItagHelper_getVideoEncoding(itag);
                  K.ItagHelper_getVideoQuality(itag);
                  videoStreamInfoMap.$indexSet(0, itag, streamInfo);
                }
              case 16:
                // join
              case 13:
                // for update
                ++i;
                // goto for condition
                $async$goto = 12;
                break;
              case 14:
                // after for
                dashManifestUrl = t1.$index(0, "dashmpd");
                $async$goto = dashManifestUrl != null ? 20 : 21;
                break;
              case 20:
                // then
                t2 = P.RegExp_RegExp("/s/(.*?)(?:/|$)", false).firstMatch$1(dashManifestUrl);
                if (t2 == null)
                  signature = null;
                else {
                  t2 = t2._match;
                  if (1 >= t2.length) {
                    $async$returnValue = H.ioore(t2, 1);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  signature = t2[1];
                }
                $async$goto = signature != null && signature.length !== 0 ? 22 : 23;
                break;
              case 22:
                // then
                $async$goto = 24;
                return P._asyncAwait($async$self._getVideoPlayerSourceAsync$1(playerContext.sourceUrl), $async$getMediaStreamsAsync$1);
              case 24:
                // returning from await.
                signature = $async$result.decipher$1(signature);
                dashManifestUrl = dashManifestUrl + "?signature=" + signature;
              case 23:
                // join
                $async$goto = 25;
                return P._asyncAwait($async$self._client._sendUnstreamed$3("GET", dashManifestUrl, null), $async$getMediaStreamsAsync$1);
              case 25:
                // returning from await.
                t2 = $async$result;
                dashManifestRaw = B.encodingForCharset(U._contentTypeForHeaders(t2.headers).parameters._map.$index(0, "charset")).decode$1(t2.bodyBytes);
                result = $.$get$_parser().parseOn$1(new A.Context(dashManifestRaw, 0));
                if (result.get$isFailure()) {
                  position = K.Token_lineAndColumnOf(dashManifestRaw, result.position);
                  H.throwExpression(N.XmlParserException$(result.get$message(result), position[0], position[1]));
                }
                dashStreamInfo = new U.DashManifestParser(H.interceptedTypeCheck(result.get$value(), "$isXmlDocument")).getStreamInfo$0();
                for (i = 0; i < dashStreamInfo.length; ++i) {
                  itag = dashStreamInfo[i].parseItag$0();
                  if (!$.$get$ItagHelper__ItagMap().containsKey$1(itag))
                    continue;
                  if (i >= dashStreamInfo.length) {
                    $async$returnValue = H.ioore(dashStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  url = dashStreamInfo[i].parseUrl$0();
                  if (i >= dashStreamInfo.length) {
                    $async$returnValue = H.ioore(dashStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  t2 = dashStreamInfo[i];
                  t2 = P.RegExp_RegExp("clen[/=](\\d+)", false).firstMatch$1(t2.parseUrl$0())._match;
                  if (1 >= t2.length) {
                    $async$returnValue = H.ioore(t2, 1);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  H.Primitives_parseInt(t2[1], null);
                  if (i >= dashStreamInfo.length) {
                    $async$returnValue = H.ioore(dashStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  dashStreamInfo[i].parseBitrate$0();
                  if (i >= dashStreamInfo.length) {
                    $async$returnValue = H.ioore(dashStreamInfo, i);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  if (dashStreamInfo[i].parseIsAudioOnly$0()) {
                    streamInfo = new R.AudioStreamInfo(itag, url);
                    streamInfo.container = K.ItagHelper_getContainer(itag);
                    K.ItagHelper_getAudioEncoding(itag);
                    audioStreamInfoMap.$indexSet(0, itag, streamInfo);
                  } else {
                    if (i >= dashStreamInfo.length) {
                      $async$returnValue = H.ioore(dashStreamInfo, i);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    dashStreamInfo[i].parseWidth$0();
                    if (i >= dashStreamInfo.length) {
                      $async$returnValue = H.ioore(dashStreamInfo, i);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    dashStreamInfo[i].parseHeight$0();
                    if (i >= dashStreamInfo.length) {
                      $async$returnValue = H.ioore(dashStreamInfo, i);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    dashStreamInfo[i].parseFramerate$0();
                    streamInfo = new Y.VideoStreamInfo(itag, url);
                    streamInfo.container = K.ItagHelper_getContainer(itag);
                    K.ItagHelper_getVideoEncoding(itag);
                    K.ItagHelper_getVideoQuality(itag);
                    videoStreamInfoMap.$indexSet(0, itag, streamInfo);
                  }
                }
              case 21:
                // join
                t1.$index(0, "hlsvp");
                t1 = muxedStreamInfoMap.get$values();
                P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
                t1 = audioStreamInfoMap.get$values();
                P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
                t1 = videoStreamInfoMap.get$values();
                videoStreamInfos = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
                $async$self._client.close$0();
                $async$returnValue = new A.MediaStreamInfoSet(videoStreamInfos);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$getMediaStreamsAsync$1, $async$completer);
    },
    _getVideoPlayerContextAsync$1: function(videoId) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(O.PlayerContext),
        $async$returnValue, $async$self = this, config, root, playerSourceUrl, sts, url, t1, body;
      var $async$_getVideoPlayerContextAsync$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = "https://www.youtube.com/embed/" + videoId + "?disable_polymer=true&hl=en";
              $async$goto = 3;
              return P._asyncAwait($async$self._client._sendUnstreamed$3("GET", url, null), $async$_getVideoPlayerContextAsync$1);
            case 3:
              // returning from await.
              t1 = $async$result;
              body = B.encodingForCharset(U._contentTypeForHeaders(t1.headers).parameters._map.$index(0, "charset")).decode$1(t1.bodyBytes);
              t1 = P.RegExp_RegExp("yt\\.setConfig\\({'PLAYER_CONFIG':.+?\\}\\);", true).firstMatch$1(body)._match;
              if (0 >= t1.length) {
                $async$returnValue = H.ioore(t1, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              config = t1[0];
              root = C.C_JsonCodec.decode$1(J.substring$2$s(config, 30, config.length - 3));
              t1 = J.getInterceptor$asx(root);
              playerSourceUrl = J.toString$0$(J.$index$asx(t1.$index(root, "assets"), "js"));
              if (playerSourceUrl != null && playerSourceUrl.length !== 0)
                playerSourceUrl = C.JSString_methods.$add("https://www.youtube.com", playerSourceUrl);
              sts = J.toString$0$(t1.$index(root, "sts"));
              if (playerSourceUrl == null || playerSourceUrl.length === 0 || sts == null || sts.length === 0)
                throw H.wrapException(G.ParseException$("Could not parse player context."));
              $async$returnValue = new O.PlayerContext(playerSourceUrl, sts);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getVideoPlayerContextAsync$1, $async$completer);
    },
    _getVideoInfoParserAsync$3: function(videoId, el, sts) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(R.VideoInfoParser),
        $async$returnValue, $async$self = this, eurl, url, t1, root, parser;
      var $async$_getVideoInfoParserAsync$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              eurl = P._Uri__uriEncode(C.List_gnE, "https://youtube.googleapis.com/v/" + videoId, C.C_Utf8Codec, false);
              url = "https://www.youtube.com/get_video_info?video_id=" + videoId + "&el=" + el + "&eurl=" + eurl + "&hl=en";
              $async$goto = 3;
              return P._asyncAwait($async$self._client._sendUnstreamed$3("GET", url, null), $async$_getVideoInfoParserAsync$3);
            case 3:
              // returning from await.
              t1 = $async$result;
              root = P.Uri_splitQueryString(B.encodingForCharset(U._contentTypeForHeaders(t1.headers).parameters._map.$index(0, "charset")).decode$1(t1.bodyBytes));
              parser = new R.VideoInfoParser(root);
              if (root.$index(0, "status") !== "ok")
                throw H.wrapException(R.VideoUnavailableException$(videoId, parser.parseErrorCode$0(), root.$index(0, "reason")));
              t1 = sts.length !== 0 && parser.parseErrorCode$0() !== 0;
              $async$goto = t1 ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait($async$self._getVideoInfoParserAsync$3(videoId, "detailpage", sts), $async$_getVideoInfoParserAsync$3);
            case 6:
              // returning from await.
              parser = $async$result;
              if (parser.parseErrorCode$0() !== 0)
                throw H.wrapException(R.VideoUnavailableException$(videoId, parser.parseErrorCode$0(), parser._root.$index(0, "reason")));
            case 5:
              // join
              $async$returnValue = parser;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getVideoInfoParserAsync$3, $async$completer);
    },
    _getVideoPlayerSourceAsync$1: function(sourceUrl) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(V.PlayerSource),
        $async$returnValue, $async$self = this, t2, t1, playerSource;
      var $async$_getVideoPlayerSourceAsync$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._playerSourceCache;
              playerSource = t1.$index(0, sourceUrl);
              if (playerSource != null) {
                $async$returnValue = playerSource;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($async$self._client._sendUnstreamed$3("GET", sourceUrl, null), $async$_getVideoPlayerSourceAsync$1);
            case 3:
              // returning from await.
              t2 = $async$result;
              t2 = new V.PlayerSource(new Y.PlayerSourceParser(B.encodingForCharset(U._contentTypeForHeaders(t2.headers).parameters._map.$index(0, "charset")).decode$1(t2.bodyBytes)).parseCipherOperations$0());
              t1.$indexSet(0, sourceUrl, t2);
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getVideoPlayerSourceAsync$1, $async$completer);
    },
    _validateVideoId$1: function(videoId) {
      var t1 = videoId.length;
      if (t1 === 0)
        return false;
      if (t1 !== 11)
        return false;
      t1 = P.RegExp_RegExp("[^0-9a-zA-Z_\\-]", false);
      return !t1._nativeRegExp.test(videoId);
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = M.DelegatingList.prototype;
    _.super$DelegatingList$$indexSet = _.$indexSet;
    _.super$DelegatingList$addAll = _.addAll$1;
    _ = G.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = R.DelegateParser.prototype;
    _.super$DelegateParser$replace = _.replace$2;
    _ = Q.Parser.prototype;
    _.super$Parser$fastParseOn = _.fastParseOn$2;
    _.super$Parser$hasEqualProperties = _.hasEqualProperties$1;
    _.super$Parser$replace = _.replace$2;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = X.XmlProductionDefinition.prototype;
    _.super$XmlProductionDefinition$attribute = _.attribute$0;
    _.super$XmlProductionDefinition$attributeValueDouble = _.attributeValueDouble$0;
    _.super$XmlProductionDefinition$attributeValueSingle = _.attributeValueSingle$0;
    _.super$XmlProductionDefinition$comment = _.comment$0;
    _.super$XmlProductionDefinition$cdata = _.cdata$0;
    _.super$XmlProductionDefinition$doctype = _.doctype$0;
    _.super$XmlProductionDefinition$document = _.document$0;
    _.super$XmlProductionDefinition$element = _.element$0;
    _.super$XmlProductionDefinition$processing = _.processing$0;
    _.super$XmlProductionDefinition$qualified = _.qualified$0;
    _.super$XmlProductionDefinition$characterData = _.characterData$0;
    _.super$XmlProductionDefinition$spaceText = _.spaceText$0;
    _ = N.XmlException.prototype;
    _.super$XmlException$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_2_i = hunkHelpers._instance_2i,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 57);
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 17);
    _static_1(H, "_js_helper___matchString$closure", "_matchString", 4);
    _static_1(H, "_js_helper___stringIdentity$closure", "_stringIdentity", 3);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 10);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 10);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 10);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 2);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 14, 0);
    _instance(P._SyncCompleter.prototype, "get$complete", 0, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 35, 0);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 14, 0);
    _static_2(P, "collection___defaultEquals$closure", "_defaultEquals", 59);
    _static_1(P, "collection___defaultHashCode$closure", "_defaultHashCode", 60);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 11);
    var _;
    _instance_1_i(_ = P._ByteCallbackSink.prototype, "get$add", "add$1", 17);
    _instance_0_u(_, "get$close", "close$0", 2);
    _static_1(P, "core__identityHashCode$closure", "identityHashCode", 61);
    _static_2(P, "core__identical$closure", "identical", 41);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 3);
    _instance_2_i(W.HttpRequest.prototype, "get$setRequestHeader", "setRequestHeader$2", 26);
    _instance_0_u(_ = B.XmlGrammarDefinition.prototype, "get$attribute", "attribute$0", 0);
    _instance_0_u(_, "get$attributeValueDouble", "attributeValueDouble$0", 0);
    _instance_0_u(_, "get$attributeValueSingle", "attributeValueSingle$0", 0);
    _instance_0_u(_, "get$comment", "comment$0", 0);
    _instance_0_u(_, "get$cdata", "cdata$0", 0);
    _instance_0_u(_, "get$doctype", "doctype$0", 0);
    _instance_0_u(_, "get$document", "document$0", 0);
    _instance_0_u(_, "get$element", "element$0", 0);
    _instance_0_u(_, "get$processing", "processing$0", 0);
    _instance_0_u(_, "get$qualified", "qualified$0", 0);
    _instance_0_u(_, "get$characterData", "characterData$0", 0);
    _instance_0_u(_, "get$spaceText", "spaceText$0", 0);
    _instance_1_u(_ = V.XmlParserDefinition.prototype, "get$createQualified", "createQualified$1", 51);
    _instance_1_u(_, "get$createText", "createText$1", 52);
    _instance_0_u(_ = X.XmlProductionDefinition.prototype, "get$start", "start$0", 0);
    _instance_0_u(_, "get$attributeValue", "attributeValue$0", 0);
    _instance_0_u(_, "get$attributes", "attributes$0", 0);
    _instance_0_u(_, "get$content", "content$0", 0);
    _instance_0_u(_, "get$misc", "misc$0", 0);
    _instance_0_u(_, "get$space", "space$0", 0);
    _instance_0_u(_, "get$spaceOptional", "spaceOptional$0", 0);
    _instance_0_u(_, "get$nameToken", "nameToken$0", 0);
    _instance_0_u(_, "get$nameStartChar", "nameStartChar$0", 0);
    _instance_0_u(_, "get$nameChar", "nameChar$0", 0);
    _static_1(T, "entities___textReplace$closure", "_textReplace", 4);
    _instance(K.XmlVisitor.prototype, "get$visit", 0, 1, null, ["call$1$1", "call$1"], ["visit$1$1", "visit$1"], 53, 1);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.CastIterator, P._ListBase_Object_ListMixin, H.ListIterator, P.Iterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.Closure, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.TypeImpl, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, P._TimerImpl, P._AsyncAwaitCompleter, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P._BufferingStreamSubscription, P._PendingEvents, P._StreamIterator, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.ListMixin, P._UnmodifiableMapMixin, P.Codec, P._Base64Encoder, P.ChunkedConversionSink, P._JsonStringifier, P._Utf8Encoder, P._Utf8Decoder, P.bool, P.DateTime, P.num, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.List, P.Map, P.Null, P.Pattern, P.Match, P.RegExpMatch, P.StackTrace, P.String, P.StringBuffer, P.Symbol0, P._Uri, P.UriData, P._SimpleUri, P._AcceptStructuredClone, P.Uint8List, M.CanonicalizedMap, B.Pair, M._DelegatingIterableBase, E.BaseClient, G.BaseRequest, T.BaseResponse, E.ClientException, R.MediaType, M.Context0, O.Style, X.ParsedPath, X.PathException, Q.Parser, E.CharacterPredicate, V.RangeCharPredicate, Z.RangesCharPredicate, S.WhitespaceCharPredicate, O.WordCharPredicate, A.Context, D.ParserException, N.GrammarDefinition, K.Token, Y.SourceFile, D.SourceLocationMixin, Y.SourceSpanMixin, U.Highlighter, V.SourceLocation, V.SourceSpan, G.SourceSpanException, X.StringScanner, V._XmlNode_Object_XmlVisitable, G.XmlAttributeType, N.XmlException, L._XmlName_Object_XmlVisitable, E.XmlNodeType, L.XmlOwned, A.XmlWritable, Z._XmlTransformer_Object_XmlVisitor, X.XmlVisitable, K.XmlVisitor, K._XmlWriter_Object_XmlVisitor, G.ParseException, Q.VideoRequiresPurchaseException, R.VideoUnavailableException, Y.BaseCipherOperation, N.ReverseCipherOperation, U.SliceCipherOperation, R.SwapCipherOperation, D.ItagDescriptor, D.AdaptiveStreamInfoParser, U.DashManifestParser, N.MuxedStreamInfoParser, Y.PlayerSourceParser, L.StreamInfoParser, R.VideoInfoParser, O.PlayerContext, V.PlayerSource, G.AudioEncoding, M.MediaStreamInfo, M.Container, A.MediaStreamInfoSet, Y.VideoEncoding, R.VideoQuality, Y.YouTubeExtractor]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Blob, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.TakeWhileIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase, H._StringAllMatchesIterable]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeWhileIterator, H.SkipIterator, M.XmlDescendantsIterator]);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inheritMany(H.Closure, [H.Instantiation, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._AsyncAwaitCompleter_complete_closure, P._AsyncAwaitCompleter_completeError_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_Stream$fromIterable_closure, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_first_closure, P.Stream_first_closure0, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._cancelAndValue_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P._LinkedCustomHashMap_closure, P.MapBase_mapToString_closure, P._JsonStringifier_writeMap_closure, P.NoSuchMethodError_toString_closure, P.Uri_splitQueryString_closure, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W._EventStreamSubscription_closure, P._AcceptStructuredClone_walk_closure, P.convertNativePromiseToDartFuture_closure, P.convertNativePromiseToDartFuture_closure0, M.CanonicalizedMap_addAll_closure, M.CanonicalizedMap_forEach_closure, M.CanonicalizedMap_keys_closure, M.CanonicalizedMap_toString_closure, M._isToStringVisiting_closure, G.BaseRequest_closure, G.BaseRequest_closure0, O.BrowserClient_send_closure, O.BrowserClient_send__closure, O.BrowserClient_send__closure0, O.BrowserClient_send_closure0, Z.ByteStream_toBytes_closure, U.Response_fromStream_closure, Z.CaseInsensitiveMap$from_closure, Z.CaseInsensitiveMap$from_closure0, R.MediaType_MediaType$parse_closure, R.MediaType_toString_closure, R.MediaType_toString__closure, N.expectQuotedString_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, E.optimizedRanges_closure, E.optimizedRanges_closure0, E.optimizedRanges_closure1, D.closure3, D.closure4, D.closure2, D.closure1, N.GrammarDefinition_ref_closure, N.GrammarDefinition__resolve__dereference, Q.Parser_pick_closure, Q.Parser_separatedBy_closure, Q.string_closure, U.Highlighter__writeFirstLine_closure, U.Highlighter__writeFirstLine_closure0, U.Highlighter__writeFirstLine_closure1, U.Highlighter__writeFirstLine_closure2, U.Highlighter__writeIntermediateLines_closure, U.Highlighter__writeLastLine_closure, U.Highlighter__writeLastLine_closure0, U.Highlighter__writeLastLine_closure1, U.Highlighter__writeSidebar_closure, B.XmlGrammarDefinition_attribute_closure, B.XmlGrammarDefinition_attributeValueDouble_closure, B.XmlGrammarDefinition_attributeValueSingle_closure, B.XmlGrammarDefinition_comment_closure, B.XmlGrammarDefinition_cdata_closure, B.XmlGrammarDefinition_doctype_closure, B.XmlGrammarDefinition_document_closure, B.XmlGrammarDefinition_element_closure, B.XmlGrammarDefinition_processing_closure, V.XmlNode_text_closure, V.XmlNode_text_closure0, T.closure7, T.closure6, T.closure5, T.closure, T.closure0, X.XmlNodeList__expandFragment_closure, U.DashManifestParser_getStreamInfo_closure, U.DashManifestParser_getStreamInfo_closure0, L.StreamInfoParser_parseItag_closure, L.StreamInfoParser_parseUrl_closure, L.StreamInfoParser_parseBitrate_closure, L.StreamInfoParser_parseIsAudioOnly_closure, L.StreamInfoParser_parseWidth_closure, L.StreamInfoParser_parseHeight_closure, L.StreamInfoParser_parseFramerate_closure, R.VideoInfoParser_getMuxedStreamInfo_closure, R.VideoInfoParser_getAdaptiveStreamInfo_closure, V.PlayerSource_decipher_closure]);
    _inherit(H.Instantiation1, H.Instantiation);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap]);
    _inheritMany(P.IterableBase, [H._AllMatchesIterable, M.XmlDescendantsIterable]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, H.NativeTypedArray);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt8List, H.NativeUint32List, H.NativeUint8List]);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P.Stream, [P.StreamView, P._StreamImpl, W._EventStream]);
    _inherit(P._GeneratedStreamImpl, P._StreamImpl);
    _inherit(P._IterablePendingEvents, P._PendingEvents);
    _inherit(P._RootZone, P._Zone);
    _inheritMany(H.JsLinkedHashMap, [P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inheritMany(P._SetBase, [P._LinkedHashSet, P._UnmodifiableSet]);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P.JsonCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec]);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [P._UnicodeSubsetEncoder, P._UnicodeSubsetDecoder, P.Base64Encoder, P.JsonEncoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inheritMany(P._UnicodeSubsetDecoder, [P.AsciiDecoder, P.Latin1Decoder]);
    _inherit(P.ByteConversionSink, P.ChunkedConversionSink);
    _inherit(P.ByteConversionSinkBase, P.ByteConversionSink);
    _inherit(P._ByteCallbackSink, P.ByteConversionSinkBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(W.EventTarget, [W.Node, W.FileReader, W.HttpRequestEventTarget]);
    _inherit(W.Document, W.Node);
    _inherit(W.HttpRequest, W.HttpRequestEventTarget);
    _inherit(W.ProgressEvent, W.Event);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(M.DelegatingIterable, M._DelegatingIterableBase);
    _inherit(M.DelegatingList, M.DelegatingIterable);
    _inherit(O.BrowserClient, E.BaseClient);
    _inherit(Z.ByteStream, P.StreamView);
    _inherit(O.Request, G.BaseRequest);
    _inheritMany(T.BaseResponse, [U.Response, X.StreamedResponse]);
    _inherit(Z.CaseInsensitiveMap, M.CanonicalizedMap);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inheritMany(Q.Parser, [R.DelegateParser, D.CharacterParser, S.ListParser, L.Reference, X.EndOfInputParser, N.AnyParser, B.PredicateParser, T.XmlCharacterDataParser]);
    _inheritMany(R.DelegateParser, [D.ActionParser, Y.CastParser, Y.CastListParser, O.FlattenParser, S.TokenParser, K.OptionalParser, G.RepeatingParser]);
    _inheritMany(E.CharacterPredicate, [D.SingleCharPredicate, F.DigitCharPredicate, Q.NotCharacterPredicate]);
    _inheritMany(S.ListParser, [Y.ChoiceParser, L.SequenceParser]);
    _inherit(V.Result, A.Context);
    _inheritMany(V.Result, [B.Failure, E.Success]);
    _inheritMany(G.RepeatingParser, [D.LimitedRepeatingParser, S.PossessiveRepeatingParser]);
    _inherit(E.LazyRepeatingParser, D.LimitedRepeatingParser);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(G.SourceSpanFormatException, G.SourceSpanException);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _inherit(E.StringScannerException, G.SourceSpanFormatException);
    _inherit(X.XmlProductionDefinition, N.GrammarDefinition);
    _inherit(B.XmlGrammarDefinition, X.XmlProductionDefinition);
    _inherit(V._XmlNode_Object_XmlVisitable_XmlWritable, V._XmlNode_Object_XmlVisitable);
    _inherit(V._XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned, V._XmlNode_Object_XmlVisitable_XmlWritable);
    _inherit(V.XmlNode, V._XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned);
    _inheritMany(V.XmlNode, [A.XmlAttribute, V.XmlData, R.XmlParent]);
    _inheritMany(V.XmlData, [G.XmlCDATA, B.XmlComment, S.XmlDoctype, S.XmlProcessing, V.XmlText]);
    _inheritMany(R.XmlParent, [K.XmlDocument, U.XmlElement]);
    _inherit(V.XmlParserDefinition, B.XmlGrammarDefinition);
    _inheritMany(N.XmlException, [N.XmlParserException, N.XmlNodeTypeException, N.XmlParentException]);
    _inherit(L._XmlName_Object_XmlVisitable_XmlWritable, L._XmlName_Object_XmlVisitable);
    _inherit(L._XmlName_Object_XmlVisitable_XmlWritable_XmlOwned, L._XmlName_Object_XmlVisitable_XmlWritable);
    _inherit(L.XmlName, L._XmlName_Object_XmlVisitable_XmlWritable_XmlOwned);
    _inherit(X._XmlNodeList_DelegatingList_XmlOwned, M.DelegatingList);
    _inherit(X.XmlNodeList, X._XmlNodeList_DelegatingList_XmlOwned);
    _inheritMany(L.XmlName, [A.XmlPrefixName, U.XmlSimpleName]);
    _inherit(Z.XmlTransformer, Z._XmlTransformer_Object_XmlVisitor);
    _inherit(K.XmlWriter, K._XmlWriter_Object_XmlVisitor);
    _inheritMany(M.MediaStreamInfo, [R.AudioStreamInfo, R.MuxedStreamInfo, Y.VideoStreamInfo]);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(V._XmlNode_Object_XmlVisitable, X.XmlVisitable);
    _mixin(V._XmlNode_Object_XmlVisitable_XmlWritable, A.XmlWritable);
    _mixin(V._XmlNode_Object_XmlVisitable_XmlWritable_XmlOwned, L.XmlOwned);
    _mixin(L._XmlName_Object_XmlVisitable, X.XmlVisitable);
    _mixin(L._XmlName_Object_XmlVisitable_XmlWritable, A.XmlWritable);
    _mixin(L._XmlName_Object_XmlVisitable_XmlWritable_XmlOwned, L.XmlOwned);
    _mixin(X._XmlNodeList_DelegatingList_XmlOwned, L.XmlOwned);
    _mixin(Z._XmlTransformer_Object_XmlVisitor, K.XmlVisitor);
    _mixin(K._XmlWriter_Object_XmlVisitor, K.XmlVisitor);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.FileReader_methods = W.FileReader.prototype;
    C.HttpRequest_methods = W.HttpRequest.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiDecoder_false_127 = new P.AsciiDecoder(false, 127);
    C.AsciiEncoder_127 = new P.AsciiEncoder(127);
    C.AudioEncoding_0 = new G.AudioEncoding("AudioEncoding.Mp3");
    C.AudioEncoding_1 = new G.AudioEncoding("AudioEncoding.Aac");
    C.AudioEncoding_2 = new G.AudioEncoding("AudioEncoding.Vorbis");
    C.AudioEncoding_3 = new G.AudioEncoding("AudioEncoding.Opus");
    C.C_AsciiCodec = new P.AsciiCodec();
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_DigitCharPredicate = new F.DigitCharPredicate();
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Latin1Codec = new P.Latin1Codec();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C_WhitespaceCharPredicate = new S.WhitespaceCharPredicate();
    C.C_WordCharPredicate = new O.WordCharPredicate();
    C.C__RootZone = new P._RootZone();
    C.Container_0 = new M.Container("Container.Mp4");
    C.Container_1 = new M.Container("Container.M4A");
    C.Container_2 = new M.Container("Container.WebM");
    C.Container_3 = new M.Container("Container.Tgpp");
    C.Container_4 = new M.Container("Container.Flv");
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.Latin1Decoder_false_255 = new P.Latin1Decoder(false, 255);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [[Q.Parser,,]]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [A.XmlAttribute]);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [V.XmlNode]);
    C.List_empty = makeConstList([]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_gnE = H.setRuntimeTypeInfo(makeConstList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_Wnk = H.setRuntimeTypeInfo(makeConstList(["lt", "gt", "amp", "apos", "quot", "Aacute", "aacute", "Acirc", "acirc", "acute", "AElig", "aelig", "Agrave", "agrave", "alefsym", "Alpha", "alpha", "and", "ang", "Aring", "aring", "asymp", "Atilde", "atilde", "Auml", "auml", "bdquo", "Beta", "beta", "brvbar", "bull", "cap", "Ccedil", "ccedil", "cedil", "cent", "Chi", "chi", "circ", "clubs", "cong", "copy", "crarr", "cup", "curren", "dagger", "Dagger", "darr", "dArr", "deg", "Delta", "delta", "diams", "divide", "Eacute", "eacute", "Ecirc", "ecirc", "Egrave", "egrave", "empty", "emsp", "ensp", "Epsilon", "epsilon", "equiv", "Eta", "eta", "ETH", "eth", "Euml", "euml", "euro", "exist", "fnof", "forall", "frac12", "frac14", "frac34", "frasl", "Gamma", "gamma", "ge", "harr", "hArr", "hearts", "hellip", "Iacute", "iacute", "Icirc", "icirc", "iexcl", "Igrave", "igrave", "image", "infin", "int", "Iota", "iota", "iquest", "isin", "Iuml", "iuml", "Kappa", "kappa", "Lambda", "lambda", "lang", "laquo", "larr", "lArr", "lceil", "ldquo", "le", "lfloor", "lowast", "loz", "lrm", "lsaquo", "lsquo", "macr", "mdash", "micro", "middot", "minus", "Mu", "mu", "nabla", "nbsp", "ndash", "ne", "ni", "not", "notin", "nsub", "Ntilde", "ntilde", "Nu", "nu", "Oacute", "oacute", "Ocirc", "ocirc", "OElig", "oelig", "Ograve", "ograve", "oline", "Omega", "omega", "Omicron", "omicron", "oplus", "or", "ordf", "ordm", "Oslash", "oslash", "Otilde", "otilde", "otimes", "Ouml", "ouml", "para", "part", "permil", "perp", "Phi", "phi", "Pi", "pi", "piv", "plusmn", "pound", "prime", "Prime", "prod", "prop", "Psi", "psi", "radic", "rang", "raquo", "rarr", "rArr", "rceil", "rdquo", "real", "reg", "rfloor", "Rho", "rho", "rlm", "rsaquo", "rsquo", "sbquo", "Scaron", "scaron", "sdot", "sect", "shy", "Sigma", "sigma", "sigmaf", "sim", "spades", "sub", "sube", "sum", "sup", "sup1", "sup2", "sup3", "supe", "szlig", "Tau", "tau", "there4", "Theta", "theta", "thetasym", "thinsp", "THORN", "thorn", "tilde", "times", "trade", "Uacute", "uacute", "uarr", "uArr", "Ucirc", "ucirc", "Ugrave", "ugrave", "uml", "upsih", "Upsilon", "upsilon", "Uuml", "uuml", "weierp", "Xi", "xi", "Yacute", "yacute", "yen", "yuml", "Yuml", "Zeta", "zeta", "zwj", "zwnj"]), [P.String]);
    C.Map_WngUw = new H.ConstantStringMap(253, {lt: "<", gt: ">", amp: "&", apos: "'", quot: '"', Aacute: "\xc1", aacute: "\xe1", Acirc: "\xc2", acirc: "\xe2", acute: "\xb4", AElig: "\xc6", aelig: "\xe6", Agrave: "\xc0", agrave: "\xe0", alefsym: "\u2135", Alpha: "\u0391", alpha: "\u03b1", and: "\u2227", ang: "\u2220", Aring: "\xc5", aring: "\xe5", asymp: "\u2248", Atilde: "\xc3", atilde: "\xe3", Auml: "\xc4", auml: "\xe4", bdquo: "\u201e", Beta: "\u0392", beta: "\u03b2", brvbar: "\xa6", bull: "\u2022", cap: "\u2229", Ccedil: "\xc7", ccedil: "\xe7", cedil: "\xb8", cent: "\xa2", Chi: "\u03a7", chi: "\u03c7", circ: "\u02c6", clubs: "\u2663", cong: "\u2245", copy: "\xa9", crarr: "\u21b5", cup: "\u222a", curren: "\xa4", dagger: "\u2020", Dagger: "\u2021", darr: "\u2193", dArr: "\u21d3", deg: "\xb0", Delta: "\u0394", delta: "\u03b4", diams: "\u2666", divide: "\xf7", Eacute: "\xc9", eacute: "\xe9", Ecirc: "\xca", ecirc: "\xea", Egrave: "\xc8", egrave: "\xe8", empty: "\u2205", emsp: "\u2003", ensp: "\u2002", Epsilon: "\u0395", epsilon: "\u03b5", equiv: "\u2261", Eta: "\u0397", eta: "\u03b7", ETH: "\xd0", eth: "\xf0", Euml: "\xcb", euml: "\xeb", euro: "\u20ac", exist: "\u2203", fnof: "\u0192", forall: "\u2200", frac12: "\xbd", frac14: "\xbc", frac34: "\xbe", frasl: "\u2044", Gamma: "\u0393", gamma: "\u03b3", ge: "\u2265", harr: "\u2194", hArr: "\u21d4", hearts: "\u2665", hellip: "\u2026", Iacute: "\xcd", iacute: "\xed", Icirc: "\xce", icirc: "\xee", iexcl: "\xa1", Igrave: "\xcc", igrave: "\xec", image: "\u2111", infin: "\u221e", int: "\u222b", Iota: "\u0399", iota: "\u03b9", iquest: "\xbf", isin: "\u2208", Iuml: "\xcf", iuml: "\xef", Kappa: "\u039a", kappa: "\u03ba", Lambda: "\u039b", lambda: "\u03bb", lang: "\u2329", laquo: "\xab", larr: "\u2190", lArr: "\u21d0", lceil: "\u2308", ldquo: "\u201c", le: "\u2264", lfloor: "\u230a", lowast: "\u2217", loz: "\u25ca", lrm: "\u200e", lsaquo: "\u2039", lsquo: "\u2018", macr: "\xaf", mdash: "\u2014", micro: "\xb5", middot: "\xb7", minus: "\u2212", Mu: "\u039c", mu: "\u03bc", nabla: "\u2207", nbsp: "\xa0", ndash: "\u2013", ne: "\u2260", ni: "\u220b", not: "\xac", notin: "\u2209", nsub: "\u2284", Ntilde: "\xd1", ntilde: "\xf1", Nu: "\u039d", nu: "\u03bd", Oacute: "\xd3", oacute: "\xf3", Ocirc: "\xd4", ocirc: "\xf4", OElig: "\u0152", oelig: "\u0153", Ograve: "\xd2", ograve: "\xf2", oline: "\u203e", Omega: "\u03a9", omega: "\u03c9", Omicron: "\u039f", omicron: "\u03bf", oplus: "\u2295", or: "\u2228", ordf: "\xaa", ordm: "\xba", Oslash: "\xd8", oslash: "\xf8", Otilde: "\xd5", otilde: "\xf5", otimes: "\u2297", Ouml: "\xd6", ouml: "\xf6", para: "\xb6", part: "\u2202", permil: "\u2030", perp: "\u22a5", Phi: "\u03a6", phi: "\u03c6", Pi: "\u03a0", pi: "\u03c0", piv: "\u03d6", plusmn: "\xb1", pound: "\xa3", prime: "\u2032", Prime: "\u2033", prod: "\u220f", prop: "\u221d", Psi: "\u03a8", psi: "\u03c8", radic: "\u221a", rang: "\u232a", raquo: "\xbb", rarr: "\u2192", rArr: "\u21d2", rceil: "\u2309", rdquo: "\u201d", real: "\u211c", reg: "\xae", rfloor: "\u230b", Rho: "\u03a1", rho: "\u03c1", rlm: "\u200f", rsaquo: "\u203a", rsquo: "\u2019", sbquo: "\u201a", Scaron: "\u0160", scaron: "\u0161", sdot: "\u22c5", sect: "\xa7", shy: "\xad", Sigma: "\u03a3", sigma: "\u03c3", sigmaf: "\u03c2", sim: "\u223c", spades: "\u2660", sub: "\u2282", sube: "\u2286", sum: "\u2211", sup: "\u2283", sup1: "\xb9", sup2: "\xb2", sup3: "\xb3", supe: "\u2287", szlig: "\xdf", Tau: "\u03a4", tau: "\u03c4", there4: "\u2234", Theta: "\u0398", theta: "\u03b8", thetasym: "\u03d1", thinsp: "\u2009", THORN: "\xde", thorn: "\xfe", tilde: "\u02dc", times: "\xd7", trade: "\u2122", Uacute: "\xda", uacute: "\xfa", uarr: "\u2191", uArr: "\u21d1", Ucirc: "\xdb", ucirc: "\xfb", Ugrave: "\xd9", ugrave: "\xf9", uml: "\xa8", upsih: "\u03d2", Upsilon: "\u03a5", upsilon: "\u03c5", Uuml: "\xdc", uuml: "\xfc", weierp: "\u2118", Xi: "\u039e", xi: "\u03be", Yacute: "\xdd", yacute: "\xfd", yen: "\xa5", yuml: "\xff", Yuml: "\u0178", Zeta: "\u0396", zeta: "\u03b6", zwj: "\u200d", zwnj: "\u200c"}, C.List_Wnk, [P.String, P.String]);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty3, [P.String, P.String]);
    C.List_empty4 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty4, [P.Symbol0, null]);
    C.XmlNodeType_1 = new E.XmlNodeType("XmlNodeType.ATTRIBUTE");
    C.Map_EeEOF = new H.GeneralConstantMap([C.XmlNodeType_1, null], [E.XmlNodeType, P.Null]);
    C.Set_EeIxt = new P._UnmodifiableSet(C.Map_EeEOF, [E.XmlNodeType]);
    C.XmlNodeType_3 = new E.XmlNodeType("XmlNodeType.CDATA");
    C.XmlNodeType_5 = new E.XmlNodeType("XmlNodeType.COMMENT");
    C.XmlNodeType_8 = new E.XmlNodeType("XmlNodeType.DOCUMENT_TYPE");
    C.XmlNodeType_0 = new E.XmlNodeType("XmlNodeType.ELEMENT");
    C.XmlNodeType_4 = new E.XmlNodeType("XmlNodeType.PROCESSING");
    C.XmlNodeType_2 = new E.XmlNodeType("XmlNodeType.TEXT");
    C.Map_KYVwG = new H.GeneralConstantMap([C.XmlNodeType_3, null, C.XmlNodeType_5, null, C.XmlNodeType_8, null, C.XmlNodeType_0, null, C.XmlNodeType_4, null, C.XmlNodeType_2, null], [E.XmlNodeType, P.Null]);
    C.Set_KYrob = new P._UnmodifiableSet(C.Map_KYVwG, [E.XmlNodeType]);
    C.Map_q8pX9 = new H.GeneralConstantMap([C.XmlNodeType_3, null, C.XmlNodeType_5, null, C.XmlNodeType_0, null, C.XmlNodeType_4, null, C.XmlNodeType_2, null], [E.XmlNodeType, P.Null]);
    C.Set_q81d9 = new P._UnmodifiableSet(C.Map_q8pX9, [E.XmlNodeType]);
    C.Symbol_call = new H.Symbol("call");
    C.Type_Null_Yyn = H.createRuntimeType(P.Null);
    C.VideoEncoding_0 = new Y.VideoEncoding("VideoEncoding.Mp4V");
    C.VideoEncoding_1 = new Y.VideoEncoding("VideoEncoding.H263");
    C.VideoEncoding_2 = new Y.VideoEncoding("VideoEncoding.H264");
    C.VideoEncoding_3 = new Y.VideoEncoding("VideoEncoding.Vp8");
    C.VideoEncoding_4 = new Y.VideoEncoding("VideoEncoding.Vp9");
    C.VideoEncoding_5 = new Y.VideoEncoding("VideoEncoding.Av1");
    C.VideoQuality_0 = new R.VideoQuality("VideoQuality.Low144");
    C.VideoQuality_1 = new R.VideoQuality("VideoQuality.Low240");
    C.VideoQuality_10 = new R.VideoQuality("VideoQuality.High4320");
    C.VideoQuality_2 = new R.VideoQuality("VideoQuality.Medium360");
    C.VideoQuality_3 = new R.VideoQuality("VideoQuality.Medium480");
    C.VideoQuality_4 = new R.VideoQuality("VideoQuality.High720");
    C.VideoQuality_5 = new R.VideoQuality("VideoQuality.High1080");
    C.VideoQuality_6 = new R.VideoQuality("VideoQuality.High1440");
    C.VideoQuality_7 = new R.VideoQuality("VideoQuality.High2160");
    C.VideoQuality_9 = new R.VideoQuality("VideoQuality.High3072");
    C.XmlAttributeType_0 = new G.XmlAttributeType("XmlAttributeType.SINGLE_QUOTE");
    C.XmlAttributeType_1 = new G.XmlAttributeType("XmlAttributeType.DOUBLE_QUOTE");
    C.XmlNodeType_6 = new E.XmlNodeType("XmlNodeType.DOCUMENT");
    C.XmlNodeType_7 = new E.XmlNodeType("XmlNodeType.DOCUMENT_FRAGMENT");
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: [Q.Parser,,]}, {func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.String, args: [P.Match]}, {func: 1, ret: P.bool, args: [A.XmlAttribute]}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.bool, args: [V.XmlNode]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, args: [,]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: P.bool, args: [P.Object]}, {func: 1, ret: P.int, args: [V.RangeCharPredicate]}, {func: 1, ret: E.CharacterPredicate, args: [[P.List,,]]}, {func: 1, ret: [P.List,,], args: [,]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, args: [W.Event]}, {func: 1, args: [,,]}, {func: 1, ret: P.bool, args: [P.String, P.String]}, {func: 1, ret: P.int, args: [P.String]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [[P.List, P.int]]}, {func: 1, ret: U.Response, args: [P.Uint8List]}, {func: 1, args: [, P.String]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: R.MediaType}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, args: [P.String]}, {func: 1, ret: V.RangeCharPredicate, args: [P.String]}, {func: 1, ret: V.RangeCharPredicate, args: [[P.List,,]]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: [Q.Parser,,], args: [L.Reference]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: [P.Map, P.String, P.String], args: [[P.Map, P.String, P.String], P.String]}, {func: 1, ret: -1, args: [P.String, P.int]}, {func: 1, ret: P.String, args: [V.XmlNode]}, {func: 1, ret: L.XmlName, args: [P.String]}, {func: 1, ret: V.XmlText, args: [P.String]}, {func: 1, bounds: [P.Object], ret: 0, args: [X.XmlVisitable]}, {func: 1, ret: P.Null, args: [V.XmlNode]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [Y.BaseCipherOperation]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: P.int, args: [,]}, {func: 1, ret: P.int, args: [P.Object]}, {func: 1, ret: P.int, args: [V.RangeCharPredicate, V.RangeCharPredicate]}], interceptorsByTag: null, leafTags: null};
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
    $.Encoding__nameToEncoding = P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], P.String, P.Encoding);
    $._toStringVisiting0 = [];
    $._currentUriBase = null;
    $._current = null;
    $.attributeQuote = P.LinkedHashMap_LinkedHashMap$_literal([C.XmlAttributeType_0, "'", C.XmlAttributeType_1, '"'], G.XmlAttributeType, P.String);
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      var t1 = new P._Future(C.C__RootZone, [P.Null]);
      t1._setValue$1(null);
      return t1;
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int])));
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", false);
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "_escapedChar", "$get$_escapedChar", function() {
      return P.RegExp_RegExp('["\\x00-\\x1F\\x7F]', false);
    });
    _lazy($, "token", "$get$token", function() {
      return P.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', false);
    });
    _lazy($, "_lws", "$get$_lws", function() {
      return P.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", false);
    });
    _lazy($, "_quotedString", "$get$_quotedString", function() {
      return P.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', false);
    });
    _lazy($, "_quotedPair", "$get$_quotedPair", function() {
      return P.RegExp_RegExp("\\\\(.)", false);
    });
    _lazy($, "nonToken", "$get$nonToken", function() {
      return P.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', false);
    });
    _lazy($, "whitespace", "$get$whitespace", function() {
      return P.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*", false);
    });
    _lazy($, "context", "$get$context", function() {
      return new M.Context0($.$get$Style_platform());
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("[^/]$", false), P.RegExp_RegExp("^/", false));
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", false), P.RegExp_RegExp("[^/\\\\]$", false), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", false), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", false));
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false), P.RegExp_RegExp("^/", false));
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazy($, "single_", "$get$single_", function() {
      return N.any().map$1$1(0, new D.closure3(), V.RangeCharPredicate);
    });
    _lazy($, "range_", "$get$range_", function() {
      return N.any().seq$1(D.char("-")).seq$1(N.any()).map$1$1(0, new D.closure4(), V.RangeCharPredicate);
    });
    _lazy($, "sequence_", "$get$sequence_", function() {
      return $.$get$range_().or$1($.$get$single_()).plus$0().map$1$1(0, new D.closure2(), E.CharacterPredicate);
    });
    _lazy($, "pattern_", "$get$pattern_", function() {
      return D.char("^").optional$0().seq$1($.$get$sequence_()).map$1$1(0, new D.closure1(), E.CharacterPredicate);
    });
    _lazy($, "Token__newlineParser", "$get$Token__newlineParser", function() {
      return D.char("\n").or$1(D.char("\r").seq$1(D.char("\n").optional$0()));
    });
    _lazy($, "_entityHex", "$get$_entityHex", function() {
      return D.pattern("xX").seq$1(O.FlattenParser$(D.pattern("A-Fa-f0-9").plus$0(), "Expected hexadecimal character reference").map$1$1(0, new T.closure7(), null)).pick$1$1(1, P.String);
    });
    _lazy($, "_entityDigit", "$get$_entityDigit", function() {
      return D.char("#").seq$1($.$get$_entityHex().or$1(O.FlattenParser$(D.CharacterParser$(C.C_DigitCharPredicate, "digit expected").plus$0(), "Expected decimal character reference").map$1$1(0, new T.closure6(), null))).pick$1$1(1, P.String);
    });
    _lazy($, "_entity", "$get$_entity", function() {
      return D.char("&").seq$1($.$get$_entityDigit().or$1(O.FlattenParser$(D.CharacterParser$(C.C_WordCharPredicate, "letter or digit expected").plus$0(), "Expected named character reference").map$1$1(0, new T.closure5(), null))).seq$1(D.char(";")).pick$1$1(1, P.String);
    });
    _lazy($, "_textPattern", "$get$_textPattern", function() {
      return P.RegExp_RegExp("[&<]|]]>", false);
    });
    _lazy($, "_attributePattern", "$get$_attributePattern", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([C.XmlAttributeType_0, P.RegExp_RegExp("['&<\\n\\r\\t]", false), C.XmlAttributeType_1, P.RegExp_RegExp('["&<\\n\\r\\t]', false)], G.XmlAttributeType, P.Pattern);
    });
    _lazy($, "_attributeReplace", "$get$_attributeReplace", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([C.XmlAttributeType_0, new T.closure(), C.XmlAttributeType_1, new T.closure0()], G.XmlAttributeType, {func: 1, ret: P.String, args: [P.Match]});
    });
    _lazy($, "XmlTransformer_defaultInstance", "$get$XmlTransformer_defaultInstance", function() {
      return new Z.XmlTransformer();
    });
    _lazy($, "_parser", "$get$_parser", function() {
      var t1 = new V.XmlParserDefinition();
      return t1._resolve$1(L.Reference$(t1.get$start(), C.List_empty));
    });
    _lazy($, "ItagHelper__ItagMap", "$get$ItagHelper__ItagMap", function() {
      var _null = null;
      return P.LinkedHashMap_LinkedHashMap$_literal([5, D.ItagDescriptor$(C.Container_4, C.AudioEncoding_0, C.VideoEncoding_1, C.VideoQuality_0), 6, D.ItagDescriptor$(C.Container_4, C.AudioEncoding_0, C.VideoEncoding_1, C.VideoQuality_1), 13, D.ItagDescriptor$(C.Container_3, C.AudioEncoding_1, C.VideoEncoding_0, C.VideoQuality_0), 17, D.ItagDescriptor$(C.Container_3, C.AudioEncoding_1, C.VideoEncoding_0, C.VideoQuality_0), 18, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_2), 22, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_4), 34, D.ItagDescriptor$(C.Container_4, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_2), 35, D.ItagDescriptor$(C.Container_4, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_3), 36, D.ItagDescriptor$(C.Container_3, C.AudioEncoding_1, C.VideoEncoding_0, C.VideoQuality_1), 37, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_5), 38, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_9), 43, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_2), 44, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_3), 45, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_4), 46, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_5), 59, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_3), 78, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_3), 82, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_2), 83, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_3), 84, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_4), 85, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_5), 91, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_0), 92, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_1), 93, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_2), 94, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_3), 95, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_4), 96, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_5), 100, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_2), 101, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_3), 102, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, C.VideoEncoding_3, C.VideoQuality_4), 132, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_1), 151, D.ItagDescriptor$(C.Container_0, C.AudioEncoding_1, C.VideoEncoding_2, C.VideoQuality_0), 133, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_1), 134, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_2), 135, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_3), 136, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_4), 137, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_5), 138, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_10), 160, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_0), 212, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_3), 213, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_3), 214, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_4), 215, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_4), 216, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_5), 217, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_5), 264, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_6), 266, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_7), 298, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_4), 299, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_2, C.VideoQuality_5), 399, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_5), 398, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_4), 397, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_3), 396, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_2), 395, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_1), 394, D.ItagDescriptor$(C.Container_0, _null, C.VideoEncoding_5, C.VideoQuality_0), 167, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_2), 168, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_3), 169, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_4), 170, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_5), 218, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_3), 219, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_3, C.VideoQuality_3), 242, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_1), 243, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_2), 244, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_3), 245, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_3), 246, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_3), 247, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_4), 248, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_5), 271, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_6), 272, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_7), 278, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_0), 302, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_4), 303, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_5), 308, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_6), 313, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_7), 315, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_7), 330, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_0), 331, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_1), 332, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_2), 333, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_3), 334, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_4), 335, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_5), 336, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_6), 337, D.ItagDescriptor$(C.Container_2, _null, C.VideoEncoding_4, C.VideoQuality_7), 139, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 140, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 141, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 256, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 258, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 325, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 328, D.ItagDescriptor$(C.Container_1, C.AudioEncoding_1, _null, _null), 171, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, _null, _null), 172, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_2, _null, _null), 249, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_3, _null, _null), 250, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_3, _null, _null), 251, D.ItagDescriptor$(C.Container_2, C.AudioEncoding_3, _null, _null)], P.int, D.ItagDescriptor);
    });
    _lazy($, "extractor", "$get$extractor", function() {
      return new Y.YouTubeExtractor(H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, V.PlayerSource), U.Client_Client());
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, Int8Array: H.NativeInt8List, Uint32Array: H.NativeUint32List, Uint8Array: H.NativeUint8List, Blob: W.Blob, File: W.Blob, Document: W.Document, HTMLDocument: W.Document, XMLDocument: W.Document, DOMException: W.DomException, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventTarget: W.EventTarget, FileReader: W.FileReader, XMLHttpRequest: W.HttpRequest, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, Node: W.Node, ProgressEvent: W.ProgressEvent, ResourceProgressEvent: W.ProgressEvent});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, ArrayBuffer: true, ArrayBufferView: false, Int8Array: true, Uint32Array: true, Uint8Array: false, Blob: true, File: true, Document: true, HTMLDocument: true, XMLDocument: true, DOMException: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventTarget: false, FileReader: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: false, Node: false, ProgressEvent: true, ResourceProgressEvent: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(S.main, []);
    else
      S.main([]);
  });
})();

//# sourceMappingURL=app.js.map
